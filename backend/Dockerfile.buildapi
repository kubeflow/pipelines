# 0. Generate client code (go & json) from API protocol buffers
FROM golang:1.13.1-stretch as generator
ENV KFP_VERSION 1.0.0
ENV GRPC_GATEWAY_VERSION v1.9.0
ENV GO_SWAGGER_VERSION v0.18.0
ENV GOLANG_PROTOBUF_VERSION v1.4.2
ENV PROTOCOLBUFFERS_PROTOBUF_VERSION v3.11.3
# protoc compiler version
# Install protoc.
RUN apt-get update -y && apt-get install -y protobuf-compiler jq sed
ENV PROTOCCOMPILER /usr/bin/protoc
ENV PROTOCINCLUDE /usr/include/google/protobuf
# Need grpc-gateway source code for -I in protoc command.
WORKDIR /go/src/github.com
RUN mkdir grpc-ecosystem && cd grpc-ecosystem && git clone --depth 1 --branch v1.9.0 https://github.com/grpc-ecosystem/grpc-gateway.git
# Install protoc-gen-rpc-gateway && protoc-gen-swagger.
RUN cd grpc-ecosystem/grpc-gateway && GO111MODULE=on go mod vendor
RUN GOBIN=/go/bin go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
RUN GOBIN=/go/bin go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger
# Need go-swagger source code for -I in protoc command.
RUN mkdir go-swagger && cd go-swagger && git clone --depth 1 --branch v0.21.0 https://github.com/go-swagger/go-swagger.git
# Install swagger.
RUN cd go-swagger/go-swagger && go mod vendor
RUN GOBIN=/go/bin go install github.com/go-swagger/go-swagger/cmd/swagger
# Need protobuf source code for -I in protoc command.
RUN mkdir golang && cd golang && git clone --depth 1 --branch v1.4.2 https://github.com/golang/protobuf.git
# Install protoc-gen-go.
RUN cd golang/protobuf && GO111MODULE=on go mod vendor
RUN GOBIN=/go/bin go install github.com/golang/protobuf/protoc-gen-go
# Need protobuffers/protobuf source code for -I in proto command.
RUN mkdir protocolbuffers && cd protocolbuffers && git clone --depth 1 --branch v3.11.3 https://github.com/protocolbuffers/protobuf.git
# RUN mkdir backend/api/go_client MUST create if not exist; clear if exists
WORKDIR /go/src/github.com/kubeflow/pipelines
COPY . .
RUN rm -r -f backend/api/go_http_client/*
RUN rm -f -f backend/api/go_client/*
ENV TMP_OUTPUT /tmp
# Generate *.pb.go (grpc api client) from *.proto .
RUN ${PROTOCCOMPILER} -I. -Ibackend/api \
    -I/go/src/github.com/protocolbuffers/protobuf/src \
    -I/go/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
    -I/go/src/github.com/grpc-ecosystem/grpc-gateway/ \
    --plugin=protoc-gen-go=/go/bin/protoc-gen-go \
    --go_out=plugins=grpc:${TMP_OUTPUT} \
    backend/api/*.proto
# Generate *.pb.gw.go (grpc api rest client) from *.proto.
RUN ${PROTOCCOMPILER} -I. -Ibackend/api \
    -I/go/src/github.com/protocolbuffers/protobuf/src \
    -I/go/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
    -I/go/src/github.com/grpc-ecosystem/grpc-gateway/ \
    --plugin=protoc-gen-grpc-gateway=/go/bin/protoc-gen-grpc-gateway \
    --grpc-gateway_out=logtostderr=true:${TMP_OUTPUT} \
    backend/api/*.proto
# Move *.pb.go and *.gw.go to go_client folder.
RUN cp ${TMP_OUTPUT}/github.com/kubeflow/pipelines/backend/api/go_client/* ./backend/api/go_client
# Generate *.swagger.json from *.proto into swagger folder.
RUN ${PROTOCCOMPILER} -I. -Ibackend/api \
    -I/go/src/github.com/protocolbuffers/protobuf/src \
    -I/go/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
    -I/go/src/github.com/grpc-ecosystem/grpc-gateway/ \
    --plugin=protoc-gen-swagger=/go/bin/protoc-gen-swagger \
    --swagger_out=logtostderr=true:${TMP_OUTPUT} \
    backend/api/*.proto
RUN cp ${TMP_OUTPUT}/backend/api/*.swagger.json ./backend/api/swagger
# Generate a single swagger json file from the swagger json files of all models.
# Note: use backend/backend/api/swagger/{run,job,experiment,pipeline,pipeline.upload}.swagger.json when apt-get can install jq-1.6
RUN jq -s 'reduce .[] as $item ({}; . * $item) | .info.title = "Kubeflow Pipelines API" | .info.description = "This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition." | .info.version = "'$KFP_VERSION'" | .info.contact = { "name": "google", "email": "kubeflow-pipelines@google.com", "url": "https://www.google.com" } | .info.license = { "name": "Apache 2.0", "url": "https://raw.githubusercontent.com/kubeflow/pipelines/master/LICENSE" }' backend/api/swagger/run.swagger.json backend/api/swagger/job.swagger.json backend/api/swagger/experiment.swagger.json backend/api/swagger/pipeline.swagger.json backend/api/swagger/pipeline.upload.swagger.json > "backend/api/swagger/kfp_api_single_file.swagger.json"
# Generate go_http_client from swagger json.
RUN /go/bin/swagger generate client \
    -f backend/api/swagger/job.swagger.json \
    -A job \
    --principal models.Principal \
    -c job_client \
    -m job_model \
    -t backend/api/go_http_client
RUN /go/bin/swagger generate client \
    -f backend/api/swagger/run.swagger.json \
    -A run \
    --principal models.Principal \
    -c run_client \
    -m run_model \
    -t backend/api/go_http_client
RUN /go/bin/swagger generate client \
    -f backend/api/swagger/experiment.swagger.json \
    -A experiment \
    --principal models.Principal \
    -c experiment_client \
    -m experiment_model \
    -t backend/api/go_http_client
RUN /go/bin/swagger generate client \
    -f backend/api/swagger/pipeline.swagger.json \
    -A pipeline \
    --principal models.Principal \
    -c pipeline_client \
    -m pipeline_model \
    -t backend/api/go_http_client
RUN /go/bin/swagger generate client \
    -f backend/api/swagger/pipeline.upload.swagger.json \
    -A pipeline_upload \
    --principal models.Principal \
    -c pipeline_upload_client \
    -m pipeline_upload_model \
    -t backend/api/go_http_client
RUN /go/bin/swagger generate client \
    -f backend/api/swagger/visualization.swagger.json \
    -A visualization \
    --principal models.Principal \
    -c visualization_client \
    -m visualization_model \
    -t backend/api/go_http_client
# Hack to fix an issue with go-swagger
# See https://github.com/go-swagger/go-swagger/issues/1381 for details.
RUN sed -i -- 's/MaxConcurrency int64 `json:"max_concurrency,omitempty"`/MaxConcurrency int64 `json:"max_concurrency,omitempty,string"`/g' backend/api/go_http_client/job_model/api_job.go
RUN sed -i -- 's/IntervalSecond int64 `json:"interval_second,omitempty"`/IntervalSecond int64 `json:"interval_second,omitempty,string"`/g' backend/api/go_http_client/job_model/api_periodic_schedule.go
RUN sed -i -- 's/MaxConcurrency string `json:"max_concurrency,omitempty"`/MaxConcurrency int64 `json:"max_concurrency,omitempty,string"`/g' backend/api/go_http_client/job_model/api_job.go
RUN sed -i -- 's/IntervalSecond string `json:"interval_second,omitempty"`/IntervalSecond int64 `json:"interval_second,omitempty,string"`/g' backend/api/go_http_client/job_model/api_periodic_schedule.go
# Execute the //go:generate directives in the generated code.
RUN cd backend/api && go generate ./...
# Add license info to generated files.
WORKDIR /
RUN git clone https://github.com/mbrukman/autogen.git
RUN find /go/src/github.com/kubeflow/pipelines/backend/api/ -name "*.go" -exec autogen/autogen.sh -i --no-tlc -c "Google LLC" -l apache {} \;

