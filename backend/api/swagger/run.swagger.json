{
  "swagger": "2.0",
  "info": {
    "title": "run.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v1alpha2/jobs/{job_id}/runs/{run_id}": {
      "get": {
        "summary": "TODO(yangpa): This will be deprecated in v1beta1",
        "operationId": "GetRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRunDetail"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v1alpha2/runs": {
      "get": {
        "operationId": "ListRuns",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListRunsResponse"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_by",
            "description": "Can be format of \"field_name\", \"field_name asc\" or \"field_name des\"\nAscending by default.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource_reference",
            "description": "What resource reference to filter on. Expect {type=XX,id=XX}\nE.g. Listing job for an experiment would be {type=EXPERIMENT,id=123}.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      },
      "post": {
        "operationId": "CreateRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRun"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiRun"
            }
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    },
    "/apis/v1alpha2/runs/{run_id}": {
      "get": {
        "operationId": "GetRunV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRunDetail"
            }
          },
          "default": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RunService"
        ]
      }
    }
  },
  "definitions": {
    "apiListRunsResponse": {
      "type": "object",
      "properties": {
        "runs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiRun"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      }
    },
    "apiParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "apiPipelineRuntime": {
      "type": "object",
      "properties": {
        "pipeline_manifest": {
          "type": "string",
          "description": "Output. The runtime manifest of the pipeline, including the status\nof pipeline steps and fields need for UI visualization etc."
        },
        "workflow_manifest": {
          "type": "string",
          "description": "Output. The runtime manifest of the argo workflow.\nThis is deprecated after pipeline_runtime_manifest is in use."
        }
      }
    },
    "apiPipelineSpec": {
      "type": "object",
      "properties": {
        "pipeline_id": {
          "type": "string",
          "description": "Optional input field. The ID of the pipeline user uploaded before."
        },
        "workflow_manifest": {
          "type": "string",
          "description": "Optional input field. The marshalled raw argo workflow.\nThis will be deprecated when pipeline_manifest is in use."
        },
        "pipeline_manifest": {
          "type": "string",
          "description": "Optional input field. The raw pipeline spec."
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiParameter"
          },
          "description": "The parameter user provide to inject to the pipeline YAML.\nIf a default value of a parameter exist in the YAML,\nthe value user provided here will replace."
        }
      }
    },
    "apiRelationship": {
      "type": "string",
      "enum": [
        "UNKNOWN_RELATIONSHIP",
        "OWNER",
        "CREATOR"
      ],
      "default": "UNKNOWN_RELATIONSHIP"
    },
    "apiResourceReference": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/apiResourceType"
        },
        "relationship": {
          "$ref": "#/definitions/apiRelationship",
          "description": "Required input field. The relationship from referred resource to the object."
        },
        "id": {
          "type": "string",
          "description": "Required input field. The ID of the resource that referred to."
        },
        "name": {
          "type": "string",
          "description": "Optional input field. The name of the resource that referred to."
        }
      }
    },
    "apiResourceType": {
      "type": "string",
      "enum": [
        "UNKNOWN_RESOURCE_TYPE",
        "EXPERIMENT",
        "JOB"
      ],
      "default": "UNKNOWN_RESOURCE_TYPE"
    },
    "apiRun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output. Unique run ID. Generated by API server."
        },
        "name": {
          "type": "string",
          "description": "Required input field. Name provided by user,\nor auto generated if run is created by scheduled job. Not unique."
        },
        "description": {
          "type": "string",
          "title": "Optional input field. Describing the purpose of the run"
        },
        "pipeline_spec": {
          "$ref": "#/definitions/apiPipelineSpec",
          "description": "Required input field.\nDescribing what the pipeline manifest and parameters to use for the run."
        },
        "resource_references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiResourceReference"
          },
          "description": "Optional input field. Specify which resource this run belongs to."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the run created."
        },
        "scheduled_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. When this run is scheduled to run. This could be different from\ncreated_at. For example, if a run is from a backfilling job that was\nsupposed to run 2 month ago, the scheduled_at is 2 month ago,\nv.s. created_at is the current time."
        },
        "status": {
          "type": "string",
          "title": "Output. The status of the run.\nOne of [Pending, Running, Succeeded, Skipped, Failed, Error]"
        },
        "error": {
          "type": "string",
          "description": "In case any error happens retrieving a run field, only run ID\nand the error message is returned. Client has the flexibility of choosing\nhow to handle error. This is especially useful during listing call."
        },
        "job_id": {
          "type": "string",
          "title": "TODO(yangpa): Following will be deprecated in v1beta1"
        },
        "namespace": {
          "type": "string"
        }
      }
    },
    "apiRunDetail": {
      "type": "object",
      "properties": {
        "run": {
          "$ref": "#/definitions/apiRun"
        },
        "pipeline_runtime": {
          "$ref": "#/definitions/apiPipelineRuntime"
        },
        "workflow": {
          "type": "string",
          "title": "TODO(yangpa): Following will be deprecated in v1beta1"
        }
      }
    },
    "apiStatus": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
