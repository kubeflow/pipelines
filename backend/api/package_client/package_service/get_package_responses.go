// Code generated by go-swagger; DO NOT EDIT.

package package_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	fmt "fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	package_model "github.com/googleprivate/ml/backend/api/package_model"
)

// GetPackageReader is a Reader for the GetPackage structure.
type GetPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPackageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetPackageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetPackageOK creates a GetPackageOK with default headers values
func NewGetPackageOK() *GetPackageOK {
	return &GetPackageOK{}
}

/*GetPackageOK handles this case with default header values.

GetPackageOK get package o k
*/
type GetPackageOK struct {
	Payload *package_model.APIPackage
}

func (o *GetPackageOK) Error() string {
	return fmt.Sprintf("[GET /apis/v1alpha2/packages/{id}][%d] getPackageOK  %+v", 200, o.Payload)
}

func (o *GetPackageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(package_model.APIPackage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPackageDefault creates a GetPackageDefault with default headers values
func NewGetPackageDefault(code int) *GetPackageDefault {
	return &GetPackageDefault{
		_statusCode: code,
	}
}

/*GetPackageDefault handles this case with default header values.

GetPackageDefault get package default
*/
type GetPackageDefault struct {
	_statusCode int

	Payload *package_model.APIStatus
}

// Code gets the status code for the get package default response
func (o *GetPackageDefault) Code() int {
	return o._statusCode
}

func (o *GetPackageDefault) Error() string {
	return fmt.Sprintf("[GET /apis/v1alpha2/packages/{id}][%d] GetPackage default  %+v", o._statusCode, o.Payload)
}

func (o *GetPackageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(package_model.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
