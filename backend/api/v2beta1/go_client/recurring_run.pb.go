// Copyright 2022 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: backend/api/v2beta1/recurring_run.proto

package go_client

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Required input.
// User setting to enable or disable the recurring run.
// Only used for creation of recurring runs. Later updates use enable/disable API.
type RecurringRun_Mode int32

const (
	RecurringRun_MODE_UNSPECIFIED RecurringRun_Mode = 0
	RecurringRun_ENABLE           RecurringRun_Mode = 1
	// The recurring run won't schedule any run if disabled.
	RecurringRun_DISABLE RecurringRun_Mode = 2
)

// Enum value maps for RecurringRun_Mode.
var (
	RecurringRun_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "ENABLE",
		2: "DISABLE",
	}
	RecurringRun_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"ENABLE":           1,
		"DISABLE":          2,
	}
)

func (x RecurringRun_Mode) Enum() *RecurringRun_Mode {
	p := new(RecurringRun_Mode)
	*p = x
	return p
}

func (x RecurringRun_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecurringRun_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_recurring_run_proto_enumTypes[0].Descriptor()
}

func (RecurringRun_Mode) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_recurring_run_proto_enumTypes[0]
}

func (x RecurringRun_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecurringRun_Mode.Descriptor instead.
func (RecurringRun_Mode) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{0, 0}
}

// Output. The status of the recurring run.
type RecurringRun_Status int32

const (
	RecurringRun_STATUS_UNSPECIFIED RecurringRun_Status = 0
	RecurringRun_ENABLED            RecurringRun_Status = 1
	RecurringRun_DISABLED           RecurringRun_Status = 3
)

// Enum value maps for RecurringRun_Status.
var (
	RecurringRun_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "ENABLED",
		3: "DISABLED",
	}
	RecurringRun_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"ENABLED":            1,
		"DISABLED":           3,
	}
)

func (x RecurringRun_Status) Enum() *RecurringRun_Status {
	p := new(RecurringRun_Status)
	*p = x
	return p
}

func (x RecurringRun_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecurringRun_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_recurring_run_proto_enumTypes[1].Descriptor()
}

func (RecurringRun_Status) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_recurring_run_proto_enumTypes[1]
}

func (x RecurringRun_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecurringRun_Status.Descriptor instead.
func (RecurringRun_Status) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{0, 1}
}

type RecurringRun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output. Unique run ID generated by API server.
	RecurringRunId string `protobuf:"bytes,1,opt,name=recurring_run_id,json=recurringRunId,proto3" json:"recurring_run_id,omitempty"`
	// Required input field. Recurring run name provided by user. Not unique.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional input field. Describes the purpose of the recurring run.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Required input field. Specifies the source of the pipeline spec for this
	// recurring run. Can be either a pipeline id, pipeline version id, or a pipeline spec.
	//
	// Types that are valid to be assigned to PipelineSource:
	//
	//	*RecurringRun_PipelineVersionId
	//	*RecurringRun_PipelineSpec
	//	*RecurringRun_PipelineVersionReference
	PipelineSource isRecurringRun_PipelineSource `protobuf_oneof:"pipeline_source"`
	// Runtime config of the pipeline.
	RuntimeConfig *RuntimeConfig `protobuf:"bytes,6,opt,name=runtime_config,json=runtimeConfig,proto3" json:"runtime_config,omitempty"`
	// Optional input field. Specifies which Kubernetes service account this recurring run uses.
	ServiceAccount string `protobuf:"bytes,7,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Required input field.
	// Specifies how many runs can be executed concurrently. Range [1-10].
	MaxConcurrency int64 `protobuf:"varint,8,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	// Required input field.
	// Specifies how a run is triggered. Support cron mode or periodic mode.
	Trigger *Trigger          `protobuf:"bytes,9,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Mode    RecurringRun_Mode `protobuf:"varint,10,opt,name=mode,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.RecurringRun_Mode" json:"mode,omitempty"`
	// Output. The time this recurring run was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output. The last time this recurring run was updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status    RecurringRun_Status    `protobuf:"varint,13,opt,name=status,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.RecurringRun_Status" json:"status,omitempty"`
	// In case any error happens retrieving a recurring run field, only recurring run ID
	// and the error message is returned. Client has the flexibility of choosing
	// how to handle the error. This is especially useful during listing call.
	Error *status.Status `protobuf:"bytes,14,opt,name=error,proto3" json:"error,omitempty"`
	// Optional input field. Whether the recurring run should catch up if behind schedule.
	// If true, the recurring run will only schedule the latest interval if behind schedule.
	// If false, the recurring run will catch up on each past interval.
	NoCatchup bool `protobuf:"varint,15,opt,name=no_catchup,json=noCatchup,proto3" json:"no_catchup,omitempty"`
	// TODO (gkclat): consider removing this field if it can be obtained from the parent experiment.
	// Output only. Namespace this recurring run belongs to. Derived from the parent experiment.
	Namespace string `protobuf:"bytes,16,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// ID of the parent experiment this recurring run belongs to.
	ExperimentId  string `protobuf:"bytes,17,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecurringRun) Reset() {
	*x = RecurringRun{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecurringRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringRun) ProtoMessage() {}

func (x *RecurringRun) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringRun.ProtoReflect.Descriptor instead.
func (*RecurringRun) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{0}
}

func (x *RecurringRun) GetRecurringRunId() string {
	if x != nil {
		return x.RecurringRunId
	}
	return ""
}

func (x *RecurringRun) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RecurringRun) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecurringRun) GetPipelineSource() isRecurringRun_PipelineSource {
	if x != nil {
		return x.PipelineSource
	}
	return nil
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/recurring_run.proto.
func (x *RecurringRun) GetPipelineVersionId() string {
	if x != nil {
		if x, ok := x.PipelineSource.(*RecurringRun_PipelineVersionId); ok {
			return x.PipelineVersionId
		}
	}
	return ""
}

func (x *RecurringRun) GetPipelineSpec() *structpb.Struct {
	if x != nil {
		if x, ok := x.PipelineSource.(*RecurringRun_PipelineSpec); ok {
			return x.PipelineSpec
		}
	}
	return nil
}

func (x *RecurringRun) GetPipelineVersionReference() *PipelineVersionReference {
	if x != nil {
		if x, ok := x.PipelineSource.(*RecurringRun_PipelineVersionReference); ok {
			return x.PipelineVersionReference
		}
	}
	return nil
}

func (x *RecurringRun) GetRuntimeConfig() *RuntimeConfig {
	if x != nil {
		return x.RuntimeConfig
	}
	return nil
}

func (x *RecurringRun) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *RecurringRun) GetMaxConcurrency() int64 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *RecurringRun) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *RecurringRun) GetMode() RecurringRun_Mode {
	if x != nil {
		return x.Mode
	}
	return RecurringRun_MODE_UNSPECIFIED
}

func (x *RecurringRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecurringRun) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RecurringRun) GetStatus() RecurringRun_Status {
	if x != nil {
		return x.Status
	}
	return RecurringRun_STATUS_UNSPECIFIED
}

func (x *RecurringRun) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RecurringRun) GetNoCatchup() bool {
	if x != nil {
		return x.NoCatchup
	}
	return false
}

func (x *RecurringRun) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RecurringRun) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

type isRecurringRun_PipelineSource interface {
	isRecurringRun_PipelineSource()
}

type RecurringRun_PipelineVersionId struct {
	// This field is Deprecated. The pipeline version id is under pipeline_version_reference for v2.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/recurring_run.proto.
	PipelineVersionId string `protobuf:"bytes,4,opt,name=pipeline_version_id,json=pipelineVersionId,proto3,oneof"`
}

type RecurringRun_PipelineSpec struct {
	// The pipeline spec.
	PipelineSpec *structpb.Struct `protobuf:"bytes,5,opt,name=pipeline_spec,json=pipelineSpec,proto3,oneof"`
}

type RecurringRun_PipelineVersionReference struct {
	// Reference to a pipeline version containing pipeline_id and pipeline_version_id.
	PipelineVersionReference *PipelineVersionReference `protobuf:"bytes,18,opt,name=pipeline_version_reference,json=pipelineVersionReference,proto3,oneof"`
}

func (*RecurringRun_PipelineVersionId) isRecurringRun_PipelineSource() {}

func (*RecurringRun_PipelineSpec) isRecurringRun_PipelineSource() {}

func (*RecurringRun_PipelineVersionReference) isRecurringRun_PipelineSource() {}

type CreateRecurringRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The recurring run to be created.
	RecurringRun  *RecurringRun `protobuf:"bytes,1,opt,name=recurring_run,json=recurringRun,proto3" json:"recurring_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecurringRunRequest) Reset() {
	*x = CreateRecurringRunRequest{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecurringRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecurringRunRequest) ProtoMessage() {}

func (x *CreateRecurringRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecurringRunRequest.ProtoReflect.Descriptor instead.
func (*CreateRecurringRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRecurringRunRequest) GetRecurringRun() *RecurringRun {
	if x != nil {
		return x.RecurringRun
	}
	return nil
}

type GetRecurringRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the recurring run to be retrieved.
	RecurringRunId string `protobuf:"bytes,1,opt,name=recurring_run_id,json=recurringRunId,proto3" json:"recurring_run_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetRecurringRunRequest) Reset() {
	*x = GetRecurringRunRequest{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecurringRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringRunRequest) ProtoMessage() {}

func (x *GetRecurringRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringRunRequest.ProtoReflect.Descriptor instead.
func (*GetRecurringRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{2}
}

func (x *GetRecurringRunRequest) GetRecurringRunId() string {
	if x != nil {
		return x.RecurringRunId
	}
	return ""
}

type ListRecurringRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A page token to request the next page of results. The token is acquired
	// from the nextPageToken field of the response from the previous
	// ListRecurringRuns call or can be omitted when fetching the first page.
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The number of recurring runs to be listed per page. If there are more recurring runs
	// than this number, the response message will contain a nextPageToken field you can use
	// to fetch the next page.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Can be formatted as "field_name", "field_name asc" or "field_name desc".
	// Ascending by default.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// Optional input. The namespace the recurring runs belong to.
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// A url-encoded, JSON-serialized Filter protocol buffer (see
	// [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// The ID of the experiment to be retrieved. If empty, list recurring runs across all experiments.
	ExperimentId  string `protobuf:"bytes,6,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecurringRunsRequest) Reset() {
	*x = ListRecurringRunsRequest{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecurringRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecurringRunsRequest) ProtoMessage() {}

func (x *ListRecurringRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecurringRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRecurringRunsRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{3}
}

func (x *ListRecurringRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRecurringRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRecurringRunsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListRecurringRunsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListRecurringRunsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListRecurringRunsRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

type ListRecurringRunsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of recurring runs returned.
	RecurringRuns []*RecurringRun `protobuf:"bytes,1,rep,name=recurringRuns,proto3" json:"recurringRuns,omitempty"`
	// The total number of recurring runs for the given query.
	TotalSize int32 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// The token to list the next page of recurring runs.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecurringRunsResponse) Reset() {
	*x = ListRecurringRunsResponse{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecurringRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecurringRunsResponse) ProtoMessage() {}

func (x *ListRecurringRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecurringRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRecurringRunsResponse) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{4}
}

func (x *ListRecurringRunsResponse) GetRecurringRuns() []*RecurringRun {
	if x != nil {
		return x.RecurringRuns
	}
	return nil
}

func (x *ListRecurringRunsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListRecurringRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type EnableRecurringRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the recurring runs to be enabled.
	RecurringRunId string `protobuf:"bytes,1,opt,name=recurring_run_id,json=recurringRunId,proto3" json:"recurring_run_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EnableRecurringRunRequest) Reset() {
	*x = EnableRecurringRunRequest{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableRecurringRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRecurringRunRequest) ProtoMessage() {}

func (x *EnableRecurringRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRecurringRunRequest.ProtoReflect.Descriptor instead.
func (*EnableRecurringRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{5}
}

func (x *EnableRecurringRunRequest) GetRecurringRunId() string {
	if x != nil {
		return x.RecurringRunId
	}
	return ""
}

type DisableRecurringRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the recurring runs to be disabled.
	RecurringRunId string `protobuf:"bytes,1,opt,name=recurring_run_id,json=recurringRunId,proto3" json:"recurring_run_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DisableRecurringRunRequest) Reset() {
	*x = DisableRecurringRunRequest{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableRecurringRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRecurringRunRequest) ProtoMessage() {}

func (x *DisableRecurringRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRecurringRunRequest.ProtoReflect.Descriptor instead.
func (*DisableRecurringRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{6}
}

func (x *DisableRecurringRunRequest) GetRecurringRunId() string {
	if x != nil {
		return x.RecurringRunId
	}
	return ""
}

type DeleteRecurringRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the recurring run to be deleted.
	RecurringRunId string `protobuf:"bytes,1,opt,name=recurring_run_id,json=recurringRunId,proto3" json:"recurring_run_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteRecurringRunRequest) Reset() {
	*x = DeleteRecurringRunRequest{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRecurringRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecurringRunRequest) ProtoMessage() {}

func (x *DeleteRecurringRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecurringRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecurringRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteRecurringRunRequest) GetRecurringRunId() string {
	if x != nil {
		return x.RecurringRunId
	}
	return ""
}

// CronSchedule allow scheduling the recurring run with unix-like cron.
type CronSchedule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The start time of the cron job.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the cron job.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The cron string. For details how to compose a cron, visit
	// ttps://en.wikipedia.org/wiki/Cron
	Cron          string `protobuf:"bytes,3,opt,name=cron,proto3" json:"cron,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronSchedule) Reset() {
	*x = CronSchedule{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronSchedule) ProtoMessage() {}

func (x *CronSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronSchedule.ProtoReflect.Descriptor instead.
func (*CronSchedule) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{8}
}

func (x *CronSchedule) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CronSchedule) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CronSchedule) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

// PeriodicSchedule allow scheduling the recurring run periodically with certain interval.
type PeriodicSchedule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The start time of the periodic recurring run.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the periodic recurring run.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The time interval between the starting time of consecutive recurring runs.
	IntervalSecond int64 `protobuf:"varint,3,opt,name=interval_second,json=intervalSecond,proto3" json:"interval_second,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PeriodicSchedule) Reset() {
	*x = PeriodicSchedule{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodicSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicSchedule) ProtoMessage() {}

func (x *PeriodicSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicSchedule.ProtoReflect.Descriptor instead.
func (*PeriodicSchedule) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{9}
}

func (x *PeriodicSchedule) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PeriodicSchedule) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PeriodicSchedule) GetIntervalSecond() int64 {
	if x != nil {
		return x.IntervalSecond
	}
	return 0
}

// Trigger defines what starts a pipeline run.
type Trigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Trigger:
	//
	//	*Trigger_CronSchedule
	//	*Trigger_PeriodicSchedule
	Trigger       isTrigger_Trigger `protobuf_oneof:"trigger"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_recurring_run_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP(), []int{10}
}

func (x *Trigger) GetTrigger() isTrigger_Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Trigger) GetCronSchedule() *CronSchedule {
	if x != nil {
		if x, ok := x.Trigger.(*Trigger_CronSchedule); ok {
			return x.CronSchedule
		}
	}
	return nil
}

func (x *Trigger) GetPeriodicSchedule() *PeriodicSchedule {
	if x != nil {
		if x, ok := x.Trigger.(*Trigger_PeriodicSchedule); ok {
			return x.PeriodicSchedule
		}
	}
	return nil
}

type isTrigger_Trigger interface {
	isTrigger_Trigger()
}

type Trigger_CronSchedule struct {
	CronSchedule *CronSchedule `protobuf:"bytes,1,opt,name=cron_schedule,json=cronSchedule,proto3,oneof"`
}

type Trigger_PeriodicSchedule struct {
	PeriodicSchedule *PeriodicSchedule `protobuf:"bytes,2,opt,name=periodic_schedule,json=periodicSchedule,proto3,oneof"`
}

func (*Trigger_CronSchedule) isTrigger_Trigger() {}

func (*Trigger_PeriodicSchedule) isTrigger_Trigger() {}

var File_backend_api_v2beta1_recurring_run_proto protoreflect.FileDescriptor

const file_backend_api_v2beta1_recurring_run_proto_rawDesc = "" +
	"\n" +
	"'backend/api/v2beta1/recurring_run.proto\x12&kubeflow.pipelines.backend.api.v2beta1\x1a(backend/api/v2beta1/runtime_config.proto\x1a\x1dbackend/api/v2beta1/run.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x17google/rpc/status.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\x9e\t\n" +
	"\fRecurringRun\x12(\n" +
	"\x10recurring_run_id\x18\x01 \x01(\tR\x0erecurringRunId\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x124\n" +
	"\x13pipeline_version_id\x18\x04 \x01(\tB\x02\x18\x01H\x00R\x11pipelineVersionId\x12>\n" +
	"\rpipeline_spec\x18\x05 \x01(\v2\x17.google.protobuf.StructH\x00R\fpipelineSpec\x12\x80\x01\n" +
	"\x1apipeline_version_reference\x18\x12 \x01(\v2@.kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReferenceH\x00R\x18pipelineVersionReference\x12\\\n" +
	"\x0eruntime_config\x18\x06 \x01(\v25.kubeflow.pipelines.backend.api.v2beta1.RuntimeConfigR\rruntimeConfig\x12'\n" +
	"\x0fservice_account\x18\a \x01(\tR\x0eserviceAccount\x12'\n" +
	"\x0fmax_concurrency\x18\b \x01(\x03R\x0emaxConcurrency\x12I\n" +
	"\atrigger\x18\t \x01(\v2/.kubeflow.pipelines.backend.api.v2beta1.TriggerR\atrigger\x12M\n" +
	"\x04mode\x18\n" +
	" \x01(\x0e29.kubeflow.pipelines.backend.api.v2beta1.RecurringRun.ModeR\x04mode\x129\n" +
	"\n" +
	"created_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12S\n" +
	"\x06status\x18\r \x01(\x0e2;.kubeflow.pipelines.backend.api.v2beta1.RecurringRun.StatusR\x06status\x12(\n" +
	"\x05error\x18\x0e \x01(\v2\x12.google.rpc.StatusR\x05error\x12\x1d\n" +
	"\n" +
	"no_catchup\x18\x0f \x01(\bR\tnoCatchup\x12\x1c\n" +
	"\tnamespace\x18\x10 \x01(\tR\tnamespace\x12#\n" +
	"\rexperiment_id\x18\x11 \x01(\tR\fexperimentId\"5\n" +
	"\x04Mode\x12\x14\n" +
	"\x10MODE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ENABLE\x10\x01\x12\v\n" +
	"\aDISABLE\x10\x02\";\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aENABLED\x10\x01\x12\f\n" +
	"\bDISABLED\x10\x03B\x11\n" +
	"\x0fpipeline_source\"v\n" +
	"\x19CreateRecurringRunRequest\x12Y\n" +
	"\rrecurring_run\x18\x01 \x01(\v24.kubeflow.pipelines.backend.api.v2beta1.RecurringRunR\frecurringRun\"B\n" +
	"\x16GetRecurringRunRequest\x12(\n" +
	"\x10recurring_run_id\x18\x01 \x01(\tR\x0erecurringRunId\"\xca\x01\n" +
	"\x18ListRecurringRunsRequest\x12\x1d\n" +
	"\n" +
	"page_token\x18\x01 \x01(\tR\tpageToken\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x17\n" +
	"\asort_by\x18\x03 \x01(\tR\x06sortBy\x12\x1c\n" +
	"\tnamespace\x18\x04 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06filter\x18\x05 \x01(\tR\x06filter\x12#\n" +
	"\rexperiment_id\x18\x06 \x01(\tR\fexperimentId\"\xbe\x01\n" +
	"\x19ListRecurringRunsResponse\x12Z\n" +
	"\rrecurringRuns\x18\x01 \x03(\v24.kubeflow.pipelines.backend.api.v2beta1.RecurringRunR\rrecurringRuns\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x05R\ttotalSize\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\"E\n" +
	"\x19EnableRecurringRunRequest\x12(\n" +
	"\x10recurring_run_id\x18\x01 \x01(\tR\x0erecurringRunId\"F\n" +
	"\x1aDisableRecurringRunRequest\x12(\n" +
	"\x10recurring_run_id\x18\x01 \x01(\tR\x0erecurringRunId\"E\n" +
	"\x19DeleteRecurringRunRequest\x12(\n" +
	"\x10recurring_run_id\x18\x01 \x01(\tR\x0erecurringRunId\"\x94\x01\n" +
	"\fCronSchedule\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x12\n" +
	"\x04cron\x18\x03 \x01(\tR\x04cron\"\xad\x01\n" +
	"\x10PeriodicSchedule\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12'\n" +
	"\x0finterval_second\x18\x03 \x01(\x03R\x0eintervalSecond\"\xda\x01\n" +
	"\aTrigger\x12[\n" +
	"\rcron_schedule\x18\x01 \x01(\v24.kubeflow.pipelines.backend.api.v2beta1.CronScheduleH\x00R\fcronSchedule\x12g\n" +
	"\x11periodic_schedule\x18\x02 \x01(\v28.kubeflow.pipelines.backend.api.v2beta1.PeriodicScheduleH\x00R\x10periodicScheduleB\t\n" +
	"\atrigger2\xea\b\n" +
	"\x13RecurringRunService\x12\xc1\x01\n" +
	"\x12CreateRecurringRun\x12A.kubeflow.pipelines.backend.api.v2beta1.CreateRecurringRunRequest\x1a4.kubeflow.pipelines.backend.api.v2beta1.RecurringRun\"2\x82\xd3\xe4\x93\x02,:\rrecurring_run\"\x1b/apis/v2beta1/recurringruns\x12\xbf\x01\n" +
	"\x0fGetRecurringRun\x12>.kubeflow.pipelines.backend.api.v2beta1.GetRecurringRunRequest\x1a4.kubeflow.pipelines.backend.api.v2beta1.RecurringRun\"6\x82\xd3\xe4\x93\x020\x12./apis/v2beta1/recurringruns/{recurring_run_id}\x12\xbd\x01\n" +
	"\x11ListRecurringRuns\x12@.kubeflow.pipelines.backend.api.v2beta1.ListRecurringRunsRequest\x1aA.kubeflow.pipelines.backend.api.v2beta1.ListRecurringRunsResponse\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/apis/v2beta1/recurringruns\x12\xae\x01\n" +
	"\x12EnableRecurringRun\x12A.kubeflow.pipelines.backend.api.v2beta1.EnableRecurringRunRequest\x1a\x16.google.protobuf.Empty\"=\x82\xd3\xe4\x93\x027\"5/apis/v2beta1/recurringruns/{recurring_run_id}:enable\x12\xb1\x01\n" +
	"\x13DisableRecurringRun\x12B.kubeflow.pipelines.backend.api.v2beta1.DisableRecurringRunRequest\x1a\x16.google.protobuf.Empty\">\x82\xd3\xe4\x93\x028\"6/apis/v2beta1/recurringruns/{recurring_run_id}:disable\x12\xa7\x01\n" +
	"\x12DeleteRecurringRun\x12A.kubeflow.pipelines.backend.api.v2beta1.DeleteRecurringRunRequest\x1a\x16.google.protobuf.Empty\"6\x82\xd3\xe4\x93\x020*./apis/v2beta1/recurringruns/{recurring_run_id}BD\x92A\x04*\x02\x01\x02Z;github.com/kubeflow/pipelines/backend/api/v2beta1/go_clientb\x06proto3"

var (
	file_backend_api_v2beta1_recurring_run_proto_rawDescOnce sync.Once
	file_backend_api_v2beta1_recurring_run_proto_rawDescData []byte
)

func file_backend_api_v2beta1_recurring_run_proto_rawDescGZIP() []byte {
	file_backend_api_v2beta1_recurring_run_proto_rawDescOnce.Do(func() {
		file_backend_api_v2beta1_recurring_run_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_backend_api_v2beta1_recurring_run_proto_rawDesc), len(file_backend_api_v2beta1_recurring_run_proto_rawDesc)))
	})
	return file_backend_api_v2beta1_recurring_run_proto_rawDescData
}

var file_backend_api_v2beta1_recurring_run_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_backend_api_v2beta1_recurring_run_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_backend_api_v2beta1_recurring_run_proto_goTypes = []any{
	(RecurringRun_Mode)(0),             // 0: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.Mode
	(RecurringRun_Status)(0),           // 1: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.Status
	(*RecurringRun)(nil),               // 2: kubeflow.pipelines.backend.api.v2beta1.RecurringRun
	(*CreateRecurringRunRequest)(nil),  // 3: kubeflow.pipelines.backend.api.v2beta1.CreateRecurringRunRequest
	(*GetRecurringRunRequest)(nil),     // 4: kubeflow.pipelines.backend.api.v2beta1.GetRecurringRunRequest
	(*ListRecurringRunsRequest)(nil),   // 5: kubeflow.pipelines.backend.api.v2beta1.ListRecurringRunsRequest
	(*ListRecurringRunsResponse)(nil),  // 6: kubeflow.pipelines.backend.api.v2beta1.ListRecurringRunsResponse
	(*EnableRecurringRunRequest)(nil),  // 7: kubeflow.pipelines.backend.api.v2beta1.EnableRecurringRunRequest
	(*DisableRecurringRunRequest)(nil), // 8: kubeflow.pipelines.backend.api.v2beta1.DisableRecurringRunRequest
	(*DeleteRecurringRunRequest)(nil),  // 9: kubeflow.pipelines.backend.api.v2beta1.DeleteRecurringRunRequest
	(*CronSchedule)(nil),               // 10: kubeflow.pipelines.backend.api.v2beta1.CronSchedule
	(*PeriodicSchedule)(nil),           // 11: kubeflow.pipelines.backend.api.v2beta1.PeriodicSchedule
	(*Trigger)(nil),                    // 12: kubeflow.pipelines.backend.api.v2beta1.Trigger
	(*structpb.Struct)(nil),            // 13: google.protobuf.Struct
	(*PipelineVersionReference)(nil),   // 14: kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReference
	(*RuntimeConfig)(nil),              // 15: kubeflow.pipelines.backend.api.v2beta1.RuntimeConfig
	(*timestamppb.Timestamp)(nil),      // 16: google.protobuf.Timestamp
	(*status.Status)(nil),              // 17: google.rpc.Status
	(*emptypb.Empty)(nil),              // 18: google.protobuf.Empty
}
var file_backend_api_v2beta1_recurring_run_proto_depIdxs = []int32{
	13, // 0: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.pipeline_spec:type_name -> google.protobuf.Struct
	14, // 1: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.pipeline_version_reference:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReference
	15, // 2: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.runtime_config:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeConfig
	12, // 3: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.trigger:type_name -> kubeflow.pipelines.backend.api.v2beta1.Trigger
	0,  // 4: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.mode:type_name -> kubeflow.pipelines.backend.api.v2beta1.RecurringRun.Mode
	16, // 5: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.created_at:type_name -> google.protobuf.Timestamp
	16, // 6: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 7: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.status:type_name -> kubeflow.pipelines.backend.api.v2beta1.RecurringRun.Status
	17, // 8: kubeflow.pipelines.backend.api.v2beta1.RecurringRun.error:type_name -> google.rpc.Status
	2,  // 9: kubeflow.pipelines.backend.api.v2beta1.CreateRecurringRunRequest.recurring_run:type_name -> kubeflow.pipelines.backend.api.v2beta1.RecurringRun
	2,  // 10: kubeflow.pipelines.backend.api.v2beta1.ListRecurringRunsResponse.recurringRuns:type_name -> kubeflow.pipelines.backend.api.v2beta1.RecurringRun
	16, // 11: kubeflow.pipelines.backend.api.v2beta1.CronSchedule.start_time:type_name -> google.protobuf.Timestamp
	16, // 12: kubeflow.pipelines.backend.api.v2beta1.CronSchedule.end_time:type_name -> google.protobuf.Timestamp
	16, // 13: kubeflow.pipelines.backend.api.v2beta1.PeriodicSchedule.start_time:type_name -> google.protobuf.Timestamp
	16, // 14: kubeflow.pipelines.backend.api.v2beta1.PeriodicSchedule.end_time:type_name -> google.protobuf.Timestamp
	10, // 15: kubeflow.pipelines.backend.api.v2beta1.Trigger.cron_schedule:type_name -> kubeflow.pipelines.backend.api.v2beta1.CronSchedule
	11, // 16: kubeflow.pipelines.backend.api.v2beta1.Trigger.periodic_schedule:type_name -> kubeflow.pipelines.backend.api.v2beta1.PeriodicSchedule
	3,  // 17: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.CreateRecurringRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.CreateRecurringRunRequest
	4,  // 18: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.GetRecurringRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.GetRecurringRunRequest
	5,  // 19: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.ListRecurringRuns:input_type -> kubeflow.pipelines.backend.api.v2beta1.ListRecurringRunsRequest
	7,  // 20: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.EnableRecurringRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.EnableRecurringRunRequest
	8,  // 21: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.DisableRecurringRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.DisableRecurringRunRequest
	9,  // 22: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.DeleteRecurringRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.DeleteRecurringRunRequest
	2,  // 23: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.CreateRecurringRun:output_type -> kubeflow.pipelines.backend.api.v2beta1.RecurringRun
	2,  // 24: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.GetRecurringRun:output_type -> kubeflow.pipelines.backend.api.v2beta1.RecurringRun
	6,  // 25: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.ListRecurringRuns:output_type -> kubeflow.pipelines.backend.api.v2beta1.ListRecurringRunsResponse
	18, // 26: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.EnableRecurringRun:output_type -> google.protobuf.Empty
	18, // 27: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.DisableRecurringRun:output_type -> google.protobuf.Empty
	18, // 28: kubeflow.pipelines.backend.api.v2beta1.RecurringRunService.DeleteRecurringRun:output_type -> google.protobuf.Empty
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_backend_api_v2beta1_recurring_run_proto_init() }
func file_backend_api_v2beta1_recurring_run_proto_init() {
	if File_backend_api_v2beta1_recurring_run_proto != nil {
		return
	}
	file_backend_api_v2beta1_runtime_config_proto_init()
	file_backend_api_v2beta1_run_proto_init()
	file_backend_api_v2beta1_recurring_run_proto_msgTypes[0].OneofWrappers = []any{
		(*RecurringRun_PipelineVersionId)(nil),
		(*RecurringRun_PipelineSpec)(nil),
		(*RecurringRun_PipelineVersionReference)(nil),
	}
	file_backend_api_v2beta1_recurring_run_proto_msgTypes[10].OneofWrappers = []any{
		(*Trigger_CronSchedule)(nil),
		(*Trigger_PeriodicSchedule)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_backend_api_v2beta1_recurring_run_proto_rawDesc), len(file_backend_api_v2beta1_recurring_run_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_api_v2beta1_recurring_run_proto_goTypes,
		DependencyIndexes: file_backend_api_v2beta1_recurring_run_proto_depIdxs,
		EnumInfos:         file_backend_api_v2beta1_recurring_run_proto_enumTypes,
		MessageInfos:      file_backend_api_v2beta1_recurring_run_proto_msgTypes,
	}.Build()
	File_backend_api_v2beta1_recurring_run_proto = out.File
	file_backend_api_v2beta1_recurring_run_proto_goTypes = nil
	file_backend_api_v2beta1_recurring_run_proto_depIdxs = nil
}
