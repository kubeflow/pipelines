// Copyright 2018 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: backend/api/v2beta1/run.proto

package go_client

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the runtime state of an entity.
type RuntimeState int32

const (
	// Default value. This value is not used.
	RuntimeState_RUNTIME_STATE_UNSPECIFIED RuntimeState = 0
	// Service is preparing to execute an entity.
	RuntimeState_PENDING RuntimeState = 1
	// Entity execution is in progress.
	RuntimeState_RUNNING RuntimeState = 2
	// Entity completed successfully.
	RuntimeState_SUCCEEDED RuntimeState = 3
	// Entity has been skipped. For example, due to caching.
	RuntimeState_SKIPPED RuntimeState = 4
	// Entity execution has failed.
	RuntimeState_FAILED RuntimeState = 5
	// Entity is being canceled. From this state, an entity may only
	// change its state to SUCCEEDED, FAILED or CANCELED.
	RuntimeState_CANCELING RuntimeState = 6
	// Entity has been canceled.
	RuntimeState_CANCELED RuntimeState = 7
	// Entity has been paused. It can be resumed.
	RuntimeState_PAUSED RuntimeState = 8
)

// Enum value maps for RuntimeState.
var (
	RuntimeState_name = map[int32]string{
		0: "RUNTIME_STATE_UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "SUCCEEDED",
		4: "SKIPPED",
		5: "FAILED",
		6: "CANCELING",
		7: "CANCELED",
		8: "PAUSED",
	}
	RuntimeState_value = map[string]int32{
		"RUNTIME_STATE_UNSPECIFIED": 0,
		"PENDING":                   1,
		"RUNNING":                   2,
		"SUCCEEDED":                 3,
		"SKIPPED":                   4,
		"FAILED":                    5,
		"CANCELING":                 6,
		"CANCELED":                  7,
		"PAUSED":                    8,
	}
)

func (x RuntimeState) Enum() *RuntimeState {
	p := new(RuntimeState)
	*p = x
	return p
}

func (x RuntimeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeState) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_run_proto_enumTypes[0].Descriptor()
}

func (RuntimeState) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_run_proto_enumTypes[0]
}

func (x RuntimeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeState.Descriptor instead.
func (RuntimeState) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{0}
}

// Describes whether an entity is available or archived.
type Run_StorageState int32

const (
	// Default state. This state in not used
	Run_STORAGE_STATE_UNSPECIFIED Run_StorageState = 0
	// Entity is available.
	Run_AVAILABLE Run_StorageState = 1
	// Entity is archived.
	Run_ARCHIVED Run_StorageState = 2
)

// Enum value maps for Run_StorageState.
var (
	Run_StorageState_name = map[int32]string{
		0: "STORAGE_STATE_UNSPECIFIED",
		1: "AVAILABLE",
		2: "ARCHIVED",
	}
	Run_StorageState_value = map[string]int32{
		"STORAGE_STATE_UNSPECIFIED": 0,
		"AVAILABLE":                 1,
		"ARCHIVED":                  2,
	}
)

func (x Run_StorageState) Enum() *Run_StorageState {
	p := new(Run_StorageState)
	*p = x
	return p
}

func (x Run_StorageState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Run_StorageState) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_api_v2beta1_run_proto_enumTypes[1].Descriptor()
}

func (Run_StorageState) Type() protoreflect.EnumType {
	return &file_backend_api_v2beta1_run_proto_enumTypes[1]
}

func (x Run_StorageState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Run_StorageState.Descriptor instead.
func (Run_StorageState) EnumDescriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{0, 0}
}

type Run struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input. ID of the parent experiment.
	// The default experiment ID will be used if this is not specified.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// Output. Unique run ID. Generated by API server.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Required input. Name provided by user,
	// or auto generated if run is created by a recurring run.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output. Specifies whether this run is in archived or available mode.
	StorageState Run_StorageState `protobuf:"varint,4,opt,name=storage_state,json=storageState,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.Run_StorageState" json:"storage_state,omitempty"`
	// Optional input. Short description of the run.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required input. Specifies the source of the pipeline spec for this
	// run. Can be either a pipeline version id, or a pipeline spec.
	//
	// Types that are valid to be assigned to PipelineSource:
	//
	//	*Run_PipelineVersionId
	//	*Run_PipelineSpec
	//	*Run_PipelineVersionReference
	PipelineSource isRun_PipelineSource `protobuf_oneof:"pipeline_source"`
	// Required input. Runtime config of the run.
	RuntimeConfig *RuntimeConfig `protobuf:"bytes,8,opt,name=runtime_config,json=runtimeConfig,proto3" json:"runtime_config,omitempty"`
	// Optional input. Specifies which kubernetes service account is used.
	ServiceAccount string `protobuf:"bytes,9,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Output. Creation time of the run.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output. When this run is scheduled to start. This could be different from
	// created_at. For example, if a run is from a backfilling job that was supposed
	// to run 2 month ago, the created_at will be 2 month behind scheduled_at.
	ScheduledAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	// Output. Completion of the run.
	FinishedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Output. Runtime state of a run.
	State RuntimeState `protobuf:"varint,13,opt,name=state,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.RuntimeState" json:"state,omitempty"`
	// In case any error happens retrieving a run field, only run ID
	// and the error message is returned. Client has the flexibility of choosing
	// how to handle the error. This is especially useful during listing call.
	Error *status.Status `protobuf:"bytes,14,opt,name=error,proto3" json:"error,omitempty"`
	// Output. Runtime details of a run.
	RunDetails *RunDetails `protobuf:"bytes,15,opt,name=run_details,json=runDetails,proto3" json:"run_details,omitempty"`
	// ID of the recurring run that triggered this run.
	RecurringRunId string `protobuf:"bytes,16,opt,name=recurring_run_id,json=recurringRunId,proto3" json:"recurring_run_id,omitempty"`
	// Output. A sequence of run statuses. This field keeps a record
	// of state transitions.
	StateHistory  []*RuntimeStatus `protobuf:"bytes,17,rep,name=state_history,json=stateHistory,proto3" json:"state_history,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Run) Reset() {
	*x = Run{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{0}
}

func (x *Run) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *Run) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *Run) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Run) GetStorageState() Run_StorageState {
	if x != nil {
		return x.StorageState
	}
	return Run_STORAGE_STATE_UNSPECIFIED
}

func (x *Run) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Run) GetPipelineSource() isRun_PipelineSource {
	if x != nil {
		return x.PipelineSource
	}
	return nil
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *Run) GetPipelineVersionId() string {
	if x != nil {
		if x, ok := x.PipelineSource.(*Run_PipelineVersionId); ok {
			return x.PipelineVersionId
		}
	}
	return ""
}

func (x *Run) GetPipelineSpec() *structpb.Struct {
	if x != nil {
		if x, ok := x.PipelineSource.(*Run_PipelineSpec); ok {
			return x.PipelineSpec
		}
	}
	return nil
}

func (x *Run) GetPipelineVersionReference() *PipelineVersionReference {
	if x != nil {
		if x, ok := x.PipelineSource.(*Run_PipelineVersionReference); ok {
			return x.PipelineVersionReference
		}
	}
	return nil
}

func (x *Run) GetRuntimeConfig() *RuntimeConfig {
	if x != nil {
		return x.RuntimeConfig
	}
	return nil
}

func (x *Run) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *Run) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Run) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *Run) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *Run) GetState() RuntimeState {
	if x != nil {
		return x.State
	}
	return RuntimeState_RUNTIME_STATE_UNSPECIFIED
}

func (x *Run) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Run) GetRunDetails() *RunDetails {
	if x != nil {
		return x.RunDetails
	}
	return nil
}

func (x *Run) GetRecurringRunId() string {
	if x != nil {
		return x.RecurringRunId
	}
	return ""
}

func (x *Run) GetStateHistory() []*RuntimeStatus {
	if x != nil {
		return x.StateHistory
	}
	return nil
}

type isRun_PipelineSource interface {
	isRun_PipelineSource()
}

type Run_PipelineVersionId struct {
	// This field is Deprecated. The pipeline version id is under pipeline_version_reference for v2.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	PipelineVersionId string `protobuf:"bytes,6,opt,name=pipeline_version_id,json=pipelineVersionId,proto3,oneof"`
}

type Run_PipelineSpec struct {
	// Pipeline spec.
	PipelineSpec *structpb.Struct `protobuf:"bytes,7,opt,name=pipeline_spec,json=pipelineSpec,proto3,oneof"`
}

type Run_PipelineVersionReference struct {
	// Reference to a pipeline containing pipeline_id and optionally the pipeline_version_id.
	PipelineVersionReference *PipelineVersionReference `protobuf:"bytes,18,opt,name=pipeline_version_reference,json=pipelineVersionReference,proto3,oneof"`
}

func (*Run_PipelineVersionId) isRun_PipelineSource() {}

func (*Run_PipelineSpec) isRun_PipelineSource() {}

func (*Run_PipelineVersionReference) isRun_PipelineSource() {}

// Reference to an existing pipeline version.
type PipelineVersionReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input. Required. Unique ID of the parent pipeline.
	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// Input. Optional. Unique ID of an existing pipeline version. If unset, the latest pipeline version is used.
	PipelineVersionId string `protobuf:"bytes,2,opt,name=pipeline_version_id,json=pipelineVersionId,proto3" json:"pipeline_version_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PipelineVersionReference) Reset() {
	*x = PipelineVersionReference{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineVersionReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineVersionReference) ProtoMessage() {}

func (x *PipelineVersionReference) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineVersionReference.ProtoReflect.Descriptor instead.
func (*PipelineVersionReference) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineVersionReference) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineVersionReference) GetPipelineVersionId() string {
	if x != nil {
		return x.PipelineVersionId
	}
	return ""
}

// Timestamped representation of a runtime state with an optional error.
type RuntimeStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Update time of this state.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The state of a runtime instance.
	State RuntimeState `protobuf:"varint,2,opt,name=state,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.RuntimeState" json:"state,omitempty"`
	// The error that occurred during the state. May be set when the state is
	// any of the non-final states (PENDING/RUNNING/CANCELING) or FAILED state.
	// If the state is FAILED, the error here is final and not going to be
	// retried. If the state is a non-final state, the error indicates that a
	// system-error being retried.
	Error         *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuntimeStatus) Reset() {
	*x = RuntimeStatus{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeStatus) ProtoMessage() {}

func (x *RuntimeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeStatus.ProtoReflect.Descriptor instead.
func (*RuntimeStatus) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{2}
}

func (x *RuntimeStatus) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *RuntimeStatus) GetState() RuntimeState {
	if x != nil {
		return x.State
	}
	return RuntimeState_RUNTIME_STATE_UNSPECIFIED
}

func (x *RuntimeStatus) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

// Runtime details of a run.
type RunDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pipeline context ID of a run.
	PipelineContextId int64 `protobuf:"varint,1,opt,name=pipeline_context_id,json=pipelineContextId,proto3" json:"pipeline_context_id,omitempty"`
	// Pipeline run context ID of a run.
	PipelineRunContextId int64 `protobuf:"varint,2,opt,name=pipeline_run_context_id,json=pipelineRunContextId,proto3" json:"pipeline_run_context_id,omitempty"`
	// Runtime details of the tasks that belong to the run.
	TaskDetails   []*PipelineTaskDetail `protobuf:"bytes,3,rep,name=task_details,json=taskDetails,proto3" json:"task_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunDetails) Reset() {
	*x = RunDetails{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDetails) ProtoMessage() {}

func (x *RunDetails) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDetails.ProtoReflect.Descriptor instead.
func (*RunDetails) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{3}
}

func (x *RunDetails) GetPipelineContextId() int64 {
	if x != nil {
		return x.PipelineContextId
	}
	return 0
}

func (x *RunDetails) GetPipelineRunContextId() int64 {
	if x != nil {
		return x.PipelineRunContextId
	}
	return 0
}

func (x *RunDetails) GetTaskDetails() []*PipelineTaskDetail {
	if x != nil {
		return x.TaskDetails
	}
	return nil
}

// Runtime information of a task execution.
type PipelineTaskDetail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the parent run.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// System-generated ID of a task.
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// User specified name of a task that is defined in
	// [Pipeline.spec][].
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Creation time of a task.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Starting time of a task.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Completion time of a task.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Execution information of a task.
	ExecutorDetail *PipelineTaskExecutorDetail `protobuf:"bytes,7,opt,name=executor_detail,json=executorDetail,proto3" json:"executor_detail,omitempty"`
	// Runtime state of a task.
	State RuntimeState `protobuf:"varint,8,opt,name=state,proto3,enum=kubeflow.pipelines.backend.api.v2beta1.RuntimeState" json:"state,omitempty"`
	// Execution id of the corresponding entry in ML metadata store.
	ExecutionId int64 `protobuf:"varint,9,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// The error that occurred during task execution.
	// Only populated when the task is in FAILED or CANCELED state.
	Error *status.Status `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
	// Input artifacts of the task.
	Inputs map[string]*ArtifactList `protobuf:"bytes,11,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Output artifacts of the task.
	Outputs map[string]*ArtifactList `protobuf:"bytes,12,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ID of the parent task if the task is within a component scope.
	// Empty if the task is at the root level.
	ParentTaskId string `protobuf:"bytes,13,opt,name=parent_task_id,json=parentTaskId,proto3" json:"parent_task_id,omitempty"`
	// A sequence of task statuses. This field keeps a record
	// of state transitions.
	StateHistory []*RuntimeStatus `protobuf:"bytes,14,rep,name=state_history,json=stateHistory,proto3" json:"state_history,omitempty"`
	// Name of the corresponding pod assigned by the orchestration engine.
	// Also known as node_id.
	PodName string `protobuf:"bytes,15,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Sequence of dependen tasks.
	ChildTasks    []*PipelineTaskDetail_ChildTask `protobuf:"bytes,16,rep,name=child_tasks,json=childTasks,proto3" json:"child_tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTaskDetail) Reset() {
	*x = PipelineTaskDetail{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail) ProtoMessage() {}

func (x *PipelineTaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineTaskDetail) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *PipelineTaskDetail) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *PipelineTaskDetail) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PipelineTaskDetail) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PipelineTaskDetail) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PipelineTaskDetail) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PipelineTaskDetail) GetExecutorDetail() *PipelineTaskExecutorDetail {
	if x != nil {
		return x.ExecutorDetail
	}
	return nil
}

func (x *PipelineTaskDetail) GetState() RuntimeState {
	if x != nil {
		return x.State
	}
	return RuntimeState_RUNTIME_STATE_UNSPECIFIED
}

func (x *PipelineTaskDetail) GetExecutionId() int64 {
	if x != nil {
		return x.ExecutionId
	}
	return 0
}

func (x *PipelineTaskDetail) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PipelineTaskDetail) GetInputs() map[string]*ArtifactList {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PipelineTaskDetail) GetOutputs() map[string]*ArtifactList {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *PipelineTaskDetail) GetParentTaskId() string {
	if x != nil {
		return x.ParentTaskId
	}
	return ""
}

func (x *PipelineTaskDetail) GetStateHistory() []*RuntimeStatus {
	if x != nil {
		return x.StateHistory
	}
	return nil
}

func (x *PipelineTaskDetail) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *PipelineTaskDetail) GetChildTasks() []*PipelineTaskDetail_ChildTask {
	if x != nil {
		return x.ChildTasks
	}
	return nil
}

// Runtime information of a pipeline task executor.
type PipelineTaskExecutorDetail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the job for the main container execution.
	MainJob string `protobuf:"bytes,1,opt,name=main_job,json=mainJob,proto3" json:"main_job,omitempty"`
	// The name of the job for the pre-caching-check container
	// execution. This job will be available if the
	// Run.pipeline_spec specifies the `pre_caching_check` hook in
	// the lifecycle events.
	PreCachingCheckJob string `protobuf:"bytes,2,opt,name=pre_caching_check_job,json=preCachingCheckJob,proto3" json:"pre_caching_check_job,omitempty"`
	// The names of the previously failed job for the main container
	// executions. The list includes the all attempts in chronological order.
	FailedMainJobs []string `protobuf:"bytes,3,rep,name=failed_main_jobs,json=failedMainJobs,proto3" json:"failed_main_jobs,omitempty"`
	// The names of the previously failed job for the
	// pre-caching-check container executions. This job will be available if the
	// Run.pipeline_spec specifies the `pre_caching_check` hook in
	// the lifecycle events.
	// The list includes the all attempts in chronological order.
	FailedPreCachingCheckJobs []string `protobuf:"bytes,4,rep,name=failed_pre_caching_check_jobs,json=failedPreCachingCheckJobs,proto3" json:"failed_pre_caching_check_jobs,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *PipelineTaskExecutorDetail) Reset() {
	*x = PipelineTaskExecutorDetail{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskExecutorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskExecutorDetail) ProtoMessage() {}

func (x *PipelineTaskExecutorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskExecutorDetail.ProtoReflect.Descriptor instead.
func (*PipelineTaskExecutorDetail) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{5}
}

func (x *PipelineTaskExecutorDetail) GetMainJob() string {
	if x != nil {
		return x.MainJob
	}
	return ""
}

func (x *PipelineTaskExecutorDetail) GetPreCachingCheckJob() string {
	if x != nil {
		return x.PreCachingCheckJob
	}
	return ""
}

func (x *PipelineTaskExecutorDetail) GetFailedMainJobs() []string {
	if x != nil {
		return x.FailedMainJobs
	}
	return nil
}

func (x *PipelineTaskExecutorDetail) GetFailedPreCachingCheckJobs() []string {
	if x != nil {
		return x.FailedPreCachingCheckJobs
	}
	return nil
}

// A list of artifact metadata.
type ArtifactList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of artifact metadata ids.
	ArtifactIds   []int64 `protobuf:"varint,1,rep,packed,name=artifact_ids,json=artifactIds,proto3" json:"artifact_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactList) Reset() {
	*x = ArtifactList{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactList) ProtoMessage() {}

func (x *ArtifactList) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactList.ProtoReflect.Descriptor instead.
func (*ArtifactList) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{6}
}

func (x *ArtifactList) GetArtifactIds() []int64 {
	if x != nil {
		return x.ArtifactIds
	}
	return nil
}

type CreateRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// Run to be created.
	Run           *Run `protobuf:"bytes,2,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRunRequest) Reset() {
	*x = CreateRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunRequest) ProtoMessage() {}

func (x *CreateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunRequest.ProtoReflect.Descriptor instead.
func (*CreateRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{7}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *CreateRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *CreateRunRequest) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

type GetRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be retrieved.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRunRequest) Reset() {
	*x = GetRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRequest) ProtoMessage() {}

func (x *GetRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRequest.ProtoReflect.Descriptor instead.
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *GetRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *GetRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ListRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional input field. Filters based on the namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The ID of the parent experiment. If empty, response includes runs across all experiments.
	ExperimentId string `protobuf:"bytes,2,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// A page token to request the next page of results. The token is acquired
	// from the nextPageToken field of the response from the previous
	// ListRuns call or can be omitted when fetching the first page.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The number of runs to be listed per page. If there are more runs than this
	// number, the response message will contain a nextPageToken field you can use
	// to fetch the next page.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Can be format of "field_name", "field_name asc" or "field_name desc"
	// (Example, "name asc" or "id desc"). Ascending by default.
	SortBy string `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// A url-encoded, JSON-serialized Filter protocol buffer (see
	// [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).
	Filter        string `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRunsRequest) Reset() {
	*x = ListRunsRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsRequest) ProtoMessage() {}

func (x *ListRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRunsRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{9}
}

func (x *ListRunsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListRunsRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *ListRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRunsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListRunsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type TerminateRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be terminated.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminateRunRequest) Reset() {
	*x = TerminateRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRunRequest) ProtoMessage() {}

func (x *TerminateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRunRequest.ProtoReflect.Descriptor instead.
func (*TerminateRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *TerminateRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *TerminateRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ListRunsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of retrieved runs.
	Runs []*Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	// The total number of runs for the given query.
	TotalSize int32 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// The token to list the next page of runs.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRunsResponse) Reset() {
	*x = ListRunsResponse{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsResponse) ProtoMessage() {}

func (x *ListRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRunsResponse) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{11}
}

func (x *ListRunsResponse) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *ListRunsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ArchiveRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be archived.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRunRequest) Reset() {
	*x = ArchiveRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRunRequest) ProtoMessage() {}

func (x *ArchiveRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRunRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *ArchiveRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *ArchiveRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type UnarchiveRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be restored.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnarchiveRunRequest) Reset() {
	*x = UnarchiveRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnarchiveRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnarchiveRunRequest) ProtoMessage() {}

func (x *UnarchiveRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnarchiveRunRequest.ProtoReflect.Descriptor instead.
func (*UnarchiveRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{13}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *UnarchiveRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *UnarchiveRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type DeleteRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be deleted.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRunRequest) Reset() {
	*x = DeleteRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRunRequest) ProtoMessage() {}

func (x *DeleteRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{14}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *DeleteRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *DeleteRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type ReadArtifactRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// ID of the run.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// ID of the running node.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Name of the artifact.
	ArtifactName  string `protobuf:"bytes,4,opt,name=artifact_name,json=artifactName,proto3" json:"artifact_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadArtifactRequest) Reset() {
	*x = ReadArtifactRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadArtifactRequest) ProtoMessage() {}

func (x *ReadArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadArtifactRequest.ProtoReflect.Descriptor instead.
func (*ReadArtifactRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{15}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *ReadArtifactRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *ReadArtifactRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ReadArtifactRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ReadArtifactRequest) GetArtifactName() string {
	if x != nil {
		return x.ArtifactName
	}
	return ""
}

type ReadArtifactResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Byte array of the artifact content.
	Data          []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadArtifactResponse) Reset() {
	*x = ReadArtifactResponse{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadArtifactResponse) ProtoMessage() {}

func (x *ReadArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadArtifactResponse.ProtoReflect.Descriptor instead.
func (*ReadArtifactResponse) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{16}
}

func (x *ReadArtifactResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RetryRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the parent experiment.
	//
	// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The ID of the run to be retried.
	RunId         string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryRunRequest) Reset() {
	*x = RetryRunRequest{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryRunRequest) ProtoMessage() {}

func (x *RetryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryRunRequest.ProtoReflect.Descriptor instead.
func (*RetryRunRequest) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{17}
}

// Deprecated: Marked as deprecated in backend/api/v2beta1/run.proto.
func (x *RetryRunRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *RetryRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

// A dependent task that requires this one to succeed.
// Represented by either task_id or pod_name.
type PipelineTaskDetail_ChildTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ChildTask:
	//
	//	*PipelineTaskDetail_ChildTask_TaskId
	//	*PipelineTaskDetail_ChildTask_PodName
	ChildTask     isPipelineTaskDetail_ChildTask_ChildTask `protobuf_oneof:"child_task"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTaskDetail_ChildTask) Reset() {
	*x = PipelineTaskDetail_ChildTask{}
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTaskDetail_ChildTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTaskDetail_ChildTask) ProtoMessage() {}

func (x *PipelineTaskDetail_ChildTask) ProtoReflect() protoreflect.Message {
	mi := &file_backend_api_v2beta1_run_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTaskDetail_ChildTask.ProtoReflect.Descriptor instead.
func (*PipelineTaskDetail_ChildTask) Descriptor() ([]byte, []int) {
	return file_backend_api_v2beta1_run_proto_rawDescGZIP(), []int{4, 2}
}

func (x *PipelineTaskDetail_ChildTask) GetChildTask() isPipelineTaskDetail_ChildTask_ChildTask {
	if x != nil {
		return x.ChildTask
	}
	return nil
}

func (x *PipelineTaskDetail_ChildTask) GetTaskId() string {
	if x != nil {
		if x, ok := x.ChildTask.(*PipelineTaskDetail_ChildTask_TaskId); ok {
			return x.TaskId
		}
	}
	return ""
}

func (x *PipelineTaskDetail_ChildTask) GetPodName() string {
	if x != nil {
		if x, ok := x.ChildTask.(*PipelineTaskDetail_ChildTask_PodName); ok {
			return x.PodName
		}
	}
	return ""
}

type isPipelineTaskDetail_ChildTask_ChildTask interface {
	isPipelineTaskDetail_ChildTask_ChildTask()
}

type PipelineTaskDetail_ChildTask_TaskId struct {
	// System-generated ID of a task.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3,oneof"`
}

type PipelineTaskDetail_ChildTask_PodName struct {
	// Name of the corresponding pod assigned by the orchestration engine.
	// Also known as node_id.
	PodName string `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3,oneof"`
}

func (*PipelineTaskDetail_ChildTask_TaskId) isPipelineTaskDetail_ChildTask_ChildTask() {}

func (*PipelineTaskDetail_ChildTask_PodName) isPipelineTaskDetail_ChildTask_ChildTask() {}

var File_backend_api_v2beta1_run_proto protoreflect.FileDescriptor

const file_backend_api_v2beta1_run_proto_rawDesc = "" +
	"\n" +
	"\x1dbackend/api/v2beta1/run.proto\x12&kubeflow.pipelines.backend.api.v2beta1\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x17google/rpc/status.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a(backend/api/v2beta1/runtime_config.proto\"\xcc\t\n" +
	"\x03Run\x12#\n" +
	"\rexperiment_id\x18\x01 \x01(\tR\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12]\n" +
	"\rstorage_state\x18\x04 \x01(\x0e28.kubeflow.pipelines.backend.api.v2beta1.Run.StorageStateR\fstorageState\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x124\n" +
	"\x13pipeline_version_id\x18\x06 \x01(\tB\x02\x18\x01H\x00R\x11pipelineVersionId\x12>\n" +
	"\rpipeline_spec\x18\a \x01(\v2\x17.google.protobuf.StructH\x00R\fpipelineSpec\x12\x80\x01\n" +
	"\x1apipeline_version_reference\x18\x12 \x01(\v2@.kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReferenceH\x00R\x18pipelineVersionReference\x12\\\n" +
	"\x0eruntime_config\x18\b \x01(\v25.kubeflow.pipelines.backend.api.v2beta1.RuntimeConfigR\rruntimeConfig\x12'\n" +
	"\x0fservice_account\x18\t \x01(\tR\x0eserviceAccount\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12=\n" +
	"\fscheduled_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\vscheduledAt\x12;\n" +
	"\vfinished_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"finishedAt\x12J\n" +
	"\x05state\x18\r \x01(\x0e24.kubeflow.pipelines.backend.api.v2beta1.RuntimeStateR\x05state\x12(\n" +
	"\x05error\x18\x0e \x01(\v2\x12.google.rpc.StatusR\x05error\x12S\n" +
	"\vrun_details\x18\x0f \x01(\v22.kubeflow.pipelines.backend.api.v2beta1.RunDetailsR\n" +
	"runDetails\x12(\n" +
	"\x10recurring_run_id\x18\x10 \x01(\tR\x0erecurringRunId\x12Z\n" +
	"\rstate_history\x18\x11 \x03(\v25.kubeflow.pipelines.backend.api.v2beta1.RuntimeStatusR\fstateHistory\"J\n" +
	"\fStorageState\x12\x1d\n" +
	"\x19STORAGE_STATE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tAVAILABLE\x10\x01\x12\f\n" +
	"\bARCHIVED\x10\x02B\x11\n" +
	"\x0fpipeline_source\"k\n" +
	"\x18PipelineVersionReference\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12.\n" +
	"\x13pipeline_version_id\x18\x02 \x01(\tR\x11pipelineVersionId\"\xc2\x01\n" +
	"\rRuntimeStatus\x12;\n" +
	"\vupdate_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12J\n" +
	"\x05state\x18\x02 \x01(\x0e24.kubeflow.pipelines.backend.api.v2beta1.RuntimeStateR\x05state\x12(\n" +
	"\x05error\x18\x03 \x01(\v2\x12.google.rpc.StatusR\x05error\"\xd2\x01\n" +
	"\n" +
	"RunDetails\x12.\n" +
	"\x13pipeline_context_id\x18\x01 \x01(\x03R\x11pipelineContextId\x125\n" +
	"\x17pipeline_run_context_id\x18\x02 \x01(\x03R\x14pipelineRunContextId\x12]\n" +
	"\ftask_details\x18\x03 \x03(\v2:.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetailR\vtaskDetails\"\x99\n" +
	"\n" +
	"\x12PipelineTaskDetail\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12;\n" +
	"\vcreate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x129\n" +
	"\n" +
	"start_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12k\n" +
	"\x0fexecutor_detail\x18\a \x01(\v2B.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskExecutorDetailR\x0eexecutorDetail\x12J\n" +
	"\x05state\x18\b \x01(\x0e24.kubeflow.pipelines.backend.api.v2beta1.RuntimeStateR\x05state\x12!\n" +
	"\fexecution_id\x18\t \x01(\x03R\vexecutionId\x12(\n" +
	"\x05error\x18\n" +
	" \x01(\v2\x12.google.rpc.StatusR\x05error\x12^\n" +
	"\x06inputs\x18\v \x03(\v2F.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputsEntryR\x06inputs\x12a\n" +
	"\aoutputs\x18\f \x03(\v2G.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.OutputsEntryR\aoutputs\x12$\n" +
	"\x0eparent_task_id\x18\r \x01(\tR\fparentTaskId\x12Z\n" +
	"\rstate_history\x18\x0e \x03(\v25.kubeflow.pipelines.backend.api.v2beta1.RuntimeStatusR\fstateHistory\x12\x19\n" +
	"\bpod_name\x18\x0f \x01(\tR\apodName\x12e\n" +
	"\vchild_tasks\x18\x10 \x03(\v2D.kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.ChildTaskR\n" +
	"childTasks\x1ao\n" +
	"\vInputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12J\n" +
	"\x05value\x18\x02 \x01(\v24.kubeflow.pipelines.backend.api.v2beta1.ArtifactListR\x05value:\x028\x01\x1ap\n" +
	"\fOutputsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12J\n" +
	"\x05value\x18\x02 \x01(\v24.kubeflow.pipelines.backend.api.v2beta1.ArtifactListR\x05value:\x028\x01\x1aQ\n" +
	"\tChildTask\x12\x19\n" +
	"\atask_id\x18\x01 \x01(\tH\x00R\x06taskId\x12\x1b\n" +
	"\bpod_name\x18\x02 \x01(\tH\x00R\apodNameB\f\n" +
	"\n" +
	"child_task\"\xd6\x01\n" +
	"\x1aPipelineTaskExecutorDetail\x12\x19\n" +
	"\bmain_job\x18\x01 \x01(\tR\amainJob\x121\n" +
	"\x15pre_caching_check_job\x18\x02 \x01(\tR\x12preCachingCheckJob\x12(\n" +
	"\x10failed_main_jobs\x18\x03 \x03(\tR\x0efailedMainJobs\x12@\n" +
	"\x1dfailed_pre_caching_check_jobs\x18\x04 \x03(\tR\x19failedPreCachingCheckJobs\"1\n" +
	"\fArtifactList\x12!\n" +
	"\fartifact_ids\x18\x01 \x03(\x03R\vartifactIds\"z\n" +
	"\x10CreateRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12=\n" +
	"\x03run\x18\x02 \x01(\v2+.kubeflow.pipelines.backend.api.v2beta1.RunR\x03run\"O\n" +
	"\rGetRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"\xc1\x01\n" +
	"\x0fListRunsRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12#\n" +
	"\rexperiment_id\x18\x02 \x01(\tR\fexperimentId\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x17\n" +
	"\asort_by\x18\x05 \x01(\tR\x06sortBy\x12\x16\n" +
	"\x06filter\x18\x06 \x01(\tR\x06filter\"U\n" +
	"\x13TerminateRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"\x9a\x01\n" +
	"\x10ListRunsResponse\x12?\n" +
	"\x04runs\x18\x01 \x03(\v2+.kubeflow.pipelines.backend.api.v2beta1.RunR\x04runs\x12\x1d\n" +
	"\n" +
	"total_size\x18\x02 \x01(\x05R\ttotalSize\x12&\n" +
	"\x0fnext_page_token\x18\x03 \x01(\tR\rnextPageToken\"S\n" +
	"\x11ArchiveRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"U\n" +
	"\x13UnarchiveRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"R\n" +
	"\x10DeleteRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"\x93\x01\n" +
	"\x13ReadArtifactRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\x12#\n" +
	"\rartifact_name\x18\x04 \x01(\tR\fartifactName\"*\n" +
	"\x14ReadArtifactResponse\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"Q\n" +
	"\x0fRetryRunRequest\x12'\n" +
	"\rexperiment_id\x18\x01 \x01(\tB\x02\x18\x01R\fexperimentId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId*\x98\x01\n" +
	"\fRuntimeState\x12\x1d\n" +
	"\x19RUNTIME_STATE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\v\n" +
	"\aRUNNING\x10\x02\x12\r\n" +
	"\tSUCCEEDED\x10\x03\x12\v\n" +
	"\aSKIPPED\x10\x04\x12\n" +
	"\n" +
	"\x06FAILED\x10\x05\x12\r\n" +
	"\tCANCELING\x10\x06\x12\f\n" +
	"\bCANCELED\x10\a\x12\n" +
	"\n" +
	"\x06PAUSED\x10\b2\xf9\n" +
	"\n" +
	"\n" +
	"RunService\x12\x93\x01\n" +
	"\tCreateRun\x128.kubeflow.pipelines.backend.api.v2beta1.CreateRunRequest\x1a+.kubeflow.pipelines.backend.api.v2beta1.Run\"\x1f\x82\xd3\xe4\x93\x02\x19:\x03run\"\x12/apis/v2beta1/runs\x12\x91\x01\n" +
	"\x06GetRun\x125.kubeflow.pipelines.backend.api.v2beta1.GetRunRequest\x1a+.kubeflow.pipelines.backend.api.v2beta1.Run\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/apis/v2beta1/runs/{run_id}\x12\x99\x01\n" +
	"\bListRuns\x127.kubeflow.pipelines.backend.api.v2beta1.ListRunsRequest\x1a8.kubeflow.pipelines.backend.api.v2beta1.ListRunsResponse\"\x1a\x82\xd3\xe4\x93\x02\x14\x12\x12/apis/v2beta1/runs\x12\x8c\x01\n" +
	"\n" +
	"ArchiveRun\x129.kubeflow.pipelines.backend.api.v2beta1.ArchiveRunRequest\x1a\x16.google.protobuf.Empty\"+\x82\xd3\xe4\x93\x02%\"#/apis/v2beta1/runs/{run_id}:archive\x12\x92\x01\n" +
	"\fUnarchiveRun\x12;.kubeflow.pipelines.backend.api.v2beta1.UnarchiveRunRequest\x1a\x16.google.protobuf.Empty\"-\x82\xd3\xe4\x93\x02'\"%/apis/v2beta1/runs/{run_id}:unarchive\x12\x82\x01\n" +
	"\tDeleteRun\x128.kubeflow.pipelines.backend.api.v2beta1.DeleteRunRequest\x1a\x16.google.protobuf.Empty\"#\x82\xd3\xe4\x93\x02\x1d*\x1b/apis/v2beta1/runs/{run_id}\x12\xdd\x01\n" +
	"\fReadArtifact\x12;.kubeflow.pipelines.backend.api.v2beta1.ReadArtifactRequest\x1a<.kubeflow.pipelines.backend.api.v2beta1.ReadArtifactResponse\"R\x82\xd3\xe4\x93\x02L\x12J/apis/v2beta1/runs/{run_id}/nodes/{node_id}/artifacts/{artifact_name}:read\x12\x92\x01\n" +
	"\fTerminateRun\x12;.kubeflow.pipelines.backend.api.v2beta1.TerminateRunRequest\x1a\x16.google.protobuf.Empty\"-\x82\xd3\xe4\x93\x02'\"%/apis/v2beta1/runs/{run_id}:terminate\x12\x86\x01\n" +
	"\bRetryRun\x127.kubeflow.pipelines.backend.api.v2beta1.RetryRunRequest\x1a\x16.google.protobuf.Empty\")\x82\xd3\xe4\x93\x02#\"!/apis/v2beta1/runs/{run_id}:retryB\x98\x01\x92AX*\x02\x01\x02R#\n" +
	"\adefault\x12\x18\x12\x16\n" +
	"\x14\x1a\x12.google.rpc.StatusZ\x1f\n" +
	"\x1d\n" +
	"\x06Bearer\x12\x13\b\x02\x1a\rauthorization \x02b\f\n" +
	"\n" +
	"\n" +
	"\x06Bearer\x12\x00Z;github.com/kubeflow/pipelines/backend/api/v2beta1/go_clientb\x06proto3"

var (
	file_backend_api_v2beta1_run_proto_rawDescOnce sync.Once
	file_backend_api_v2beta1_run_proto_rawDescData []byte
)

func file_backend_api_v2beta1_run_proto_rawDescGZIP() []byte {
	file_backend_api_v2beta1_run_proto_rawDescOnce.Do(func() {
		file_backend_api_v2beta1_run_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_backend_api_v2beta1_run_proto_rawDesc), len(file_backend_api_v2beta1_run_proto_rawDesc)))
	})
	return file_backend_api_v2beta1_run_proto_rawDescData
}

var file_backend_api_v2beta1_run_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_backend_api_v2beta1_run_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_backend_api_v2beta1_run_proto_goTypes = []any{
	(RuntimeState)(0),                    // 0: kubeflow.pipelines.backend.api.v2beta1.RuntimeState
	(Run_StorageState)(0),                // 1: kubeflow.pipelines.backend.api.v2beta1.Run.StorageState
	(*Run)(nil),                          // 2: kubeflow.pipelines.backend.api.v2beta1.Run
	(*PipelineVersionReference)(nil),     // 3: kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReference
	(*RuntimeStatus)(nil),                // 4: kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus
	(*RunDetails)(nil),                   // 5: kubeflow.pipelines.backend.api.v2beta1.RunDetails
	(*PipelineTaskDetail)(nil),           // 6: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	(*PipelineTaskExecutorDetail)(nil),   // 7: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskExecutorDetail
	(*ArtifactList)(nil),                 // 8: kubeflow.pipelines.backend.api.v2beta1.ArtifactList
	(*CreateRunRequest)(nil),             // 9: kubeflow.pipelines.backend.api.v2beta1.CreateRunRequest
	(*GetRunRequest)(nil),                // 10: kubeflow.pipelines.backend.api.v2beta1.GetRunRequest
	(*ListRunsRequest)(nil),              // 11: kubeflow.pipelines.backend.api.v2beta1.ListRunsRequest
	(*TerminateRunRequest)(nil),          // 12: kubeflow.pipelines.backend.api.v2beta1.TerminateRunRequest
	(*ListRunsResponse)(nil),             // 13: kubeflow.pipelines.backend.api.v2beta1.ListRunsResponse
	(*ArchiveRunRequest)(nil),            // 14: kubeflow.pipelines.backend.api.v2beta1.ArchiveRunRequest
	(*UnarchiveRunRequest)(nil),          // 15: kubeflow.pipelines.backend.api.v2beta1.UnarchiveRunRequest
	(*DeleteRunRequest)(nil),             // 16: kubeflow.pipelines.backend.api.v2beta1.DeleteRunRequest
	(*ReadArtifactRequest)(nil),          // 17: kubeflow.pipelines.backend.api.v2beta1.ReadArtifactRequest
	(*ReadArtifactResponse)(nil),         // 18: kubeflow.pipelines.backend.api.v2beta1.ReadArtifactResponse
	(*RetryRunRequest)(nil),              // 19: kubeflow.pipelines.backend.api.v2beta1.RetryRunRequest
	nil,                                  // 20: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputsEntry
	nil,                                  // 21: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.OutputsEntry
	(*PipelineTaskDetail_ChildTask)(nil), // 22: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.ChildTask
	(*structpb.Struct)(nil),              // 23: google.protobuf.Struct
	(*RuntimeConfig)(nil),                // 24: kubeflow.pipelines.backend.api.v2beta1.RuntimeConfig
	(*timestamppb.Timestamp)(nil),        // 25: google.protobuf.Timestamp
	(*status.Status)(nil),                // 26: google.rpc.Status
	(*emptypb.Empty)(nil),                // 27: google.protobuf.Empty
}
var file_backend_api_v2beta1_run_proto_depIdxs = []int32{
	1,  // 0: kubeflow.pipelines.backend.api.v2beta1.Run.storage_state:type_name -> kubeflow.pipelines.backend.api.v2beta1.Run.StorageState
	23, // 1: kubeflow.pipelines.backend.api.v2beta1.Run.pipeline_spec:type_name -> google.protobuf.Struct
	3,  // 2: kubeflow.pipelines.backend.api.v2beta1.Run.pipeline_version_reference:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineVersionReference
	24, // 3: kubeflow.pipelines.backend.api.v2beta1.Run.runtime_config:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeConfig
	25, // 4: kubeflow.pipelines.backend.api.v2beta1.Run.created_at:type_name -> google.protobuf.Timestamp
	25, // 5: kubeflow.pipelines.backend.api.v2beta1.Run.scheduled_at:type_name -> google.protobuf.Timestamp
	25, // 6: kubeflow.pipelines.backend.api.v2beta1.Run.finished_at:type_name -> google.protobuf.Timestamp
	0,  // 7: kubeflow.pipelines.backend.api.v2beta1.Run.state:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeState
	26, // 8: kubeflow.pipelines.backend.api.v2beta1.Run.error:type_name -> google.rpc.Status
	5,  // 9: kubeflow.pipelines.backend.api.v2beta1.Run.run_details:type_name -> kubeflow.pipelines.backend.api.v2beta1.RunDetails
	4,  // 10: kubeflow.pipelines.backend.api.v2beta1.Run.state_history:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus
	25, // 11: kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus.update_time:type_name -> google.protobuf.Timestamp
	0,  // 12: kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus.state:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeState
	26, // 13: kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus.error:type_name -> google.rpc.Status
	6,  // 14: kubeflow.pipelines.backend.api.v2beta1.RunDetails.task_details:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail
	25, // 15: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.create_time:type_name -> google.protobuf.Timestamp
	25, // 16: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.start_time:type_name -> google.protobuf.Timestamp
	25, // 17: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.end_time:type_name -> google.protobuf.Timestamp
	7,  // 18: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.executor_detail:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskExecutorDetail
	0,  // 19: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.state:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeState
	26, // 20: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.error:type_name -> google.rpc.Status
	20, // 21: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.inputs:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputsEntry
	21, // 22: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.outputs:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.OutputsEntry
	4,  // 23: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.state_history:type_name -> kubeflow.pipelines.backend.api.v2beta1.RuntimeStatus
	22, // 24: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.child_tasks:type_name -> kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.ChildTask
	2,  // 25: kubeflow.pipelines.backend.api.v2beta1.CreateRunRequest.run:type_name -> kubeflow.pipelines.backend.api.v2beta1.Run
	2,  // 26: kubeflow.pipelines.backend.api.v2beta1.ListRunsResponse.runs:type_name -> kubeflow.pipelines.backend.api.v2beta1.Run
	8,  // 27: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.InputsEntry.value:type_name -> kubeflow.pipelines.backend.api.v2beta1.ArtifactList
	8,  // 28: kubeflow.pipelines.backend.api.v2beta1.PipelineTaskDetail.OutputsEntry.value:type_name -> kubeflow.pipelines.backend.api.v2beta1.ArtifactList
	9,  // 29: kubeflow.pipelines.backend.api.v2beta1.RunService.CreateRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.CreateRunRequest
	10, // 30: kubeflow.pipelines.backend.api.v2beta1.RunService.GetRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.GetRunRequest
	11, // 31: kubeflow.pipelines.backend.api.v2beta1.RunService.ListRuns:input_type -> kubeflow.pipelines.backend.api.v2beta1.ListRunsRequest
	14, // 32: kubeflow.pipelines.backend.api.v2beta1.RunService.ArchiveRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.ArchiveRunRequest
	15, // 33: kubeflow.pipelines.backend.api.v2beta1.RunService.UnarchiveRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.UnarchiveRunRequest
	16, // 34: kubeflow.pipelines.backend.api.v2beta1.RunService.DeleteRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.DeleteRunRequest
	17, // 35: kubeflow.pipelines.backend.api.v2beta1.RunService.ReadArtifact:input_type -> kubeflow.pipelines.backend.api.v2beta1.ReadArtifactRequest
	12, // 36: kubeflow.pipelines.backend.api.v2beta1.RunService.TerminateRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.TerminateRunRequest
	19, // 37: kubeflow.pipelines.backend.api.v2beta1.RunService.RetryRun:input_type -> kubeflow.pipelines.backend.api.v2beta1.RetryRunRequest
	2,  // 38: kubeflow.pipelines.backend.api.v2beta1.RunService.CreateRun:output_type -> kubeflow.pipelines.backend.api.v2beta1.Run
	2,  // 39: kubeflow.pipelines.backend.api.v2beta1.RunService.GetRun:output_type -> kubeflow.pipelines.backend.api.v2beta1.Run
	13, // 40: kubeflow.pipelines.backend.api.v2beta1.RunService.ListRuns:output_type -> kubeflow.pipelines.backend.api.v2beta1.ListRunsResponse
	27, // 41: kubeflow.pipelines.backend.api.v2beta1.RunService.ArchiveRun:output_type -> google.protobuf.Empty
	27, // 42: kubeflow.pipelines.backend.api.v2beta1.RunService.UnarchiveRun:output_type -> google.protobuf.Empty
	27, // 43: kubeflow.pipelines.backend.api.v2beta1.RunService.DeleteRun:output_type -> google.protobuf.Empty
	18, // 44: kubeflow.pipelines.backend.api.v2beta1.RunService.ReadArtifact:output_type -> kubeflow.pipelines.backend.api.v2beta1.ReadArtifactResponse
	27, // 45: kubeflow.pipelines.backend.api.v2beta1.RunService.TerminateRun:output_type -> google.protobuf.Empty
	27, // 46: kubeflow.pipelines.backend.api.v2beta1.RunService.RetryRun:output_type -> google.protobuf.Empty
	38, // [38:47] is the sub-list for method output_type
	29, // [29:38] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_backend_api_v2beta1_run_proto_init() }
func file_backend_api_v2beta1_run_proto_init() {
	if File_backend_api_v2beta1_run_proto != nil {
		return
	}
	file_backend_api_v2beta1_runtime_config_proto_init()
	file_backend_api_v2beta1_run_proto_msgTypes[0].OneofWrappers = []any{
		(*Run_PipelineVersionId)(nil),
		(*Run_PipelineSpec)(nil),
		(*Run_PipelineVersionReference)(nil),
	}
	file_backend_api_v2beta1_run_proto_msgTypes[20].OneofWrappers = []any{
		(*PipelineTaskDetail_ChildTask_TaskId)(nil),
		(*PipelineTaskDetail_ChildTask_PodName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_backend_api_v2beta1_run_proto_rawDesc), len(file_backend_api_v2beta1_run_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_api_v2beta1_run_proto_goTypes,
		DependencyIndexes: file_backend_api_v2beta1_run_proto_depIdxs,
		EnumInfos:         file_backend_api_v2beta1_run_proto_enumTypes,
		MessageInfos:      file_backend_api_v2beta1_run_proto_msgTypes,
	}.Build()
	File_backend_api_v2beta1_run_proto = out.File
	file_backend_api_v2beta1_run_proto_goTypes = nil
	file_backend_api_v2beta1_run_proto_depIdxs = nil
}
