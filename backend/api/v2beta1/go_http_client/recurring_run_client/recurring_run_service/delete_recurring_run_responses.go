// Code generated by go-swagger; DO NOT EDIT.

package recurring_run_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteRecurringRunReader is a Reader for the DeleteRecurringRun structure.
type DeleteRecurringRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRecurringRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteRecurringRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRecurringRunOK creates a DeleteRecurringRunOK with default headers values
func NewDeleteRecurringRunOK() *DeleteRecurringRunOK {
	return &DeleteRecurringRunOK{}
}

/*DeleteRecurringRunOK handles this case with default header values.

A successful response.
*/
type DeleteRecurringRunOK struct {
	Payload interface{}
}

func (o *DeleteRecurringRunOK) Error() string {
	return fmt.Sprintf("[DELETE /apis/v2beta1/recurringruns/{recurring_run_id}][%d] deleteRecurringRunOK  %+v", 200, o.Payload)
}

func (o *DeleteRecurringRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
