// Code generated by go-swagger; DO NOT EDIT.

package pipeline_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new pipeline service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pipeline service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PipelineServiceCreatePipeline creates a pipeline
*/
func (a *Client) PipelineServiceCreatePipeline(params *PipelineServiceCreatePipelineParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceCreatePipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceCreatePipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_CreatePipeline",
		Method:             "POST",
		PathPattern:        "/apis/v2beta1/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceCreatePipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceCreatePipelineOK), nil

}

/*
PipelineServiceCreatePipelineAndVersion creates a new pipeline and a new pipeline version in a single transaction
*/
func (a *Client) PipelineServiceCreatePipelineAndVersion(params *PipelineServiceCreatePipelineAndVersionParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceCreatePipelineAndVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceCreatePipelineAndVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_CreatePipelineAndVersion",
		Method:             "POST",
		PathPattern:        "/apis/v2beta1/pipelines/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceCreatePipelineAndVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceCreatePipelineAndVersionOK), nil

}

/*
PipelineServiceCreatePipelineVersion adds a pipeline version to the specified pipeline ID
*/
func (a *Client) PipelineServiceCreatePipelineVersion(params *PipelineServiceCreatePipelineVersionParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceCreatePipelineVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceCreatePipelineVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_CreatePipelineVersion",
		Method:             "POST",
		PathPattern:        "/apis/v2beta1/pipelines/{pipeline_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceCreatePipelineVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceCreatePipelineVersionOK), nil

}

/*
PipelineServiceDeletePipeline deletes an empty pipeline by ID returns error if the pipeline has pipeline versions
*/
func (a *Client) PipelineServiceDeletePipeline(params *PipelineServiceDeletePipelineParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceDeletePipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceDeletePipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_DeletePipeline",
		Method:             "DELETE",
		PathPattern:        "/apis/v2beta1/pipelines/{pipeline_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceDeletePipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceDeletePipelineOK), nil

}

/*
PipelineServiceDeletePipelineVersion deletes a specific pipeline version by pipeline version ID and pipeline ID
*/
func (a *Client) PipelineServiceDeletePipelineVersion(params *PipelineServiceDeletePipelineVersionParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceDeletePipelineVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceDeletePipelineVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_DeletePipelineVersion",
		Method:             "DELETE",
		PathPattern:        "/apis/v2beta1/pipelines/{pipeline_id}/versions/{pipeline_version_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceDeletePipelineVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceDeletePipelineVersionOK), nil

}

/*
PipelineServiceGetPipeline finds a specific pipeline by ID
*/
func (a *Client) PipelineServiceGetPipeline(params *PipelineServiceGetPipelineParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceGetPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceGetPipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_GetPipeline",
		Method:             "GET",
		PathPattern:        "/apis/v2beta1/pipelines/{pipeline_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceGetPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceGetPipelineOK), nil

}

/*
PipelineServiceGetPipelineByName finds a specific pipeline by name and namespace
*/
func (a *Client) PipelineServiceGetPipelineByName(params *PipelineServiceGetPipelineByNameParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceGetPipelineByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceGetPipelineByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_GetPipelineByName",
		Method:             "GET",
		PathPattern:        "/apis/v2beta1/pipelines/names/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceGetPipelineByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceGetPipelineByNameOK), nil

}

/*
PipelineServiceGetPipelineVersion gets a pipeline version by pipeline version ID and pipeline ID
*/
func (a *Client) PipelineServiceGetPipelineVersion(params *PipelineServiceGetPipelineVersionParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceGetPipelineVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceGetPipelineVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_GetPipelineVersion",
		Method:             "GET",
		PathPattern:        "/apis/v2beta1/pipelines/{pipeline_id}/versions/{pipeline_version_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceGetPipelineVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceGetPipelineVersionOK), nil

}

/*
PipelineServiceListPipelineVersions lists all pipeline versions of a given pipeline ID
*/
func (a *Client) PipelineServiceListPipelineVersions(params *PipelineServiceListPipelineVersionsParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceListPipelineVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceListPipelineVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_ListPipelineVersions",
		Method:             "GET",
		PathPattern:        "/apis/v2beta1/pipelines/{pipeline_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceListPipelineVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceListPipelineVersionsOK), nil

}

/*
PipelineServiceListPipelines finds all pipelines within a namespace
*/
func (a *Client) PipelineServiceListPipelines(params *PipelineServiceListPipelinesParams, authInfo runtime.ClientAuthInfoWriter) (*PipelineServiceListPipelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPipelineServiceListPipelinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PipelineService_ListPipelines",
		Method:             "GET",
		PathPattern:        "/apis/v2beta1/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PipelineServiceListPipelinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PipelineServiceListPipelinesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
