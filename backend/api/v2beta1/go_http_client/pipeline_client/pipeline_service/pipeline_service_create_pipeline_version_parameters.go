// Code generated by go-swagger; DO NOT EDIT.

package pipeline_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/kubeflow/pipelines/backend/api/v2beta1/go_http_client/pipeline_model"
)

// NewPipelineServiceCreatePipelineVersionParams creates a new PipelineServiceCreatePipelineVersionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPipelineServiceCreatePipelineVersionParams() *PipelineServiceCreatePipelineVersionParams {
	return &PipelineServiceCreatePipelineVersionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPipelineServiceCreatePipelineVersionParamsWithTimeout creates a new PipelineServiceCreatePipelineVersionParams object
// with the ability to set a timeout on a request.
func NewPipelineServiceCreatePipelineVersionParamsWithTimeout(timeout time.Duration) *PipelineServiceCreatePipelineVersionParams {
	return &PipelineServiceCreatePipelineVersionParams{
		timeout: timeout,
	}
}

// NewPipelineServiceCreatePipelineVersionParamsWithContext creates a new PipelineServiceCreatePipelineVersionParams object
// with the ability to set a context for a request.
func NewPipelineServiceCreatePipelineVersionParamsWithContext(ctx context.Context) *PipelineServiceCreatePipelineVersionParams {
	return &PipelineServiceCreatePipelineVersionParams{
		Context: ctx,
	}
}

// NewPipelineServiceCreatePipelineVersionParamsWithHTTPClient creates a new PipelineServiceCreatePipelineVersionParams object
// with the ability to set a custom HTTPClient for a request.
func NewPipelineServiceCreatePipelineVersionParamsWithHTTPClient(client *http.Client) *PipelineServiceCreatePipelineVersionParams {
	return &PipelineServiceCreatePipelineVersionParams{
		HTTPClient: client,
	}
}

/*
PipelineServiceCreatePipelineVersionParams contains all the parameters to send to the API endpoint

	for the pipeline service create pipeline version operation.

	Typically these are written to a http.Request.
*/
type PipelineServiceCreatePipelineVersionParams struct {

	/* PipelineID.

	   Required input. ID of the parent pipeline.
	*/
	PipelineID string

	/* PipelineVersion.

	   Required input. Pipeline version ID to be created.
	*/
	PipelineVersion *pipeline_model.V2beta1PipelineVersion

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pipeline service create pipeline version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PipelineServiceCreatePipelineVersionParams) WithDefaults() *PipelineServiceCreatePipelineVersionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pipeline service create pipeline version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PipelineServiceCreatePipelineVersionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) WithTimeout(timeout time.Duration) *PipelineServiceCreatePipelineVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) WithContext(ctx context.Context) *PipelineServiceCreatePipelineVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) WithHTTPClient(client *http.Client) *PipelineServiceCreatePipelineVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPipelineID adds the pipelineID to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) WithPipelineID(pipelineID string) *PipelineServiceCreatePipelineVersionParams {
	o.SetPipelineID(pipelineID)
	return o
}

// SetPipelineID adds the pipelineId to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) SetPipelineID(pipelineID string) {
	o.PipelineID = pipelineID
}

// WithPipelineVersion adds the pipelineVersion to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) WithPipelineVersion(pipelineVersion *pipeline_model.V2beta1PipelineVersion) *PipelineServiceCreatePipelineVersionParams {
	o.SetPipelineVersion(pipelineVersion)
	return o
}

// SetPipelineVersion adds the pipelineVersion to the pipeline service create pipeline version params
func (o *PipelineServiceCreatePipelineVersionParams) SetPipelineVersion(pipelineVersion *pipeline_model.V2beta1PipelineVersion) {
	o.PipelineVersion = pipelineVersion
}

// WriteToRequest writes these params to a swagger request
func (o *PipelineServiceCreatePipelineVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param pipeline_id
	if err := r.SetPathParam("pipeline_id", o.PipelineID); err != nil {
		return err
	}
	if o.PipelineVersion != nil {
		if err := r.SetBodyParam(o.PipelineVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
