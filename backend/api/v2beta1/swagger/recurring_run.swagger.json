{
  "swagger": "2.0",
  "info": {
    "title": "backend/api/v2beta1/recurring_run.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v2beta1/recurringruns": {
      "get": {
        "summary": "Finds all recurring runs given experiment and namespace. \nIf experiment ID is not specified, find all recurring runs across all experiments.",
        "operationId": "ListRecurringRuns",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1ListRecurringRunsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "page_token",
            "description": "A page token to request the next page of results. The token is acquired\nfrom the nextPageToken field of the response from the previous\nListRecurringRuns call or can be omitted when fetching the first page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "The number of recurring runs to be listed per page. If there are more recurring runs \nthan this number, the response message will contain a nextPageToken field you can use\nto fetch the next page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_by",
            "description": "Can be formatted as \"field_name\", \"field_name asc\" or \"field_name desc\".\nAscending by default.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "namespace",
            "description": "Optional input. The namespace the recurring runs belong to.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "A url-encoded, JSON-serialized Filter protocol buffer (see\n[filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The ID of the experiment to be retrieved. If empty, list recurring runs across all experiments.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RecurringRunService"
        ]
      },
      "post": {
        "summary": "Creates a new recurring run in an experiment, given the experiment ID.",
        "operationId": "CreateRecurringRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1RecurringRun"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The recurring run to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v2beta1RecurringRun"
            }
          }
        ],
        "tags": [
          "RecurringRunService"
        ]
      }
    },
    "/apis/v2beta1/recurringruns/{recurring_run_id}": {
      "get": {
        "summary": "Finds a specific recurring run by ID.",
        "operationId": "GetRecurringRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v2beta1RecurringRun"
            }
          }
        },
        "parameters": [
          {
            "name": "recurring_run_id",
            "description": "The ID of the recurring run to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RecurringRunService"
        ]
      },
      "delete": {
        "summary": "Deletes a recurring run.",
        "operationId": "DeleteRecurringRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "recurring_run_id",
            "description": "The ID of the recurring run to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RecurringRunService"
        ]
      }
    },
    "/apis/v2beta1/recurringruns/{recurring_run_id}:disable": {
      "post": {
        "summary": "Stops a recurring run and all its associated runs. The recurring run is not deleted.",
        "operationId": "DisableRecurringRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "recurring_run_id",
            "description": "The ID of the recurring runs to be disabled.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RecurringRunService"
        ]
      }
    },
    "/apis/v2beta1/recurringruns/{recurring_run_id}:enable": {
      "post": {
        "summary": "Restarts a recurring run that was previously stopped. All runs associated with the \nrecurring run will continue.",
        "operationId": "EnableRecurringRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "recurring_run_id",
            "description": "The ID of the recurring runs to be enabled.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RecurringRunService"
        ]
      }
    }
  },
  "definitions": {
    "RecurringRunMode": {
      "type": "string",
      "enum": [
        "MODE_UNSPECIFIED",
        "ENABLE",
        "DISABLE"
      ],
      "default": "MODE_UNSPECIFIED",
      "description": "Required input.\nUser setting to enable or disable the recurring run. \nOnly used for creation of recurring runs. Later updates use enable/disable API.\n\n - DISABLE: The recurring run won't schedule any run if disabled."
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "v2beta1CronSchedule": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the cron job."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the cron job."
        },
        "cron": {
          "type": "string",
          "title": "The cron string. For details how to compose a cron, visit\nttps://en.wikipedia.org/wiki/Cron"
        }
      },
      "description": "CronSchedule allow scheduling the recurring run with unix-like cron."
    },
    "v2beta1ListRecurringRunsResponse": {
      "type": "object",
      "properties": {
        "recurringRuns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2beta1RecurringRun"
          },
          "description": "A list of recurring runs returned."
        },
        "total_size": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of recurring runs for the given query."
        },
        "next_page_token": {
          "type": "string",
          "description": "The token to list the next page of recurring runs."
        }
      }
    },
    "v2beta1PeriodicSchedule": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the periodic recurring run."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the periodic recurring run."
        },
        "interval_second": {
          "type": "string",
          "format": "int64",
          "description": "The time interval between the starting time of consecutive recurring runs."
        }
      },
      "description": "PeriodicSchedule allow scheduling the recurring run periodically with certain interval."
    },
    "v2beta1PipelineVersionReference": {
      "type": "object",
      "properties": {
        "pipeline_id": {
          "type": "string",
          "description": "Input. Required. Unique ID of the parent pipeline."
        },
        "pipeline_version_id": {
          "type": "string",
          "description": "Input. Required. Unique ID of an existing pipeline version."
        }
      },
      "description": "Reference to an existing pipeline version."
    },
    "v2beta1RecurringRun": {
      "type": "object",
      "properties": {
        "recurring_run_id": {
          "type": "string",
          "description": "Output. Unique run ID generated by API server."
        },
        "display_name": {
          "type": "string",
          "description": "Required input field. Recurring run name provided by user. Not unique."
        },
        "description": {
          "type": "string",
          "description": "Optional input field. Describes the purpose of the recurring run."
        },
        "pipeline_version_id": {
          "type": "string",
          "description": "This field is Deprecated. The pipeline version id is under pipeline_version_reference for v2."
        },
        "pipeline_spec": {
          "type": "object",
          "description": "The pipeline spec."
        },
        "pipeline_version_reference": {
          "$ref": "#/definitions/v2beta1PipelineVersionReference",
          "description": "Reference to a pipeline version containing pipeline_id and pipeline_version_id."
        },
        "runtime_config": {
          "$ref": "#/definitions/v2beta1RuntimeConfig",
          "description": "Runtime config of the pipeline."
        },
        "service_account": {
          "type": "string",
          "description": "Optional input field. Specifies which Kubernetes service account this recurring run uses."
        },
        "max_concurrency": {
          "type": "string",
          "format": "int64",
          "description": "Required input field.\nSpecifies how many runs can be executed concurrently. Range [1-10]."
        },
        "trigger": {
          "$ref": "#/definitions/v2beta1Trigger",
          "description": "Required input field.\nSpecifies how a run is triggered. Support cron mode or periodic mode."
        },
        "mode": {
          "$ref": "#/definitions/RecurringRunMode"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time this recurring run was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The last time this recurring run was updated."
        },
        "status": {
          "$ref": "#/definitions/v2beta1RecurringRunStatus"
        },
        "error": {
          "$ref": "#/definitions/googlerpcStatus",
          "description": "In case any error happens retrieving a recurring run field, only recurring run ID\nand the error message is returned. Client has the flexibility of choosing\nhow to handle the error. This is especially useful during listing call."
        },
        "no_catchup": {
          "type": "boolean",
          "format": "boolean",
          "description": "Optional input field. Whether the recurring run should catch up if behind schedule.\nIf true, the recurring run will only schedule the latest interval if behind schedule.\nIf false, the recurring run will catch up on each past interval."
        },
        "namespace": {
          "type": "string",
          "description": "TODO (gkclat): consider removing this field if it can be obtained from the parent experiment.\nOutput only. Namespace this recurring run belongs to. Derived from the parent experiment.",
          "readOnly": true
        },
        "experiment_id": {
          "type": "string",
          "description": "ID of the parent experiment this recurring run belongs to."
        }
      }
    },
    "v2beta1RecurringRunStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "ENABLED",
        "DISABLED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "Output. The status of the recurring run."
    },
    "v2beta1RuntimeConfig": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "description": "The runtime parameters of the Pipeline. The parameters will be\nused to replace the placeholders at runtime."
        },
        "pipeline_root": {
          "type": "string",
          "title": "A path in a object store bucket which will be treated as the root\noutput directory of the pipeline. It is used by the system to\ngenerate the paths of output artifacts. \nRef:(https://www.kubeflow.org/docs/components/pipelines/pipeline-root/)"
        }
      },
      "description": "The runtime config."
    },
    "v2beta1Trigger": {
      "type": "object",
      "properties": {
        "cron_schedule": {
          "$ref": "#/definitions/v2beta1CronSchedule"
        },
        "periodic_schedule": {
          "$ref": "#/definitions/v2beta1PeriodicSchedule"
        }
      },
      "description": "Trigger defines what starts a pipeline run."
    }
  }
}
