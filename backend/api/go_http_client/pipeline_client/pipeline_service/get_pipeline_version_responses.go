// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package pipeline_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	pipeline_model "github.com/kubeflow/pipelines/backend/api/go_http_client/pipeline_model"
)

// GetPipelineVersionReader is a Reader for the GetPipelineVersion structure.
type GetPipelineVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPipelineVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPipelineVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetPipelineVersionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetPipelineVersionOK creates a GetPipelineVersionOK with default headers values
func NewGetPipelineVersionOK() *GetPipelineVersionOK {
	return &GetPipelineVersionOK{}
}

/*GetPipelineVersionOK handles this case with default header values.

A successful response.
*/
type GetPipelineVersionOK struct {
	Payload *pipeline_model.APIPipelineVersion
}

func (o *GetPipelineVersionOK) Error() string {
	return fmt.Sprintf("[GET /apis/v1beta1/pipeline_versions/{version_id}][%d] getPipelineVersionOK  %+v", 200, o.Payload)
}

func (o *GetPipelineVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pipeline_model.APIPipelineVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPipelineVersionDefault creates a GetPipelineVersionDefault with default headers values
func NewGetPipelineVersionDefault(code int) *GetPipelineVersionDefault {
	return &GetPipelineVersionDefault{
		_statusCode: code,
	}
}

/*GetPipelineVersionDefault handles this case with default header values.

GetPipelineVersionDefault get pipeline version default
*/
type GetPipelineVersionDefault struct {
	_statusCode int

	Payload *pipeline_model.APIStatus
}

// Code gets the status code for the get pipeline version default response
func (o *GetPipelineVersionDefault) Code() int {
	return o._statusCode
}

func (o *GetPipelineVersionDefault) Error() string {
	return fmt.Sprintf("[GET /apis/v1beta1/pipeline_versions/{version_id}][%d] GetPipelineVersion default  %+v", o._statusCode, o.Payload)
}

func (o *GetPipelineVersionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pipeline_model.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
