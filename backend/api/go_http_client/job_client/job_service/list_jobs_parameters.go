// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package job_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListJobsParams creates a new ListJobsParams object
// with the default values initialized.
func NewListJobsParams() *ListJobsParams {
	var ()
	return &ListJobsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListJobsParamsWithTimeout creates a new ListJobsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListJobsParamsWithTimeout(timeout time.Duration) *ListJobsParams {
	var ()
	return &ListJobsParams{

		timeout: timeout,
	}
}

// NewListJobsParamsWithContext creates a new ListJobsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListJobsParamsWithContext(ctx context.Context) *ListJobsParams {
	var ()
	return &ListJobsParams{

		Context: ctx,
	}
}

// NewListJobsParamsWithHTTPClient creates a new ListJobsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListJobsParamsWithHTTPClient(client *http.Client) *ListJobsParams {
	var ()
	return &ListJobsParams{
		HTTPClient: client,
	}
}

/*ListJobsParams contains all the parameters to send to the API endpoint
for the list jobs operation typically these are written to a http.Request
*/
type ListJobsParams struct {

	/*PageSize*/
	PageSize *int32
	/*PageToken*/
	PageToken *string
	/*ResourceReference
	  What resource reference to filter on. Expect {type=XX,id=XX}
	E.g. Listing job for an experiment would be {type=EXPERIMENT,id=123}.

	*/
	ResourceReference *string
	/*SortBy
	  Can be format of "field_name", "field_name asc" or "field_name des"
	Ascending by default.

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list jobs params
func (o *ListJobsParams) WithTimeout(timeout time.Duration) *ListJobsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list jobs params
func (o *ListJobsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list jobs params
func (o *ListJobsParams) WithContext(ctx context.Context) *ListJobsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list jobs params
func (o *ListJobsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list jobs params
func (o *ListJobsParams) WithHTTPClient(client *http.Client) *ListJobsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list jobs params
func (o *ListJobsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageSize adds the pageSize to the list jobs params
func (o *ListJobsParams) WithPageSize(pageSize *int32) *ListJobsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list jobs params
func (o *ListJobsParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the list jobs params
func (o *ListJobsParams) WithPageToken(pageToken *string) *ListJobsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list jobs params
func (o *ListJobsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithResourceReference adds the resourceReference to the list jobs params
func (o *ListJobsParams) WithResourceReference(resourceReference *string) *ListJobsParams {
	o.SetResourceReference(resourceReference)
	return o
}

// SetResourceReference adds the resourceReference to the list jobs params
func (o *ListJobsParams) SetResourceReference(resourceReference *string) {
	o.ResourceReference = resourceReference
}

// WithSortBy adds the sortBy to the list jobs params
func (o *ListJobsParams) WithSortBy(sortBy *string) *ListJobsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list jobs params
func (o *ListJobsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *ListJobsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PageToken != nil {

		// query param page_token
		var qrPageToken string
		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {
			if err := r.SetQueryParam("page_token", qPageToken); err != nil {
				return err
			}
		}

	}

	if o.ResourceReference != nil {

		// query param resource_reference
		var qrResourceReference string
		if o.ResourceReference != nil {
			qrResourceReference = *o.ResourceReference
		}
		qResourceReference := qrResourceReference
		if qResourceReference != "" {
			if err := r.SetQueryParam("resource_reference", qResourceReference); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
