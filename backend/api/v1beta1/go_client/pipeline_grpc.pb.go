// Copyright 2018 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: backend/api/v1beta1/pipeline.proto

package go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PipelineService_CreatePipelineV1_FullMethodName               = "/api.PipelineService/CreatePipelineV1"
	PipelineService_GetPipelineV1_FullMethodName                  = "/api.PipelineService/GetPipelineV1"
	PipelineService_GetPipelineByNameV1_FullMethodName            = "/api.PipelineService/GetPipelineByNameV1"
	PipelineService_ListPipelinesV1_FullMethodName                = "/api.PipelineService/ListPipelinesV1"
	PipelineService_DeletePipelineV1_FullMethodName               = "/api.PipelineService/DeletePipelineV1"
	PipelineService_GetTemplate_FullMethodName                    = "/api.PipelineService/GetTemplate"
	PipelineService_CreatePipelineVersionV1_FullMethodName        = "/api.PipelineService/CreatePipelineVersionV1"
	PipelineService_GetPipelineVersionV1_FullMethodName           = "/api.PipelineService/GetPipelineVersionV1"
	PipelineService_ListPipelineVersionsV1_FullMethodName         = "/api.PipelineService/ListPipelineVersionsV1"
	PipelineService_DeletePipelineVersionV1_FullMethodName        = "/api.PipelineService/DeletePipelineVersionV1"
	PipelineService_GetPipelineVersionTemplate_FullMethodName     = "/api.PipelineService/GetPipelineVersionTemplate"
	PipelineService_UpdatePipelineDefaultVersionV1_FullMethodName = "/api.PipelineService/UpdatePipelineDefaultVersionV1"
)

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineServiceClient interface {
	// Creates a pipeline.
	CreatePipelineV1(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error)
	// Finds a specific pipeline by ID.
	GetPipelineV1(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error)
	// Finds a pipeline by Name (and namespace)
	GetPipelineByNameV1(ctx context.Context, in *GetPipelineByNameRequest, opts ...grpc.CallOption) (*Pipeline, error)
	// Finds all pipelines.
	ListPipelinesV1(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error)
	// Deletes a pipeline and its pipeline versions.
	DeletePipelineV1(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns a single YAML template that contains the description, parameters, and metadata associated with the pipeline provided.
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// Adds a pipeline version to the specified pipeline.
	CreatePipelineVersionV1(ctx context.Context, in *CreatePipelineVersionRequest, opts ...grpc.CallOption) (*PipelineVersion, error)
	// Gets a pipeline version by pipeline version ID.
	GetPipelineVersionV1(ctx context.Context, in *GetPipelineVersionRequest, opts ...grpc.CallOption) (*PipelineVersion, error)
	// Lists all pipeline versions of a given pipeline.
	ListPipelineVersionsV1(ctx context.Context, in *ListPipelineVersionsRequest, opts ...grpc.CallOption) (*ListPipelineVersionsResponse, error)
	// Deletes a pipeline version by pipeline version ID. If the deleted pipeline
	// version is the default pipeline version, the pipeline's default version
	// changes to the pipeline's most recent pipeline version. If there are no
	// remaining pipeline versions, the pipeline will have no default version.
	// Examines the run_service_api.ipynb notebook to learn more about creating a
	// run using a pipeline version (https://github.com/kubeflow/pipelines/blob/master/tools/benchmarks/run_service_api.ipynb).
	DeletePipelineVersionV1(ctx context.Context, in *DeletePipelineVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns a YAML template that contains the specified pipeline version's description, parameters and metadata.
	GetPipelineVersionTemplate(ctx context.Context, in *GetPipelineVersionTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// Update the default pipeline version of a specific pipeline.
	UpdatePipelineDefaultVersionV1(ctx context.Context, in *UpdatePipelineDefaultVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineServiceClient(cc grpc.ClientConnInterface) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) CreatePipelineV1(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, PipelineService_CreatePipelineV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineV1(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, PipelineService_GetPipelineV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineByNameV1(ctx context.Context, in *GetPipelineByNameRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, PipelineService_GetPipelineByNameV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ListPipelinesV1(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelineService_ListPipelinesV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) DeletePipelineV1(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PipelineService_DeletePipelineV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) CreatePipelineVersionV1(ctx context.Context, in *CreatePipelineVersionRequest, opts ...grpc.CallOption) (*PipelineVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PipelineVersion)
	err := c.cc.Invoke(ctx, PipelineService_CreatePipelineVersionV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineVersionV1(ctx context.Context, in *GetPipelineVersionRequest, opts ...grpc.CallOption) (*PipelineVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PipelineVersion)
	err := c.cc.Invoke(ctx, PipelineService_GetPipelineVersionV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ListPipelineVersionsV1(ctx context.Context, in *ListPipelineVersionsRequest, opts ...grpc.CallOption) (*ListPipelineVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPipelineVersionsResponse)
	err := c.cc.Invoke(ctx, PipelineService_ListPipelineVersionsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) DeletePipelineVersionV1(ctx context.Context, in *DeletePipelineVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PipelineService_DeletePipelineVersionV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineVersionTemplate(ctx context.Context, in *GetPipelineVersionTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetPipelineVersionTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) UpdatePipelineDefaultVersionV1(ctx context.Context, in *UpdatePipelineDefaultVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PipelineService_UpdatePipelineDefaultVersionV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
// All implementations must embed UnimplementedPipelineServiceServer
// for forward compatibility.
type PipelineServiceServer interface {
	// Creates a pipeline.
	CreatePipelineV1(context.Context, *CreatePipelineRequest) (*Pipeline, error)
	// Finds a specific pipeline by ID.
	GetPipelineV1(context.Context, *GetPipelineRequest) (*Pipeline, error)
	// Finds a pipeline by Name (and namespace)
	GetPipelineByNameV1(context.Context, *GetPipelineByNameRequest) (*Pipeline, error)
	// Finds all pipelines.
	ListPipelinesV1(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error)
	// Deletes a pipeline and its pipeline versions.
	DeletePipelineV1(context.Context, *DeletePipelineRequest) (*emptypb.Empty, error)
	// Returns a single YAML template that contains the description, parameters, and metadata associated with the pipeline provided.
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	// Adds a pipeline version to the specified pipeline.
	CreatePipelineVersionV1(context.Context, *CreatePipelineVersionRequest) (*PipelineVersion, error)
	// Gets a pipeline version by pipeline version ID.
	GetPipelineVersionV1(context.Context, *GetPipelineVersionRequest) (*PipelineVersion, error)
	// Lists all pipeline versions of a given pipeline.
	ListPipelineVersionsV1(context.Context, *ListPipelineVersionsRequest) (*ListPipelineVersionsResponse, error)
	// Deletes a pipeline version by pipeline version ID. If the deleted pipeline
	// version is the default pipeline version, the pipeline's default version
	// changes to the pipeline's most recent pipeline version. If there are no
	// remaining pipeline versions, the pipeline will have no default version.
	// Examines the run_service_api.ipynb notebook to learn more about creating a
	// run using a pipeline version (https://github.com/kubeflow/pipelines/blob/master/tools/benchmarks/run_service_api.ipynb).
	DeletePipelineVersionV1(context.Context, *DeletePipelineVersionRequest) (*emptypb.Empty, error)
	// Returns a YAML template that contains the specified pipeline version's description, parameters and metadata.
	GetPipelineVersionTemplate(context.Context, *GetPipelineVersionTemplateRequest) (*GetTemplateResponse, error)
	// Update the default pipeline version of a specific pipeline.
	UpdatePipelineDefaultVersionV1(context.Context, *UpdatePipelineDefaultVersionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPipelineServiceServer()
}

// UnimplementedPipelineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPipelineServiceServer struct{}

func (UnimplementedPipelineServiceServer) CreatePipelineV1(context.Context, *CreatePipelineRequest) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipelineV1 not implemented")
}
func (UnimplementedPipelineServiceServer) GetPipelineV1(context.Context, *GetPipelineRequest) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineV1 not implemented")
}
func (UnimplementedPipelineServiceServer) GetPipelineByNameV1(context.Context, *GetPipelineByNameRequest) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineByNameV1 not implemented")
}
func (UnimplementedPipelineServiceServer) ListPipelinesV1(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelinesV1 not implemented")
}
func (UnimplementedPipelineServiceServer) DeletePipelineV1(context.Context, *DeletePipelineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineV1 not implemented")
}
func (UnimplementedPipelineServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedPipelineServiceServer) CreatePipelineVersionV1(context.Context, *CreatePipelineVersionRequest) (*PipelineVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipelineVersionV1 not implemented")
}
func (UnimplementedPipelineServiceServer) GetPipelineVersionV1(context.Context, *GetPipelineVersionRequest) (*PipelineVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineVersionV1 not implemented")
}
func (UnimplementedPipelineServiceServer) ListPipelineVersionsV1(context.Context, *ListPipelineVersionsRequest) (*ListPipelineVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineVersionsV1 not implemented")
}
func (UnimplementedPipelineServiceServer) DeletePipelineVersionV1(context.Context, *DeletePipelineVersionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineVersionV1 not implemented")
}
func (UnimplementedPipelineServiceServer) GetPipelineVersionTemplate(context.Context, *GetPipelineVersionTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineVersionTemplate not implemented")
}
func (UnimplementedPipelineServiceServer) UpdatePipelineDefaultVersionV1(context.Context, *UpdatePipelineDefaultVersionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipelineDefaultVersionV1 not implemented")
}
func (UnimplementedPipelineServiceServer) mustEmbedUnimplementedPipelineServiceServer() {}
func (UnimplementedPipelineServiceServer) testEmbeddedByValue()                         {}

// UnsafePipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineServiceServer will
// result in compilation errors.
type UnsafePipelineServiceServer interface {
	mustEmbedUnimplementedPipelineServiceServer()
}

func RegisterPipelineServiceServer(s grpc.ServiceRegistrar, srv PipelineServiceServer) {
	// If the following call pancis, it indicates UnimplementedPipelineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PipelineService_ServiceDesc, srv)
}

func _PipelineService_CreatePipelineV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).CreatePipelineV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_CreatePipelineV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).CreatePipelineV1(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetPipelineV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineV1(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineByNameV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineByNameV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetPipelineByNameV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineByNameV1(ctx, req.(*GetPipelineByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ListPipelinesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ListPipelinesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_ListPipelinesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ListPipelinesV1(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_DeletePipelineV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).DeletePipelineV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_DeletePipelineV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).DeletePipelineV1(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_CreatePipelineVersionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).CreatePipelineVersionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_CreatePipelineVersionV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).CreatePipelineVersionV1(ctx, req.(*CreatePipelineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineVersionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineVersionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetPipelineVersionV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineVersionV1(ctx, req.(*GetPipelineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ListPipelineVersionsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ListPipelineVersionsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_ListPipelineVersionsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ListPipelineVersionsV1(ctx, req.(*ListPipelineVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_DeletePipelineVersionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).DeletePipelineVersionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_DeletePipelineVersionV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).DeletePipelineVersionV1(ctx, req.(*DeletePipelineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineVersionTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineVersionTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineVersionTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetPipelineVersionTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineVersionTemplate(ctx, req.(*GetPipelineVersionTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_UpdatePipelineDefaultVersionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineDefaultVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).UpdatePipelineDefaultVersionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_UpdatePipelineDefaultVersionV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).UpdatePipelineDefaultVersionV1(ctx, req.(*UpdatePipelineDefaultVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelineService_ServiceDesc is the grpc.ServiceDesc for PipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePipelineV1",
			Handler:    _PipelineService_CreatePipelineV1_Handler,
		},
		{
			MethodName: "GetPipelineV1",
			Handler:    _PipelineService_GetPipelineV1_Handler,
		},
		{
			MethodName: "GetPipelineByNameV1",
			Handler:    _PipelineService_GetPipelineByNameV1_Handler,
		},
		{
			MethodName: "ListPipelinesV1",
			Handler:    _PipelineService_ListPipelinesV1_Handler,
		},
		{
			MethodName: "DeletePipelineV1",
			Handler:    _PipelineService_DeletePipelineV1_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _PipelineService_GetTemplate_Handler,
		},
		{
			MethodName: "CreatePipelineVersionV1",
			Handler:    _PipelineService_CreatePipelineVersionV1_Handler,
		},
		{
			MethodName: "GetPipelineVersionV1",
			Handler:    _PipelineService_GetPipelineVersionV1_Handler,
		},
		{
			MethodName: "ListPipelineVersionsV1",
			Handler:    _PipelineService_ListPipelineVersionsV1_Handler,
		},
		{
			MethodName: "DeletePipelineVersionV1",
			Handler:    _PipelineService_DeletePipelineVersionV1_Handler,
		},
		{
			MethodName: "GetPipelineVersionTemplate",
			Handler:    _PipelineService_GetPipelineVersionTemplate_Handler,
		},
		{
			MethodName: "UpdatePipelineDefaultVersionV1",
			Handler:    _PipelineService_UpdatePipelineDefaultVersionV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/api/v1beta1/pipeline.proto",
}
