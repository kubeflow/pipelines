// Code generated by go-swagger; DO NOT EDIT.

package pipeline_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kubeflow/pipelines/backend/api/v1beta1/go_http_client/pipeline_model"
)

// PipelineServiceDeletePipelineV1Reader is a Reader for the PipelineServiceDeletePipelineV1 structure.
type PipelineServiceDeletePipelineV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PipelineServiceDeletePipelineV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPipelineServiceDeletePipelineV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPipelineServiceDeletePipelineV1Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPipelineServiceDeletePipelineV1OK creates a PipelineServiceDeletePipelineV1OK with default headers values
func NewPipelineServiceDeletePipelineV1OK() *PipelineServiceDeletePipelineV1OK {
	return &PipelineServiceDeletePipelineV1OK{}
}

/*
PipelineServiceDeletePipelineV1OK describes a response with status code 200, with default header values.

A successful response.
*/
type PipelineServiceDeletePipelineV1OK struct {
	Payload interface{}
}

// IsSuccess returns true when this pipeline service delete pipeline v1 o k response has a 2xx status code
func (o *PipelineServiceDeletePipelineV1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pipeline service delete pipeline v1 o k response has a 3xx status code
func (o *PipelineServiceDeletePipelineV1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline service delete pipeline v1 o k response has a 4xx status code
func (o *PipelineServiceDeletePipelineV1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pipeline service delete pipeline v1 o k response has a 5xx status code
func (o *PipelineServiceDeletePipelineV1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline service delete pipeline v1 o k response a status code equal to that given
func (o *PipelineServiceDeletePipelineV1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pipeline service delete pipeline v1 o k response
func (o *PipelineServiceDeletePipelineV1OK) Code() int {
	return 200
}

func (o *PipelineServiceDeletePipelineV1OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /apis/v1beta1/pipelines/{id}][%d] pipelineServiceDeletePipelineV1OK %s", 200, payload)
}

func (o *PipelineServiceDeletePipelineV1OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /apis/v1beta1/pipelines/{id}][%d] pipelineServiceDeletePipelineV1OK %s", 200, payload)
}

func (o *PipelineServiceDeletePipelineV1OK) GetPayload() interface{} {
	return o.Payload
}

func (o *PipelineServiceDeletePipelineV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineServiceDeletePipelineV1Default creates a PipelineServiceDeletePipelineV1Default with default headers values
func NewPipelineServiceDeletePipelineV1Default(code int) *PipelineServiceDeletePipelineV1Default {
	return &PipelineServiceDeletePipelineV1Default{
		_statusCode: code,
	}
}

/*
PipelineServiceDeletePipelineV1Default describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PipelineServiceDeletePipelineV1Default struct {
	_statusCode int

	Payload *pipeline_model.GooglerpcStatus
}

// IsSuccess returns true when this pipeline service delete pipeline v1 default response has a 2xx status code
func (o *PipelineServiceDeletePipelineV1Default) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this pipeline service delete pipeline v1 default response has a 3xx status code
func (o *PipelineServiceDeletePipelineV1Default) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this pipeline service delete pipeline v1 default response has a 4xx status code
func (o *PipelineServiceDeletePipelineV1Default) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this pipeline service delete pipeline v1 default response has a 5xx status code
func (o *PipelineServiceDeletePipelineV1Default) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this pipeline service delete pipeline v1 default response a status code equal to that given
func (o *PipelineServiceDeletePipelineV1Default) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the pipeline service delete pipeline v1 default response
func (o *PipelineServiceDeletePipelineV1Default) Code() int {
	return o._statusCode
}

func (o *PipelineServiceDeletePipelineV1Default) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /apis/v1beta1/pipelines/{id}][%d] PipelineService_DeletePipelineV1 default %s", o._statusCode, payload)
}

func (o *PipelineServiceDeletePipelineV1Default) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /apis/v1beta1/pipelines/{id}][%d] PipelineService_DeletePipelineV1 default %s", o._statusCode, payload)
}

func (o *PipelineServiceDeletePipelineV1Default) GetPayload() *pipeline_model.GooglerpcStatus {
	return o.Payload
}

func (o *PipelineServiceDeletePipelineV1Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pipeline_model.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
