// Code generated by go-swagger; DO NOT EDIT.

package experiment_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// V1beta1ExperimentStorageState v1beta1 experiment storage state
// swagger:model v1beta1ExperimentStorageState
type V1beta1ExperimentStorageState string

const (

	// V1beta1ExperimentStorageStateSTORAGESTATEUNSPECIFIED captures enum value "STORAGESTATE_UNSPECIFIED"
	V1beta1ExperimentStorageStateSTORAGESTATEUNSPECIFIED V1beta1ExperimentStorageState = "STORAGESTATE_UNSPECIFIED"

	// V1beta1ExperimentStorageStateSTORAGESTATEAVAILABLE captures enum value "STORAGESTATE_AVAILABLE"
	V1beta1ExperimentStorageStateSTORAGESTATEAVAILABLE V1beta1ExperimentStorageState = "STORAGESTATE_AVAILABLE"

	// V1beta1ExperimentStorageStateSTORAGESTATEARCHIVED captures enum value "STORAGESTATE_ARCHIVED"
	V1beta1ExperimentStorageStateSTORAGESTATEARCHIVED V1beta1ExperimentStorageState = "STORAGESTATE_ARCHIVED"
)

// for schema
var v1beta1ExperimentStorageStateEnum []interface{}

func init() {
	var res []V1beta1ExperimentStorageState
	if err := json.Unmarshal([]byte(`["STORAGESTATE_UNSPECIFIED","STORAGESTATE_AVAILABLE","STORAGESTATE_ARCHIVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1beta1ExperimentStorageStateEnum = append(v1beta1ExperimentStorageStateEnum, v)
	}
}

func (m V1beta1ExperimentStorageState) validateV1beta1ExperimentStorageStateEnum(path, location string, value V1beta1ExperimentStorageState) error {
	if err := validate.Enum(path, location, value, v1beta1ExperimentStorageStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1beta1 experiment storage state
func (m V1beta1ExperimentStorageState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1beta1ExperimentStorageStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
