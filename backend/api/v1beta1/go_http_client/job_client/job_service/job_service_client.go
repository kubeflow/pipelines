// Code generated by go-swagger; DO NOT EDIT.

package job_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new job service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JobServiceCreateJob creates a new job
*/
func (a *Client) JobServiceCreateJob(params *JobServiceCreateJobParams, authInfo runtime.ClientAuthInfoWriter) (*JobServiceCreateJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobServiceCreateJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobService_CreateJob",
		Method:             "POST",
		PathPattern:        "/apis/v1beta1/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JobServiceCreateJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobServiceCreateJobOK), nil

}

/*
JobServiceDeleteJob deletes a job
*/
func (a *Client) JobServiceDeleteJob(params *JobServiceDeleteJobParams, authInfo runtime.ClientAuthInfoWriter) (*JobServiceDeleteJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobServiceDeleteJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobService_DeleteJob",
		Method:             "DELETE",
		PathPattern:        "/apis/v1beta1/jobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JobServiceDeleteJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobServiceDeleteJobOK), nil

}

/*
JobServiceDisableJob stops a job and all its associated runs the job is not deleted
*/
func (a *Client) JobServiceDisableJob(params *JobServiceDisableJobParams, authInfo runtime.ClientAuthInfoWriter) (*JobServiceDisableJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobServiceDisableJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobService_DisableJob",
		Method:             "POST",
		PathPattern:        "/apis/v1beta1/jobs/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JobServiceDisableJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobServiceDisableJobOK), nil

}

/*
JobServiceEnableJob restarts a job that was previously stopped all runs associated with the job will continue
*/
func (a *Client) JobServiceEnableJob(params *JobServiceEnableJobParams, authInfo runtime.ClientAuthInfoWriter) (*JobServiceEnableJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobServiceEnableJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobService_EnableJob",
		Method:             "POST",
		PathPattern:        "/apis/v1beta1/jobs/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JobServiceEnableJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobServiceEnableJobOK), nil

}

/*
JobServiceGetJob finds a specific job by ID
*/
func (a *Client) JobServiceGetJob(params *JobServiceGetJobParams, authInfo runtime.ClientAuthInfoWriter) (*JobServiceGetJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobServiceGetJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobService_GetJob",
		Method:             "GET",
		PathPattern:        "/apis/v1beta1/jobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JobServiceGetJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobServiceGetJobOK), nil

}

/*
JobServiceListJobs finds all jobs
*/
func (a *Client) JobServiceListJobs(params *JobServiceListJobsParams, authInfo runtime.ClientAuthInfoWriter) (*JobServiceListJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobServiceListJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobService_ListJobs",
		Method:             "GET",
		PathPattern:        "/apis/v1beta1/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &JobServiceListJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobServiceListJobsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
