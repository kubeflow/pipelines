# coding: utf-8

"""
    Kubeflow Pipelines API

    This file contains REST API specification for Kubeflow Pipelines. The file is autogenerated from the swagger definition.

    Contact: kubeflow-pipelines@google.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kfp_server_api_v1beta1
from kfp_server_api_v1beta1.models.v1beta1_job import V1beta1Job  # noqa: E501
from kfp_server_api_v1beta1.rest import ApiException

class TestV1beta1Job(unittest.TestCase):
    """V1beta1Job unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1Job
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kfp_server_api_v1beta1.models.v1beta1_job.V1beta1Job()  # noqa: E501
        if include_optional :
            return V1beta1Job(
                id = '0', 
                name = '0', 
                description = '0', 
                pipeline_spec = kfp_server_api_v1beta1.models.v1beta1_pipeline_spec.v1beta1PipelineSpec(
                    pipeline_id = '0', 
                    pipeline_name = '0', 
                    workflow_manifest = '0', 
                    pipeline_manifest = '0', 
                    parameters = [
                        kfp_server_api_v1beta1.models.v1beta1_parameter.v1beta1Parameter(
                            name = '0', 
                            value = '0', )
                        ], 
                    runtime_config = kfp_server_api_v1beta1.models.pipeline_spec_runtime_config.PipelineSpecRuntimeConfig(
                        parameters = {
                            'key' : None
                            }, 
                        pipeline_root = '0', ), ), 
                resource_references = [
                    kfp_server_api_v1beta1.models.v1beta1_resource_reference.v1beta1ResourceReference(
                        key = kfp_server_api_v1beta1.models.v1beta1_resource_key.v1beta1ResourceKey(
                            type = 'UNKNOWN_RESOURCE_TYPE', 
                            id = '0', ), 
                        name = '0', 
                        relationship = 'UNKNOWN_RELATIONSHIP', )
                    ], 
                service_account = '0', 
                max_concurrency = '0', 
                trigger = kfp_server_api_v1beta1.models.v1beta1_trigger.v1beta1Trigger(
                    cron_schedule = kfp_server_api_v1beta1.models.cron_schedule_allow_scheduling_the_job_with_unix_like_cron.CronSchedule allow scheduling the job with unix-like cron(
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        cron = '0', ), 
                    periodic_schedule = kfp_server_api_v1beta1.models.periodic_schedule_allow_scheduling_the_job_periodically_with_certain_interval.PeriodicSchedule allow scheduling the job periodically with certain interval(
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        interval_second = '0', ), ), 
                mode = 'UNKNOWN_MODE', 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                status = '0', 
                error = '0', 
                enabled = True, 
                no_catchup = True
            )
        else :
            return V1beta1Job(
        )

    def testV1beta1Job(self):
        """Test V1beta1Job"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
