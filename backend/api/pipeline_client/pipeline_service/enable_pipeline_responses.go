// Code generated by go-swagger; DO NOT EDIT.

package pipeline_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	fmt "fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	pipeline_model "github.com/googleprivate/ml/backend/api/pipeline_model"
)

// EnablePipelineReader is a Reader for the EnablePipeline structure.
type EnablePipelineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnablePipelineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEnablePipelineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewEnablePipelineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEnablePipelineOK creates a EnablePipelineOK with default headers values
func NewEnablePipelineOK() *EnablePipelineOK {
	return &EnablePipelineOK{}
}

/*EnablePipelineOK handles this case with default header values.

EnablePipelineOK enable pipeline o k
*/
type EnablePipelineOK struct {
	Payload pipeline_model.ProtobufEmpty
}

func (o *EnablePipelineOK) Error() string {
	return fmt.Sprintf("[POST /apis/v1alpha2/jobs/{id}/enable][%d] enablePipelineOK  %+v", 200, o.Payload)
}

func (o *EnablePipelineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePipelineDefault creates a EnablePipelineDefault with default headers values
func NewEnablePipelineDefault(code int) *EnablePipelineDefault {
	return &EnablePipelineDefault{
		_statusCode: code,
	}
}

/*EnablePipelineDefault handles this case with default header values.

EnablePipelineDefault enable pipeline default
*/
type EnablePipelineDefault struct {
	_statusCode int

	Payload *pipeline_model.APIStatus
}

// Code gets the status code for the enable pipeline default response
func (o *EnablePipelineDefault) Code() int {
	return o._statusCode
}

func (o *EnablePipelineDefault) Error() string {
	return fmt.Sprintf("[POST /apis/v1alpha2/jobs/{id}/enable][%d] EnablePipeline default  %+v", o._statusCode, o.Payload)
}

func (o *EnablePipelineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pipeline_model.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
