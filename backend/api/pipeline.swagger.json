{
  "swagger": "2.0",
  "info": {
    "title": "pipeline.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v1alpha2/pipelines": {
      "get": {
        "operationId": "ListPipelines",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiListPipelinesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PipelineService"
        ]
      },
      "post": {
        "operationId": "CreatePipeline",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiPipeline"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPipeline"
            }
          }
        ],
        "tags": [
          "PipelineService"
        ]
      }
    },
    "/apis/v1alpha2/pipelines/{id}": {
      "get": {
        "operationId": "GetPipeline",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiPipeline"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PipelineService"
        ]
      },
      "delete": {
        "operationId": "DeletePipeline",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PipelineService"
        ]
      }
    },
    "/apis/v1alpha2/pipelines/{id}/disable": {
      "post": {
        "operationId": "DisablePipeline",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PipelineService"
        ]
      }
    },
    "/apis/v1alpha2/pipelines/{id}/enable": {
      "post": {
        "operationId": "EnablePipeline",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PipelineService"
        ]
      }
    }
  },
  "definitions": {
    "apiCronSchedule": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "cron": {
          "type": "string"
        }
      }
    },
    "apiListPipelinesResponse": {
      "type": "object",
      "properties": {
        "pipelines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPipeline"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      }
    },
    "apiParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "apiPeriodicSchedule": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "type": "string",
          "format": "date-time"
        },
        "interval_second": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiPipeline": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "package_id": {
          "type": "integer",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "status": {
          "type": "string",
          "title": "The status is surfacing the resource condition. A resource can potentially\nhave multiple conditions, although in most cases, it should be in one\nstate.\nhttps://github.com/eBay/Kubernetes/blob/master/docs/devel/api-conventions.md\nIn case of a single state, the status ends with a colon:\nSTATUS_1:\nIn case of multiple states, the statuses are separated by a colon.\nSTATUS_1:STATUS_2:"
        },
        "max_concurrency": {
          "type": "string",
          "format": "int64"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiParameter"
          }
        },
        "trigger": {
          "$ref": "#/definitions/apiTrigger"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "apiTrigger": {
      "type": "object",
      "properties": {
        "cron_schedule": {
          "$ref": "#/definitions/apiCronSchedule"
        },
        "periodic_schedule": {
          "$ref": "#/definitions/apiPeriodicSchedule"
        }
      }
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    }
  }
}
