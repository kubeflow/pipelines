// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend/api/job.proto

package go_client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Required input.
type Job_Mode int32

const (
	Job_UNKNOWN_MODE Job_Mode = 0
	Job_ENABLED      Job_Mode = 1
	// The job won't schedule any run if disabled.
	Job_DISABLED Job_Mode = 2
)

var Job_Mode_name = map[int32]string{
	0: "UNKNOWN_MODE",
	1: "ENABLED",
	2: "DISABLED",
}

var Job_Mode_value = map[string]int32{
	"UNKNOWN_MODE": 0,
	"ENABLED":      1,
	"DISABLED":     2,
}

func (x Job_Mode) String() string {
	return proto.EnumName(Job_Mode_name, int32(x))
}

func (Job_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{10, 0}
}

type CreateJobRequest struct {
	// The job to be created
	Job                  *Job     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateJobRequest) Reset()         { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()    {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{0}
}

func (m *CreateJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateJobRequest.Unmarshal(m, b)
}
func (m *CreateJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateJobRequest.Marshal(b, m, deterministic)
}
func (m *CreateJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJobRequest.Merge(m, src)
}
func (m *CreateJobRequest) XXX_Size() int {
	return xxx_messageInfo_CreateJobRequest.Size(m)
}
func (m *CreateJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJobRequest proto.InternalMessageInfo

func (m *CreateJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type GetJobRequest struct {
	// The ID of the job to be retrieved
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJobRequest) Reset()         { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()    {}
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{1}
}

func (m *GetJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobRequest.Unmarshal(m, b)
}
func (m *GetJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobRequest.Marshal(b, m, deterministic)
}
func (m *GetJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobRequest.Merge(m, src)
}
func (m *GetJobRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobRequest.Size(m)
}
func (m *GetJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobRequest proto.InternalMessageInfo

func (m *GetJobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListJobsRequest struct {
	// A page token to request the next page of results. The token is acquried
	// from the nextPageToken field of the response from the previous
	// ListJobs call or can be omitted when fetching the first page.
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The number of jobs to be listed per page. If there are more jobs than this
	// number, the response message will contain a nextPageToken field you can use
	// to fetch the next page.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Can be format of "field_name", "field_name asc" or "field_name desc".
	// Ascending by default.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// What resource reference to filter on.
	// E.g. If listing job for an experiment, the query string would be
	// resource_reference_key.type=EXPERIMENT&resource_reference_key.id=123
	ResourceReferenceKey *ResourceKey `protobuf:"bytes,4,opt,name=resource_reference_key,json=resourceReferenceKey,proto3" json:"resource_reference_key,omitempty"`
	// A url-encoded, JSON-serialized Filter protocol buffer (see
	// [filter.proto](https://github.com/kubeflow/pipelines/
	// blob/master/backend/api/filter.proto)).
	Filter               string   `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobsRequest) Reset()         { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()    {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{2}
}

func (m *ListJobsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobsRequest.Unmarshal(m, b)
}
func (m *ListJobsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobsRequest.Marshal(b, m, deterministic)
}
func (m *ListJobsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsRequest.Merge(m, src)
}
func (m *ListJobsRequest) XXX_Size() int {
	return xxx_messageInfo_ListJobsRequest.Size(m)
}
func (m *ListJobsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsRequest proto.InternalMessageInfo

func (m *ListJobsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListJobsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListJobsRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *ListJobsRequest) GetResourceReferenceKey() *ResourceKey {
	if m != nil {
		return m.ResourceReferenceKey
	}
	return nil
}

func (m *ListJobsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListJobsResponse struct {
	// A list of jobs returned.
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	// The total number of jobs for the given query.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// The token to list the next page of jobs.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListJobsResponse) Reset()         { *m = ListJobsResponse{} }
func (m *ListJobsResponse) String() string { return proto.CompactTextString(m) }
func (*ListJobsResponse) ProtoMessage()    {}
func (*ListJobsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{3}
}

func (m *ListJobsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListJobsResponse.Unmarshal(m, b)
}
func (m *ListJobsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListJobsResponse.Marshal(b, m, deterministic)
}
func (m *ListJobsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListJobsResponse.Merge(m, src)
}
func (m *ListJobsResponse) XXX_Size() int {
	return xxx_messageInfo_ListJobsResponse.Size(m)
}
func (m *ListJobsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListJobsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListJobsResponse proto.InternalMessageInfo

func (m *ListJobsResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *ListJobsResponse) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *ListJobsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteJobRequest struct {
	// The ID of the job to be deleted
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteJobRequest) Reset()         { *m = DeleteJobRequest{} }
func (m *DeleteJobRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteJobRequest) ProtoMessage()    {}
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{4}
}

func (m *DeleteJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteJobRequest.Unmarshal(m, b)
}
func (m *DeleteJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteJobRequest.Marshal(b, m, deterministic)
}
func (m *DeleteJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteJobRequest.Merge(m, src)
}
func (m *DeleteJobRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteJobRequest.Size(m)
}
func (m *DeleteJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteJobRequest proto.InternalMessageInfo

func (m *DeleteJobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EnableJobRequest struct {
	// The ID of the job to be enabled
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableJobRequest) Reset()         { *m = EnableJobRequest{} }
func (m *EnableJobRequest) String() string { return proto.CompactTextString(m) }
func (*EnableJobRequest) ProtoMessage()    {}
func (*EnableJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{5}
}

func (m *EnableJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableJobRequest.Unmarshal(m, b)
}
func (m *EnableJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableJobRequest.Marshal(b, m, deterministic)
}
func (m *EnableJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableJobRequest.Merge(m, src)
}
func (m *EnableJobRequest) XXX_Size() int {
	return xxx_messageInfo_EnableJobRequest.Size(m)
}
func (m *EnableJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableJobRequest proto.InternalMessageInfo

func (m *EnableJobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DisableJobRequest struct {
	// The ID of the job to be disabled
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableJobRequest) Reset()         { *m = DisableJobRequest{} }
func (m *DisableJobRequest) String() string { return proto.CompactTextString(m) }
func (*DisableJobRequest) ProtoMessage()    {}
func (*DisableJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{6}
}

func (m *DisableJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableJobRequest.Unmarshal(m, b)
}
func (m *DisableJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableJobRequest.Marshal(b, m, deterministic)
}
func (m *DisableJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableJobRequest.Merge(m, src)
}
func (m *DisableJobRequest) XXX_Size() int {
	return xxx_messageInfo_DisableJobRequest.Size(m)
}
func (m *DisableJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableJobRequest proto.InternalMessageInfo

func (m *DisableJobRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// CronSchedule allow scheduling the job with unix-like cron
type CronSchedule struct {
	// The start time of the cron job
	StartTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the cron job
	EndTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The cron string. For details how to compose a cron, visit
	// ttps://en.wikipedia.org/wiki/Cron
	Cron                 string   `protobuf:"bytes,3,opt,name=cron,proto3" json:"cron,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronSchedule) Reset()         { *m = CronSchedule{} }
func (m *CronSchedule) String() string { return proto.CompactTextString(m) }
func (*CronSchedule) ProtoMessage()    {}
func (*CronSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{7}
}

func (m *CronSchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronSchedule.Unmarshal(m, b)
}
func (m *CronSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronSchedule.Marshal(b, m, deterministic)
}
func (m *CronSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronSchedule.Merge(m, src)
}
func (m *CronSchedule) XXX_Size() int {
	return xxx_messageInfo_CronSchedule.Size(m)
}
func (m *CronSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_CronSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_CronSchedule proto.InternalMessageInfo

func (m *CronSchedule) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *CronSchedule) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *CronSchedule) GetCron() string {
	if m != nil {
		return m.Cron
	}
	return ""
}

// PeriodicSchedule allow scheduling the job periodically with certain interval
type PeriodicSchedule struct {
	// The start time of the periodic job
	StartTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the periodic job
	EndTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The time interval between the starting time of consecutive jobs
	IntervalSecond       int64    `protobuf:"varint,3,opt,name=interval_second,json=intervalSecond,proto3" json:"interval_second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeriodicSchedule) Reset()         { *m = PeriodicSchedule{} }
func (m *PeriodicSchedule) String() string { return proto.CompactTextString(m) }
func (*PeriodicSchedule) ProtoMessage()    {}
func (*PeriodicSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{8}
}

func (m *PeriodicSchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicSchedule.Unmarshal(m, b)
}
func (m *PeriodicSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicSchedule.Marshal(b, m, deterministic)
}
func (m *PeriodicSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicSchedule.Merge(m, src)
}
func (m *PeriodicSchedule) XXX_Size() int {
	return xxx_messageInfo_PeriodicSchedule.Size(m)
}
func (m *PeriodicSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicSchedule proto.InternalMessageInfo

func (m *PeriodicSchedule) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *PeriodicSchedule) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *PeriodicSchedule) GetIntervalSecond() int64 {
	if m != nil {
		return m.IntervalSecond
	}
	return 0
}

// Trigger defines what starts a pipeline run.
type Trigger struct {
	// Types that are valid to be assigned to Trigger:
	//	*Trigger_CronSchedule
	//	*Trigger_PeriodicSchedule
	Trigger              isTrigger_Trigger `protobuf_oneof:"trigger"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{9}
}

func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trigger.Unmarshal(m, b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return xxx_messageInfo_Trigger.Size(m)
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

type isTrigger_Trigger interface {
	isTrigger_Trigger()
}

type Trigger_CronSchedule struct {
	CronSchedule *CronSchedule `protobuf:"bytes,1,opt,name=cron_schedule,json=cronSchedule,proto3,oneof"`
}

type Trigger_PeriodicSchedule struct {
	PeriodicSchedule *PeriodicSchedule `protobuf:"bytes,2,opt,name=periodic_schedule,json=periodicSchedule,proto3,oneof"`
}

func (*Trigger_CronSchedule) isTrigger_Trigger() {}

func (*Trigger_PeriodicSchedule) isTrigger_Trigger() {}

func (m *Trigger) GetTrigger() isTrigger_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *Trigger) GetCronSchedule() *CronSchedule {
	if x, ok := m.GetTrigger().(*Trigger_CronSchedule); ok {
		return x.CronSchedule
	}
	return nil
}

func (m *Trigger) GetPeriodicSchedule() *PeriodicSchedule {
	if x, ok := m.GetTrigger().(*Trigger_PeriodicSchedule); ok {
		return x.PeriodicSchedule
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Trigger) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Trigger_CronSchedule)(nil),
		(*Trigger_PeriodicSchedule)(nil),
	}
}

type Job struct {
	// Output. Unique run ID. Generated by API server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required input field. Job name provided by user. Not unique.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional input field. Describing the purpose of the job
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Required input field.
	// Describing what the pipeline manifest and parameters to use
	// for the scheduled job.
	PipelineSpec *PipelineSpec `protobuf:"bytes,4,opt,name=pipeline_spec,json=pipelineSpec,proto3" json:"pipeline_spec,omitempty"`
	// Optional input field. Specify which resource this job belongs to.
	ResourceReferences []*ResourceReference `protobuf:"bytes,5,rep,name=resource_references,json=resourceReferences,proto3" json:"resource_references,omitempty"`
	// Optional input field. Specify which Kubernetes service account this job uses.
	ServiceAccount string `protobuf:"bytes,18,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Required input field.
	// Specify how many runs can be executed concurrently. Rage [1-10]
	MaxConcurrency int64 `protobuf:"varint,6,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	// Required input field.
	// Specify how a run is triggered. Support cron mode or periodic mode.
	Trigger *Trigger `protobuf:"bytes,7,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Mode    Job_Mode `protobuf:"varint,8,opt,name=mode,proto3,enum=api.Job_Mode" json:"mode,omitempty"`
	// Output. The time this job is created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output. The last time this job is updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Output. The status of the job.
	// One of [Enable, Disable, Error]
	Status string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// In case any error happens retrieving a job field, only job ID
	// and the error message is returned. Client has the flexibility of choosing
	// how to handle error. This is especially useful during listing call.
	Error string `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
	// Input. Whether the job is enabled or not.
	Enabled bool `protobuf:"varint,16,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Optional input field. Whether the job should catch up if behind schedule.
	// If true, the job will only schedule the latest interval if behind schedule.
	// If false, the job will catch up on each past interval.
	NoCatchup            bool     `protobuf:"varint,17,opt,name=no_catchup,json=noCatchup,proto3" json:"no_catchup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_03bbe6c301716cc7, []int{10}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Job) GetPipelineSpec() *PipelineSpec {
	if m != nil {
		return m.PipelineSpec
	}
	return nil
}

func (m *Job) GetResourceReferences() []*ResourceReference {
	if m != nil {
		return m.ResourceReferences
	}
	return nil
}

func (m *Job) GetServiceAccount() string {
	if m != nil {
		return m.ServiceAccount
	}
	return ""
}

func (m *Job) GetMaxConcurrency() int64 {
	if m != nil {
		return m.MaxConcurrency
	}
	return 0
}

func (m *Job) GetTrigger() *Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *Job) GetMode() Job_Mode {
	if m != nil {
		return m.Mode
	}
	return Job_UNKNOWN_MODE
}

func (m *Job) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Job) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Job) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Job) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Job) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Job) GetNoCatchup() bool {
	if m != nil {
		return m.NoCatchup
	}
	return false
}

func init() {
	proto.RegisterEnum("api.Job_Mode", Job_Mode_name, Job_Mode_value)
	proto.RegisterType((*CreateJobRequest)(nil), "api.CreateJobRequest")
	proto.RegisterType((*GetJobRequest)(nil), "api.GetJobRequest")
	proto.RegisterType((*ListJobsRequest)(nil), "api.ListJobsRequest")
	proto.RegisterType((*ListJobsResponse)(nil), "api.ListJobsResponse")
	proto.RegisterType((*DeleteJobRequest)(nil), "api.DeleteJobRequest")
	proto.RegisterType((*EnableJobRequest)(nil), "api.EnableJobRequest")
	proto.RegisterType((*DisableJobRequest)(nil), "api.DisableJobRequest")
	proto.RegisterType((*CronSchedule)(nil), "api.CronSchedule")
	proto.RegisterType((*PeriodicSchedule)(nil), "api.PeriodicSchedule")
	proto.RegisterType((*Trigger)(nil), "api.Trigger")
	proto.RegisterType((*Job)(nil), "api.Job")
}

func init() { proto.RegisterFile("backend/api/job.proto", fileDescriptor_03bbe6c301716cc7) }

var fileDescriptor_03bbe6c301716cc7 = []byte{
	// 1147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0x8f, 0x3f, 0x12, 0xdb, 0x27, 0x76, 0xe2, 0x4c, 0x93, 0x74, 0xff, 0x6e, 0xfb, 0x8f, 0xbb,
	0xa0, 0x36, 0x42, 0xd4, 0x56, 0x5b, 0x81, 0x80, 0xbb, 0x24, 0x0e, 0x2d, 0x6d, 0x93, 0x56, 0xeb,
	0x22, 0xa4, 0x72, 0xb1, 0x9a, 0xdd, 0x3d, 0x71, 0xa6, 0xb1, 0x77, 0x96, 0x99, 0xd9, 0xb6, 0x0e,
	0xe2, 0x06, 0x89, 0x17, 0x00, 0x5e, 0x80, 0x07, 0xe0, 0x35, 0x78, 0x01, 0x5e, 0x81, 0xb7, 0xe0,
	0x06, 0xcd, 0xec, 0xac, 0xe3, 0x8f, 0x86, 0x5c, 0x72, 0x65, 0x9f, 0xdf, 0xfc, 0xce, 0xcc, 0xf9,
	0x3e, 0x0b, 0x5b, 0x01, 0x0d, 0xcf, 0x30, 0x8e, 0xba, 0x34, 0x61, 0xdd, 0xd7, 0x3c, 0xe8, 0x24,
	0x82, 0x2b, 0x4e, 0x4a, 0x34, 0x61, 0xad, 0x9b, 0x03, 0xce, 0x07, 0x43, 0x34, 0x47, 0x34, 0x8e,
	0xb9, 0xa2, 0x8a, 0xf1, 0x58, 0x66, 0x94, 0xd6, 0x8e, 0x3d, 0x35, 0x52, 0x90, 0x9e, 0x74, 0x15,
	0x1b, 0xa1, 0x54, 0x74, 0x94, 0x58, 0xc2, 0x8d, 0x79, 0x02, 0x8e, 0x12, 0x35, 0xce, 0xb5, 0xa7,
	0xdf, 0x4d, 0x58, 0x82, 0x43, 0x16, 0xa3, 0x2f, 0x13, 0x0c, 0x2d, 0xe1, 0xc3, 0x69, 0x82, 0x40,
	0xc9, 0x53, 0x11, 0xa2, 0x2f, 0xf0, 0x04, 0x05, 0xc6, 0x21, 0x5a, 0xd6, 0xc7, 0xe6, 0x27, 0xbc,
	0x37, 0xc0, 0xf8, 0x9e, 0x7c, 0x4b, 0x07, 0x03, 0x14, 0x5d, 0x9e, 0x18, 0x33, 0xdf, 0x63, 0xf2,
	0xf5, 0xe9, 0x3b, 0x51, 0x08, 0x2e, 0xb2, 0x03, 0xb7, 0x03, 0xcd, 0x03, 0x81, 0x54, 0xe1, 0x13,
	0x1e, 0x78, 0xf8, 0x5d, 0x8a, 0x52, 0x91, 0x16, 0x94, 0x5e, 0xf3, 0xc0, 0x29, 0xb4, 0x0b, 0xbb,
	0xab, 0x0f, 0xaa, 0x1d, 0x9a, 0xb0, 0x8e, 0x3e, 0xd5, 0xa0, 0xbb, 0x03, 0x8d, 0x47, 0xa8, 0xa6,
	0xc8, 0x6b, 0x50, 0x64, 0x91, 0xe1, 0xd6, 0xbc, 0x22, 0x8b, 0xdc, 0x3f, 0x0a, 0xb0, 0xfe, 0x8c,
	0x49, 0x4d, 0x91, 0x39, 0xe7, 0x16, 0x40, 0x42, 0x07, 0xe8, 0x2b, 0x7e, 0x86, 0xb1, 0xe5, 0xd6,
	0x34, 0xf2, 0x52, 0x03, 0xe4, 0x06, 0x18, 0xc1, 0x97, 0xec, 0x1c, 0x9d, 0x62, 0xbb, 0xb0, 0xbb,
	0xec, 0x55, 0x35, 0xd0, 0x67, 0xe7, 0x48, 0xae, 0x43, 0x45, 0x72, 0xa1, 0xfc, 0x60, 0xec, 0x94,
	0x8c, 0xe2, 0x8a, 0x16, 0xf7, 0xc7, 0xe4, 0x4b, 0xd8, 0x5e, 0x0c, 0x8e, 0x7f, 0x86, 0x63, 0xa7,
	0x6c, 0x0c, 0x6f, 0x1a, 0xc3, 0x3d, 0x4b, 0x79, 0x8a, 0x63, 0x6f, 0x33, 0xe7, 0x7b, 0x39, 0xfd,
	0x29, 0x8e, 0xc9, 0x36, 0xac, 0x9c, 0xb0, 0xa1, 0x42, 0xe1, 0x2c, 0x67, 0xf7, 0x67, 0x92, 0xfb,
	0x16, 0x9a, 0x17, 0x7e, 0xc8, 0x84, 0xc7, 0x12, 0xc9, 0x4d, 0x28, 0xbf, 0xe6, 0x81, 0x74, 0x0a,
	0xed, 0xd2, 0x4c, 0x68, 0x0c, 0xaa, 0xdd, 0x54, 0x5c, 0xd1, 0x61, 0xe6, 0x48, 0xc9, 0x38, 0x52,
	0x33, 0x88, 0xf1, 0xe4, 0x0e, 0xac, 0xc7, 0xf8, 0x4e, 0xf9, 0x53, 0xa1, 0x28, 0x9a, 0x17, 0x1b,
	0x1a, 0x7e, 0x91, 0x87, 0xc3, 0x75, 0xa1, 0xd9, 0xc3, 0x21, 0xce, 0xa4, 0x64, 0x3e, 0xca, 0x2e,
	0x34, 0x0f, 0x63, 0x1a, 0x0c, 0xff, 0x8d, 0xf3, 0x01, 0x6c, 0xf4, 0x98, 0xbc, 0x82, 0xf4, 0x6b,
	0x01, 0xea, 0x07, 0x82, 0xc7, 0xfd, 0xf0, 0x14, 0xa3, 0x74, 0x88, 0xe4, 0x73, 0x00, 0xa9, 0xa8,
	0x50, 0xbe, 0x2e, 0x6a, 0x5b, 0x03, 0xad, 0x4e, 0x56, 0xd0, 0x9d, 0xbc, 0xa0, 0x3b, 0x2f, 0xf3,
	0x8a, 0xf7, 0x6a, 0x86, 0xad, 0x65, 0xf2, 0x09, 0x54, 0x31, 0x8e, 0x32, 0xc5, 0xe2, 0x95, 0x8a,
	0x15, 0x8c, 0x23, 0xa3, 0x46, 0xa0, 0x1c, 0x0a, 0x1e, 0xdb, 0xf4, 0x9a, 0xff, 0xee, 0xef, 0x05,
	0x68, 0xbe, 0x40, 0xc1, 0x78, 0xc4, 0xc2, 0xff, 0xd0, 0xb4, 0xbb, 0xb0, 0xce, 0x62, 0x85, 0xe2,
	0x8d, 0x4e, 0x2a, 0x86, 0x3c, 0x8e, 0x8c, 0x95, 0x25, 0x6f, 0x2d, 0x87, 0xfb, 0x06, 0xd5, 0x61,
	0xac, 0xbc, 0x14, 0x4c, 0x77, 0x21, 0xf9, 0x0c, 0x1a, 0xda, 0x07, 0x5f, 0x5a, 0xbb, 0xad, 0xa5,
	0x1b, 0xa6, 0x5a, 0xa6, 0x63, 0xfd, 0x78, 0xc9, 0xab, 0x87, 0xd3, 0xb1, 0xef, 0xc1, 0x46, 0x62,
	0x9d, 0xbe, 0xd0, 0xce, 0xcc, 0xdd, 0x32, 0xda, 0xf3, 0x21, 0x79, 0xbc, 0xe4, 0x35, 0x93, 0x39,
	0x6c, 0xbf, 0x06, 0x15, 0x95, 0x99, 0xe2, 0xfe, 0x5d, 0x86, 0xd2, 0x13, 0x1e, 0xcc, 0x67, 0x5d,
	0x87, 0x3c, 0xa6, 0x36, 0x14, 0x35, 0xcf, 0xfc, 0x27, 0x6d, 0x58, 0x8d, 0x50, 0x86, 0x82, 0x99,
	0x21, 0x62, 0xb3, 0x31, 0x0d, 0x91, 0x4f, 0xa1, 0x31, 0x33, 0xaf, 0x6c, 0xa3, 0x65, 0x8e, 0xbd,
	0xb0, 0x27, 0xfd, 0x04, 0x43, 0xaf, 0x9e, 0x4c, 0x49, 0xe4, 0x11, 0x5c, 0x5b, 0xec, 0x54, 0xe9,
	0x2c, 0x9b, 0x26, 0xda, 0x9e, 0x69, 0xd3, 0x49, 0x67, 0x7a, 0x64, 0xa1, 0x59, 0xa5, 0x4e, 0x87,
	0x44, 0xf1, 0x86, 0x85, 0xe8, 0xd3, 0x30, 0xe4, 0x69, 0xac, 0x1c, 0x62, 0xcc, 0x5c, 0xb3, 0xf0,
	0x5e, 0x86, 0x6a, 0xe2, 0x88, 0xbe, 0xf3, 0x43, 0x1e, 0x87, 0xa9, 0xd0, 0xca, 0x63, 0x67, 0x25,
	0xcb, 0xdb, 0x88, 0xbe, 0x3b, 0xb8, 0x40, 0xc9, 0x9d, 0x49, 0xac, 0x9c, 0x8a, 0x71, 0xa6, 0x6e,
	0xcc, 0xb1, 0xa9, 0xf4, 0xf2, 0x43, 0x72, 0x1b, 0xca, 0x23, 0x1e, 0xa1, 0x53, 0x6d, 0x17, 0x76,
	0xd7, 0x1e, 0x34, 0xf2, 0xc6, 0xef, 0x1c, 0xf1, 0x08, 0x3d, 0x73, 0xa4, 0xab, 0x33, 0x34, 0x93,
	0x34, 0xf2, 0xa9, 0x72, 0x6a, 0x57, 0x57, 0xa7, 0x65, 0xef, 0x29, 0xad, 0x9a, 0x26, 0x51, 0xae,
	0x0a, 0x57, 0xab, 0x5a, 0xf6, 0x9e, 0xd2, 0xd3, 0x4b, 0x2a, 0xaa, 0x52, 0xe9, 0xac, 0xda, 0xe9,
	0x68, 0x24, 0xb2, 0x09, 0xcb, 0x66, 0xcc, 0x3b, 0x75, 0x03, 0x67, 0x02, 0x71, 0xa0, 0x82, 0x66,
	0x6c, 0x44, 0x4e, 0xb3, 0x5d, 0xd8, 0xad, 0x7a, 0xb9, 0xa8, 0x67, 0x57, 0xcc, 0xfd, 0x90, 0xaa,
	0xf0, 0x34, 0x4d, 0x9c, 0x0d, 0x73, 0x58, 0x8b, 0xf9, 0x41, 0x06, 0xb8, 0x0f, 0xa1, 0xac, 0x5d,
	0x25, 0x4d, 0xa8, 0x7f, 0x7d, 0xfc, 0xf4, 0xf8, 0xf9, 0x37, 0xc7, 0xfe, 0xd1, 0xf3, 0xde, 0x61,
	0x73, 0x89, 0xac, 0x42, 0xe5, 0xf0, 0x78, 0x6f, 0xff, 0xd9, 0x61, 0xaf, 0x59, 0x20, 0x75, 0xa8,
	0xf6, 0xbe, 0xea, 0x67, 0x52, 0xf1, 0xc1, 0x6f, 0x65, 0x80, 0x27, 0x3c, 0xe8, 0x67, 0xb9, 0x21,
	0x47, 0x50, 0x9b, 0xac, 0x1a, 0xb2, 0x65, 0xbb, 0x61, 0x76, 0xf5, 0xb4, 0x26, 0x23, 0xd5, 0xdd,
	0xf9, 0xf1, 0xcf, 0xbf, 0x7e, 0x29, 0xfe, 0xcf, 0x25, 0x7a, 0x65, 0xc9, 0xee, 0x9b, 0xfb, 0x01,
	0x2a, 0x7a, 0x5f, 0x2f, 0x6a, 0xf9, 0x85, 0xde, 0x44, 0xe4, 0x11, 0xac, 0x64, 0x9b, 0x88, 0x10,
	0xa3, 0x34, 0xb3, 0x96, 0x16, 0x2f, 0x22, 0xd7, 0x17, 0x2f, 0xea, 0x7e, 0xcf, 0xa2, 0x1f, 0x48,
	0x1f, 0xaa, 0xf9, 0xa0, 0x27, 0x9b, 0x46, 0x6d, 0x6e, 0x7f, 0xb5, 0xb6, 0xe6, 0xd0, 0x6c, 0x1b,
	0xb8, 0x2d, 0x73, 0xf3, 0x26, 0x79, 0x8f, 0x89, 0x24, 0x80, 0xda, 0x64, 0x40, 0x5b, 0x67, 0xe7,
	0x07, 0x76, 0x6b, 0x7b, 0x21, 0xc5, 0x87, 0xfa, 0x3b, 0xc1, 0xbd, 0x63, 0xee, 0x6d, 0xbb, 0xff,
	0xbf, 0xc4, 0xe2, 0x6e, 0x96, 0x34, 0x82, 0x00, 0x17, 0x03, 0x9e, 0x64, 0x8d, 0xb4, 0x30, 0xf1,
	0x2f, 0x7d, 0xe5, 0xae, 0x79, 0xe5, 0xb6, 0xbb, 0x73, 0xd9, 0x2b, 0x51, 0x76, 0x15, 0xf9, 0x16,
	0x6a, 0x93, 0x7d, 0x64, 0x5d, 0x99, 0xdf, 0x4f, 0x97, 0x3e, 0x62, 0x83, 0xff, 0xd1, 0x65, 0xc1,
	0xdf, 0xff, 0xa9, 0xf0, 0xf3, 0xde, 0x91, 0x77, 0x13, 0x2a, 0x11, 0x9e, 0xd0, 0x74, 0xa8, 0xc8,
	0x06, 0x59, 0x87, 0x46, 0x6b, 0xd5, 0x3c, 0xd3, 0x37, 0xb5, 0xfc, 0x6a, 0x07, 0x6e, 0xc1, 0xca,
	0x3e, 0x52, 0x81, 0x82, 0x5c, 0xab, 0x16, 0x5b, 0x0d, 0x9a, 0xaa, 0x53, 0x2e, 0xd8, 0xb9, 0xf9,
	0xc4, 0x69, 0x17, 0x83, 0x3a, 0xc0, 0x84, 0xb0, 0xf4, 0xea, 0xe1, 0x80, 0xa9, 0xd3, 0x34, 0xe8,
	0x84, 0x7c, 0xd4, 0x3d, 0x4b, 0x03, 0x3c, 0x19, 0xf2, 0xb7, 0x93, 0x0f, 0x2d, 0xd9, 0x9d, 0xfe,
	0x12, 0x1a, 0x70, 0x3f, 0x1c, 0x32, 0x8c, 0x55, 0xb0, 0x62, 0x0c, 0x7f, 0xf8, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x68, 0xc4, 0x54, 0x3d, 0x16, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobServiceClient interface {
	// Creates a new job.
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Finds a specific job by ID.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Finds all jobs.
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// Restarts a job that was previously stopped. All runs associated with the job will continue.
	EnableJob(ctx context.Context, in *EnableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stops a job and all its associated runs. The job is not deleted.
	DisableJob(ctx context.Context, in *DisableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Deletes a job.
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type jobServiceClient struct {
	cc *grpc.ClientConn
}

func NewJobServiceClient(cc *grpc.ClientConn) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.JobService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/api.JobService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/api.JobService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) EnableJob(ctx context.Context, in *EnableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.JobService/EnableJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DisableJob(ctx context.Context, in *DisableJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.JobService/DisableJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.JobService/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
type JobServiceServer interface {
	// Creates a new job.
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	// Finds a specific job by ID.
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	// Finds all jobs.
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	// Restarts a job that was previously stopped. All runs associated with the job will continue.
	EnableJob(context.Context, *EnableJobRequest) (*empty.Empty, error)
	// Stops a job and all its associated runs. The job is not deleted.
	DisableJob(context.Context, *DisableJobRequest) (*empty.Empty, error)
	// Deletes a job.
	DeleteJob(context.Context, *DeleteJobRequest) (*empty.Empty, error)
}

// UnimplementedJobServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (*UnimplementedJobServiceServer) CreateJob(ctx context.Context, req *CreateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (*UnimplementedJobServiceServer) GetJob(ctx context.Context, req *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedJobServiceServer) ListJobs(ctx context.Context, req *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedJobServiceServer) EnableJob(ctx context.Context, req *EnableJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableJob not implemented")
}
func (*UnimplementedJobServiceServer) DisableJob(ctx context.Context, req *DisableJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableJob not implemented")
}
func (*UnimplementedJobServiceServer) DeleteJob(ctx context.Context, req *DeleteJobRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}

func RegisterJobServiceServer(s *grpc.Server, srv JobServiceServer) {
	s.RegisterService(&_JobService_serviceDesc, srv)
}

func _JobService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_EnableJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).EnableJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/EnableJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).EnableJob(ctx, req.(*EnableJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_DisableJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).DisableJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/DisableJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).DisableJob(ctx, req.(*DisableJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.JobService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobService_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobService_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _JobService_ListJobs_Handler,
		},
		{
			MethodName: "EnableJob",
			Handler:    _JobService_EnableJob_Handler,
		},
		{
			MethodName: "DisableJob",
			Handler:    _JobService_DisableJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _JobService_DeleteJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/api/job.proto",
}
