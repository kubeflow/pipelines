// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend/api/task.proto

package go_client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Task struct {
	// Output. Unique task ID. Generated by API server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required input field. The Namespace to which this pipeline task belongs.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Required input field. The PipelineName to which this pipeline task belongs.
	PipelineName string `protobuf:"bytes,3,opt,name=pipelineName,proto3" json:"pipelineName,omitempty"`
	// Required input field.The ID of the PipelineRun that the PipelineTask belongs to.
	RunId string `protobuf:"bytes,4,opt,name=runId,proto3" json:"runId,omitempty"`
	// Required input field. The ID of the MLMD execution associated with the PipelineTask.
	MlmdExecutionID string `protobuf:"bytes,5,opt,name=mlmdExecutionID,proto3" json:"mlmdExecutionID,omitempty"`
	// Required input field. The time this task is created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Optional input field. The time this task is finished.
	FinishedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Required input field.
	Fingerprint          string   `protobuf:"bytes,8,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_22216c998683df2f, []int{0}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Task) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *Task) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *Task) GetMlmdExecutionID() string {
	if m != nil {
		return m.MlmdExecutionID
	}
	return ""
}

func (m *Task) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Task) GetFinishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

func (m *Task) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

type CreateTaskRequest struct {
	Task                 *Task    `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTaskRequest) Reset()         { *m = CreateTaskRequest{} }
func (m *CreateTaskRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTaskRequest) ProtoMessage()    {}
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22216c998683df2f, []int{1}
}

func (m *CreateTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTaskRequest.Unmarshal(m, b)
}
func (m *CreateTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTaskRequest.Marshal(b, m, deterministic)
}
func (m *CreateTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTaskRequest.Merge(m, src)
}
func (m *CreateTaskRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTaskRequest.Size(m)
}
func (m *CreateTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTaskRequest proto.InternalMessageInfo

func (m *CreateTaskRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type ListTasksRequest struct {
	// A page token to request the next page of results. The token is acquried
	// from the nextPageToken field of the response from the previous
	// ListExperiment call or can be omitted when fetching the first page.
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The number of experiments to be listed per page. If there are more
	// experiments than this number, the response message will contain a
	// nextPageToken field you can use to fetch the next page.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Can be format of "field_name", "field_name asc" or "field_name desc"
	// Ascending by default.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// What resource reference to filter on.
	// E.g. If listing tasks for an pipeline run, the query string would be
	// resource_reference_key.type="PIPELINE"&resource_reference_key.id=123
	ResourceReferenceKey *ResourceKey `protobuf:"bytes,4,opt,name=resource_reference_key,json=resourceReferenceKey,proto3" json:"resource_reference_key,omitempty"`
	// A url-encoded, JSON-serialized Filter protocol buffer (see
	// [filter.proto](https://github.com/kubeflow/pipelines/
	// blob/master/backend/api/filter.proto)).
	Filter               string   `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTasksRequest) Reset()         { *m = ListTasksRequest{} }
func (m *ListTasksRequest) String() string { return proto.CompactTextString(m) }
func (*ListTasksRequest) ProtoMessage()    {}
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22216c998683df2f, []int{2}
}

func (m *ListTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTasksRequest.Unmarshal(m, b)
}
func (m *ListTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTasksRequest.Marshal(b, m, deterministic)
}
func (m *ListTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTasksRequest.Merge(m, src)
}
func (m *ListTasksRequest) XXX_Size() int {
	return xxx_messageInfo_ListTasksRequest.Size(m)
}
func (m *ListTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTasksRequest proto.InternalMessageInfo

func (m *ListTasksRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListTasksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTasksRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *ListTasksRequest) GetResourceReferenceKey() *ResourceKey {
	if m != nil {
		return m.ResourceReferenceKey
	}
	return nil
}

func (m *ListTasksRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListTasksResponse struct {
	// A list of tasks returned.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// The token to list the next page of experiments.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of experiments for the given query.
	TotalSize            int32    `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTasksResponse) Reset()         { *m = ListTasksResponse{} }
func (m *ListTasksResponse) String() string { return proto.CompactTextString(m) }
func (*ListTasksResponse) ProtoMessage()    {}
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22216c998683df2f, []int{3}
}

func (m *ListTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTasksResponse.Unmarshal(m, b)
}
func (m *ListTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTasksResponse.Marshal(b, m, deterministic)
}
func (m *ListTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTasksResponse.Merge(m, src)
}
func (m *ListTasksResponse) XXX_Size() int {
	return xxx_messageInfo_ListTasksResponse.Size(m)
}
func (m *ListTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTasksResponse proto.InternalMessageInfo

func (m *ListTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *ListTasksResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListTasksResponse) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func init() {
	proto.RegisterType((*Task)(nil), "api.Task")
	proto.RegisterType((*CreateTaskRequest)(nil), "api.CreateTaskRequest")
	proto.RegisterType((*ListTasksRequest)(nil), "api.ListTasksRequest")
	proto.RegisterType((*ListTasksResponse)(nil), "api.ListTasksResponse")
}

func init() { proto.RegisterFile("backend/api/task.proto", fileDescriptor_22216c998683df2f) }

var fileDescriptor_22216c998683df2f = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x56, 0x92, 0x26, 0xad, 0x27, 0x40, 0xdb, 0x55, 0x09, 0x56, 0x48, 0xd5, 0xc8, 0x42, 0xa8,
	0x27, 0x5b, 0x4d, 0xc5, 0x01, 0x38, 0xb5, 0xfc, 0x48, 0x55, 0x11, 0x42, 0x6e, 0x0f, 0x88, 0x8b,
	0xb5, 0x71, 0x26, 0xe9, 0x2a, 0xf6, 0xee, 0xb2, 0xbb, 0x2e, 0x4d, 0xb9, 0xf1, 0x0a, 0xbc, 0x09,
	0x67, 0xee, 0x3c, 0x00, 0xaf, 0xc0, 0x83, 0xa0, 0x5d, 0x3b, 0x4d, 0x9a, 0x22, 0x71, 0x9c, 0x6f,
	0xbe, 0x99, 0x9d, 0x6f, 0xbe, 0x1d, 0xe8, 0x0c, 0x69, 0x3a, 0x45, 0x3e, 0x8a, 0xa8, 0x64, 0x91,
	0xa1, 0x7a, 0x1a, 0x4a, 0x25, 0x8c, 0x20, 0x0d, 0x2a, 0x59, 0xb7, 0x37, 0x11, 0x62, 0x92, 0xa1,
	0xcb, 0x51, 0xce, 0x85, 0xa1, 0x86, 0x09, 0xae, 0x4b, 0x4a, 0x77, 0xaf, 0xca, 0xba, 0x68, 0x58,
	0x8c, 0x23, 0xc3, 0x72, 0xd4, 0x86, 0xe6, 0xb2, 0x22, 0x3c, 0x59, 0xee, 0xad, 0x50, 0x8b, 0x42,
	0xa5, 0x98, 0x28, 0x1c, 0xa3, 0x42, 0x9e, 0x62, 0xc9, 0x0a, 0x7e, 0xd4, 0x61, 0xed, 0x9c, 0xea,
	0x29, 0x79, 0x00, 0x75, 0x36, 0xf2, 0x6b, 0xfd, 0xda, 0xbe, 0x17, 0xd7, 0xd9, 0x88, 0xf4, 0xc0,
	0xe3, 0x34, 0x47, 0x2d, 0x69, 0x8a, 0x7e, 0xdd, 0xc1, 0x0b, 0x80, 0x04, 0x70, 0x4f, 0x32, 0x89,
	0x19, 0xe3, 0xf8, 0x9e, 0xe6, 0xe8, 0x37, 0x1c, 0xe1, 0x16, 0x46, 0x76, 0xa0, 0xa9, 0x0a, 0x7e,
	0x32, 0xf2, 0xd7, 0x5c, 0xb2, 0x0c, 0xc8, 0x3e, 0x6c, 0xe6, 0x59, 0x3e, 0x7a, 0x73, 0x85, 0x69,
	0x61, 0xf5, 0x9c, 0xbc, 0xf6, 0x9b, 0x2e, 0xbf, 0x0a, 0x93, 0xe7, 0x00, 0xa9, 0x42, 0x6a, 0x70,
	0x94, 0x50, 0xe3, 0xb7, 0xfa, 0xb5, 0xfd, 0xf6, 0xa0, 0x1b, 0x96, 0xb2, 0xc3, 0xb9, 0xec, 0xf0,
	0x7c, 0x2e, 0x3b, 0xf6, 0x2a, 0xf6, 0x91, 0x21, 0x2f, 0xa1, 0x3d, 0x66, 0x9c, 0xe9, 0x8b, 0xb2,
	0x76, 0xfd, 0xbf, 0xb5, 0x30, 0xa7, 0x1f, 0x19, 0xd2, 0x77, 0xc5, 0x13, 0x54, 0x52, 0x31, 0x6e,
	0xfc, 0x0d, 0x37, 0xdd, 0x32, 0x14, 0x0c, 0x60, 0xfb, 0x95, 0x7b, 0xcb, 0x6e, 0x2e, 0xc6, 0xcf,
	0x05, 0x6a, 0x43, 0x76, 0x61, 0xcd, 0x3a, 0xe8, 0x56, 0xd8, 0x1e, 0x78, 0x21, 0x95, 0x2c, 0x74,
	0x79, 0x07, 0x07, 0xbf, 0x6a, 0xb0, 0xf5, 0x8e, 0x69, 0x63, 0x21, 0xbd, 0xa8, 0x01, 0x49, 0x27,
	0x98, 0x18, 0x31, 0x45, 0x5e, 0x2d, 0xdf, 0xb3, 0xc8, 0xb9, 0x05, 0xc8, 0x63, 0x70, 0x41, 0xa2,
	0xd9, 0x75, 0xe9, 0x41, 0x33, 0xde, 0xb0, 0xc0, 0x19, 0xbb, 0x46, 0xf2, 0x08, 0xd6, 0xb5, 0x50,
	0x26, 0x19, 0xce, 0xaa, 0xed, 0xb7, 0x6c, 0x78, 0x3c, 0x23, 0x6f, 0xa1, 0x73, 0xd7, 0xee, 0x64,
	0x8a, 0x33, 0x67, 0x44, 0x7b, 0xb0, 0xe5, 0x46, 0x8b, 0x2b, 0xca, 0x29, 0xce, 0xe2, 0x9d, 0x39,
	0x3f, 0x9e, 0xd3, 0x4f, 0x71, 0x46, 0x3a, 0xd0, 0x1a, 0xb3, 0xcc, 0xa0, 0xaa, 0x0c, 0xaa, 0xa2,
	0xe0, 0x2b, 0x6c, 0x2f, 0x09, 0xd1, 0x52, 0x70, 0x8d, 0x64, 0x0f, 0x9a, 0x56, 0xa6, 0xf6, 0x6b,
	0xfd, 0xc6, 0x6d, 0xf9, 0x25, 0x4e, 0x9e, 0xc2, 0x26, 0xc7, 0x2b, 0x93, 0x2c, 0xe9, 0x2d, 0x7f,
	0xd5, 0x7d, 0x0b, 0x7f, 0xb8, 0xd1, 0xbc, 0x0b, 0x60, 0x84, 0xa1, 0x59, 0x29, 0xba, 0xe1, 0x44,
	0x7b, 0x0e, 0xb1, 0xaa, 0x07, 0x3f, 0x6b, 0xd0, 0xb6, 0x6d, 0xcf, 0x50, 0x5d, 0xb2, 0x14, 0xc9,
	0x19, 0xc0, 0xc2, 0x0a, 0xd2, 0x71, 0xcf, 0xde, 0xf1, 0xa6, 0xbb, 0x18, 0x27, 0x08, 0xbe, 0xfd,
	0xfe, 0xf3, 0xbd, 0xde, 0x0b, 0x76, 0xec, 0x5d, 0xe8, 0xe8, 0xf2, 0x80, 0x66, 0xf2, 0x82, 0x1e,
	0xb8, 0xeb, 0xd3, 0x2f, 0x9c, 0x57, 0xe4, 0x23, 0x78, 0x37, 0x0a, 0xc9, 0x43, 0x57, 0xbb, 0x6a,
	0x5d, 0xb7, 0xb3, 0x0a, 0x97, 0x8b, 0x08, 0x7a, 0xae, 0x7f, 0x87, 0xfc, 0xb3, 0xff, 0xf1, 0xb3,
	0x4f, 0x87, 0x13, 0x66, 0x2e, 0x8a, 0x61, 0x98, 0x8a, 0x3c, 0x9a, 0x16, 0x43, 0x1c, 0x67, 0xe2,
	0x4b, 0x34, 0xbf, 0x1b, 0x1d, 0x2d, 0x1f, 0xed, 0x44, 0x24, 0x69, 0xc6, 0x90, 0x9b, 0x61, 0xcb,
	0x7d, 0xd9, 0xc3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x17, 0x61, 0x37, 0x30, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	// Creates a new task.
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// Finds all tasks. Supports pagination, and sorting on certain fields.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/api.TaskService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, "/api.TaskService/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	// Creates a new task.
	CreateTask(context.Context, *CreateTaskRequest) (*Task, error)
	// Finds all tasks. Supports pagination, and sorting on certain fields.
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) CreateTask(ctx context.Context, req *CreateTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedTaskServiceServer) ListTasks(ctx context.Context, req *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TaskService/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskService_ListTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/api/task.proto",
}
