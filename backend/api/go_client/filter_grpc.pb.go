// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DummyFilterServiceClient is the client API for DummyFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DummyFilterServiceClient interface {
	GetFilter(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Filter, error)
}

type dummyFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDummyFilterServiceClient(cc grpc.ClientConnInterface) DummyFilterServiceClient {
	return &dummyFilterServiceClient{cc}
}

func (c *dummyFilterServiceClient) GetFilter(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Filter, error) {
	out := new(Filter)
	err := c.cc.Invoke(ctx, "/api.DummyFilterService/GetFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DummyFilterServiceServer is the server API for DummyFilterService service.
// All implementations must embed UnimplementedDummyFilterServiceServer
// for forward compatibility
type DummyFilterServiceServer interface {
	GetFilter(context.Context, *Filter) (*Filter, error)
	mustEmbedUnimplementedDummyFilterServiceServer()
}

// UnimplementedDummyFilterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDummyFilterServiceServer struct {
}

func (UnimplementedDummyFilterServiceServer) GetFilter(context.Context, *Filter) (*Filter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilter not implemented")
}
func (UnimplementedDummyFilterServiceServer) mustEmbedUnimplementedDummyFilterServiceServer() {}

// UnsafeDummyFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummyFilterServiceServer will
// result in compilation errors.
type UnsafeDummyFilterServiceServer interface {
	mustEmbedUnimplementedDummyFilterServiceServer()
}

func RegisterDummyFilterServiceServer(s grpc.ServiceRegistrar, srv DummyFilterServiceServer) {
	s.RegisterService(&DummyFilterService_ServiceDesc, srv)
}

func _DummyFilterService_GetFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyFilterServiceServer).GetFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DummyFilterService/GetFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyFilterServiceServer).GetFilter(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// DummyFilterService_ServiceDesc is the grpc.ServiceDesc for DummyFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DummyFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DummyFilterService",
	HandlerType: (*DummyFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilter",
			Handler:    _DummyFilterService_GetFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/api/filter.proto",
}
