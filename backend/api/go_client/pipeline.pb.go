// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend/api/pipeline.proto

package go_client

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Url struct {
	// URL of the pipeline definition or the pipeline version definition.
	PipelineUrl          string   `protobuf:"bytes,1,opt,name=pipeline_url,json=pipelineUrl,proto3" json:"pipeline_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Url) Reset()         { *m = Url{} }
func (m *Url) String() string { return proto.CompactTextString(m) }
func (*Url) ProtoMessage()    {}
func (*Url) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{0}
}

func (m *Url) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Url.Unmarshal(m, b)
}
func (m *Url) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Url.Marshal(b, m, deterministic)
}
func (m *Url) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Url.Merge(m, src)
}
func (m *Url) XXX_Size() int {
	return xxx_messageInfo_Url.Size(m)
}
func (m *Url) XXX_DiscardUnknown() {
	xxx_messageInfo_Url.DiscardUnknown(m)
}

var xxx_messageInfo_Url proto.InternalMessageInfo

func (m *Url) GetPipelineUrl() string {
	if m != nil {
		return m.PipelineUrl
	}
	return ""
}

// Create pipeline by providing an URL pointing to the pipeline file,
// and optionally a pipeline name. If name is not provided, file name is used as
// pipeline name by default. Maximum size of 32MB is supported.
type CreatePipelineRequest struct {
	Pipeline             *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreatePipelineRequest) Reset()         { *m = CreatePipelineRequest{} }
func (m *CreatePipelineRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePipelineRequest) ProtoMessage()    {}
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{1}
}

func (m *CreatePipelineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePipelineRequest.Unmarshal(m, b)
}
func (m *CreatePipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePipelineRequest.Marshal(b, m, deterministic)
}
func (m *CreatePipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePipelineRequest.Merge(m, src)
}
func (m *CreatePipelineRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePipelineRequest.Size(m)
}
func (m *CreatePipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePipelineRequest proto.InternalMessageInfo

func (m *CreatePipelineRequest) GetPipeline() *Pipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

type UpdatePipelineDefaultVersionRequest struct {
	// The ID of the pipeline to be updated.
	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// The ID of the default version.
	VersionId            string   `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePipelineDefaultVersionRequest) Reset()         { *m = UpdatePipelineDefaultVersionRequest{} }
func (m *UpdatePipelineDefaultVersionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePipelineDefaultVersionRequest) ProtoMessage()    {}
func (*UpdatePipelineDefaultVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{2}
}

func (m *UpdatePipelineDefaultVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePipelineDefaultVersionRequest.Unmarshal(m, b)
}
func (m *UpdatePipelineDefaultVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePipelineDefaultVersionRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePipelineDefaultVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePipelineDefaultVersionRequest.Merge(m, src)
}
func (m *UpdatePipelineDefaultVersionRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePipelineDefaultVersionRequest.Size(m)
}
func (m *UpdatePipelineDefaultVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePipelineDefaultVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePipelineDefaultVersionRequest proto.InternalMessageInfo

func (m *UpdatePipelineDefaultVersionRequest) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *UpdatePipelineDefaultVersionRequest) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type GetPipelineRequest struct {
	// The ID of the pipeline to be retrieved.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPipelineRequest) Reset()         { *m = GetPipelineRequest{} }
func (m *GetPipelineRequest) String() string { return proto.CompactTextString(m) }
func (*GetPipelineRequest) ProtoMessage()    {}
func (*GetPipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{3}
}

func (m *GetPipelineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPipelineRequest.Unmarshal(m, b)
}
func (m *GetPipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPipelineRequest.Marshal(b, m, deterministic)
}
func (m *GetPipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPipelineRequest.Merge(m, src)
}
func (m *GetPipelineRequest) XXX_Size() int {
	return xxx_messageInfo_GetPipelineRequest.Size(m)
}
func (m *GetPipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPipelineRequest proto.InternalMessageInfo

func (m *GetPipelineRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListPipelinesRequest struct {
	// A page token to request the next page of results. The token is acquried
	// from the nextPageToken field of the response from the previous
	// ListPipelines call.
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The number of pipelines to be listed per page. If there are more pipelines
	// than this number, the response message will contain a valid value in the
	// nextPageToken field.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Can be format of "field_name", "field_name asc" or "field_name desc"
	// Ascending by default.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// A url-encoded, JSON-serialized Filter protocol buffer (see
	// [filter.proto](https://github.com/kubeflow/pipelines/
	// blob/master/backend/api/filter.proto)).
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// What resource reference to filter on.
	// For Pipeline, the only valid resource type is Namespace. An sample query string could be
	// resource_reference_key.type=NAMESPACE&resource_reference_key.id=ns1
	ResourceReferenceKey *ResourceKey `protobuf:"bytes,5,opt,name=resource_reference_key,json=resourceReferenceKey,proto3" json:"resource_reference_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListPipelinesRequest) Reset()         { *m = ListPipelinesRequest{} }
func (m *ListPipelinesRequest) String() string { return proto.CompactTextString(m) }
func (*ListPipelinesRequest) ProtoMessage()    {}
func (*ListPipelinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{4}
}

func (m *ListPipelinesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPipelinesRequest.Unmarshal(m, b)
}
func (m *ListPipelinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPipelinesRequest.Marshal(b, m, deterministic)
}
func (m *ListPipelinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipelinesRequest.Merge(m, src)
}
func (m *ListPipelinesRequest) XXX_Size() int {
	return xxx_messageInfo_ListPipelinesRequest.Size(m)
}
func (m *ListPipelinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipelinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipelinesRequest proto.InternalMessageInfo

func (m *ListPipelinesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListPipelinesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPipelinesRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *ListPipelinesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListPipelinesRequest) GetResourceReferenceKey() *ResourceKey {
	if m != nil {
		return m.ResourceReferenceKey
	}
	return nil
}

type ListPipelinesResponse struct {
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// The total number of pipelines for the given query.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	// The token to list the next page of pipelines.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPipelinesResponse) Reset()         { *m = ListPipelinesResponse{} }
func (m *ListPipelinesResponse) String() string { return proto.CompactTextString(m) }
func (*ListPipelinesResponse) ProtoMessage()    {}
func (*ListPipelinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{5}
}

func (m *ListPipelinesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPipelinesResponse.Unmarshal(m, b)
}
func (m *ListPipelinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPipelinesResponse.Marshal(b, m, deterministic)
}
func (m *ListPipelinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipelinesResponse.Merge(m, src)
}
func (m *ListPipelinesResponse) XXX_Size() int {
	return xxx_messageInfo_ListPipelinesResponse.Size(m)
}
func (m *ListPipelinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipelinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipelinesResponse proto.InternalMessageInfo

func (m *ListPipelinesResponse) GetPipelines() []*Pipeline {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

func (m *ListPipelinesResponse) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *ListPipelinesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeletePipelineRequest struct {
	// The ID of the pipeline to be deleted.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePipelineRequest) Reset()         { *m = DeletePipelineRequest{} }
func (m *DeletePipelineRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePipelineRequest) ProtoMessage()    {}
func (*DeletePipelineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{6}
}

func (m *DeletePipelineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePipelineRequest.Unmarshal(m, b)
}
func (m *DeletePipelineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePipelineRequest.Marshal(b, m, deterministic)
}
func (m *DeletePipelineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePipelineRequest.Merge(m, src)
}
func (m *DeletePipelineRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePipelineRequest.Size(m)
}
func (m *DeletePipelineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePipelineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePipelineRequest proto.InternalMessageInfo

func (m *DeletePipelineRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetTemplateRequest struct {
	// The ID of the pipeline whose template is to be retrieved.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTemplateRequest) Reset()         { *m = GetTemplateRequest{} }
func (m *GetTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*GetTemplateRequest) ProtoMessage()    {}
func (*GetTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{7}
}

func (m *GetTemplateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTemplateRequest.Unmarshal(m, b)
}
func (m *GetTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTemplateRequest.Marshal(b, m, deterministic)
}
func (m *GetTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTemplateRequest.Merge(m, src)
}
func (m *GetTemplateRequest) XXX_Size() int {
	return xxx_messageInfo_GetTemplateRequest.Size(m)
}
func (m *GetTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTemplateRequest proto.InternalMessageInfo

func (m *GetTemplateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetTemplateResponse struct {
	// The template of the pipeline specified in a GetTemplate request, or of a
	// pipeline version specified in a GetPipelinesVersionTemplate request.
	Template             string   `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTemplateResponse) Reset()         { *m = GetTemplateResponse{} }
func (m *GetTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*GetTemplateResponse) ProtoMessage()    {}
func (*GetTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{8}
}

func (m *GetTemplateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTemplateResponse.Unmarshal(m, b)
}
func (m *GetTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTemplateResponse.Marshal(b, m, deterministic)
}
func (m *GetTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTemplateResponse.Merge(m, src)
}
func (m *GetTemplateResponse) XXX_Size() int {
	return xxx_messageInfo_GetTemplateResponse.Size(m)
}
func (m *GetTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTemplateResponse proto.InternalMessageInfo

func (m *GetTemplateResponse) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

type GetPipelineVersionTemplateRequest struct {
	// The ID of the pipeline version whose template is to be retrieved.
	VersionId            string   `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPipelineVersionTemplateRequest) Reset()         { *m = GetPipelineVersionTemplateRequest{} }
func (m *GetPipelineVersionTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*GetPipelineVersionTemplateRequest) ProtoMessage()    {}
func (*GetPipelineVersionTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{9}
}

func (m *GetPipelineVersionTemplateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPipelineVersionTemplateRequest.Unmarshal(m, b)
}
func (m *GetPipelineVersionTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPipelineVersionTemplateRequest.Marshal(b, m, deterministic)
}
func (m *GetPipelineVersionTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPipelineVersionTemplateRequest.Merge(m, src)
}
func (m *GetPipelineVersionTemplateRequest) XXX_Size() int {
	return xxx_messageInfo_GetPipelineVersionTemplateRequest.Size(m)
}
func (m *GetPipelineVersionTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPipelineVersionTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPipelineVersionTemplateRequest proto.InternalMessageInfo

func (m *GetPipelineVersionTemplateRequest) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type CreatePipelineVersionRequest struct {
	// ResourceReference inside PipelineVersion specifies the pipeline that this
	// version belongs to.
	Version              *PipelineVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreatePipelineVersionRequest) Reset()         { *m = CreatePipelineVersionRequest{} }
func (m *CreatePipelineVersionRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePipelineVersionRequest) ProtoMessage()    {}
func (*CreatePipelineVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{10}
}

func (m *CreatePipelineVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePipelineVersionRequest.Unmarshal(m, b)
}
func (m *CreatePipelineVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePipelineVersionRequest.Marshal(b, m, deterministic)
}
func (m *CreatePipelineVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePipelineVersionRequest.Merge(m, src)
}
func (m *CreatePipelineVersionRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePipelineVersionRequest.Size(m)
}
func (m *CreatePipelineVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePipelineVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePipelineVersionRequest proto.InternalMessageInfo

func (m *CreatePipelineVersionRequest) GetVersion() *PipelineVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

type GetPipelineVersionRequest struct {
	// The ID of the pipeline version to be retrieved.
	VersionId            string   `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPipelineVersionRequest) Reset()         { *m = GetPipelineVersionRequest{} }
func (m *GetPipelineVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPipelineVersionRequest) ProtoMessage()    {}
func (*GetPipelineVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{11}
}

func (m *GetPipelineVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPipelineVersionRequest.Unmarshal(m, b)
}
func (m *GetPipelineVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPipelineVersionRequest.Marshal(b, m, deterministic)
}
func (m *GetPipelineVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPipelineVersionRequest.Merge(m, src)
}
func (m *GetPipelineVersionRequest) XXX_Size() int {
	return xxx_messageInfo_GetPipelineVersionRequest.Size(m)
}
func (m *GetPipelineVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPipelineVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPipelineVersionRequest proto.InternalMessageInfo

func (m *GetPipelineVersionRequest) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type ListPipelineVersionsRequest struct {
	// ResourceKey specifies the pipeline whose versions are to be listed.
	ResourceKey *ResourceKey `protobuf:"bytes,1,opt,name=resource_key,json=resourceKey,proto3" json:"resource_key,omitempty"`
	// The number of pipeline versions to be listed per page. If there are more
	// pipeline versions than this number, the response message will contain a
	// nextPageToken field you can use to fetch the next page.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token to request the next page of results. The token is acquried
	// from the nextPageToken field of the response from the previous
	// ListPipelineVersions call or can be omitted when fetching the first page.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Can be format of "field_name", "field_name asc" or "field_name desc"
	// Ascending by default.
	SortBy string `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// A base-64 encoded, JSON-serialized Filter protocol buffer (see
	// filter.proto).
	Filter               string   `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPipelineVersionsRequest) Reset()         { *m = ListPipelineVersionsRequest{} }
func (m *ListPipelineVersionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPipelineVersionsRequest) ProtoMessage()    {}
func (*ListPipelineVersionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{12}
}

func (m *ListPipelineVersionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPipelineVersionsRequest.Unmarshal(m, b)
}
func (m *ListPipelineVersionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPipelineVersionsRequest.Marshal(b, m, deterministic)
}
func (m *ListPipelineVersionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipelineVersionsRequest.Merge(m, src)
}
func (m *ListPipelineVersionsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPipelineVersionsRequest.Size(m)
}
func (m *ListPipelineVersionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipelineVersionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipelineVersionsRequest proto.InternalMessageInfo

func (m *ListPipelineVersionsRequest) GetResourceKey() *ResourceKey {
	if m != nil {
		return m.ResourceKey
	}
	return nil
}

func (m *ListPipelineVersionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPipelineVersionsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListPipelineVersionsRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *ListPipelineVersionsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type ListPipelineVersionsResponse struct {
	Versions []*PipelineVersion `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	// The token to list the next page of pipeline versions.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of pipeline versions for the given query.
	TotalSize            int32    `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPipelineVersionsResponse) Reset()         { *m = ListPipelineVersionsResponse{} }
func (m *ListPipelineVersionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPipelineVersionsResponse) ProtoMessage()    {}
func (*ListPipelineVersionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{13}
}

func (m *ListPipelineVersionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPipelineVersionsResponse.Unmarshal(m, b)
}
func (m *ListPipelineVersionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPipelineVersionsResponse.Marshal(b, m, deterministic)
}
func (m *ListPipelineVersionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPipelineVersionsResponse.Merge(m, src)
}
func (m *ListPipelineVersionsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPipelineVersionsResponse.Size(m)
}
func (m *ListPipelineVersionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPipelineVersionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPipelineVersionsResponse proto.InternalMessageInfo

func (m *ListPipelineVersionsResponse) GetVersions() []*PipelineVersion {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *ListPipelineVersionsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListPipelineVersionsResponse) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

type DeletePipelineVersionRequest struct {
	// The ID of the pipeline version to be deleted.
	VersionId            string   `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePipelineVersionRequest) Reset()         { *m = DeletePipelineVersionRequest{} }
func (m *DeletePipelineVersionRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePipelineVersionRequest) ProtoMessage()    {}
func (*DeletePipelineVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{14}
}

func (m *DeletePipelineVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePipelineVersionRequest.Unmarshal(m, b)
}
func (m *DeletePipelineVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePipelineVersionRequest.Marshal(b, m, deterministic)
}
func (m *DeletePipelineVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePipelineVersionRequest.Merge(m, src)
}
func (m *DeletePipelineVersionRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePipelineVersionRequest.Size(m)
}
func (m *DeletePipelineVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePipelineVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePipelineVersionRequest proto.InternalMessageInfo

func (m *DeletePipelineVersionRequest) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type Pipeline struct {
	// Output. Unique pipeline ID. Generated by API server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output. The time this pipeline is created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Optional input field. Pipeline name provided by user. If not specified,
	// file name is used as pipeline name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional input field. Describing the purpose of the job.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output. The input parameters for this pipeline.
	// TODO(jingzhang36): replace this parameters field with the parameters field
	// inside PipelineVersion when all usage of the former has been changed to use
	// the latter.
	Parameters []*Parameter `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// The URL to the source of the pipeline. This is required when creating the
	// pipeine through CreatePipeline API.
	// TODO(jingzhang36): replace this url field with the code_source_urls field
	// inside PipelineVersion when all usage of the former has been changed to use
	// the latter.
	Url *Url `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	// In case any error happens retrieving a pipeline field, only pipeline ID
	// and the error message is returned. Client has the flexibility of choosing
	// how to handle error. This is especially useful during listing call.
	Error string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. The default version of the pipeline. As of now, the latest
	// version is used as default. (In the future, if desired by customers, we
	// can allow them to set default version.)
	DefaultVersion *PipelineVersion `protobuf:"bytes,8,opt,name=default_version,json=defaultVersion,proto3" json:"default_version,omitempty"`
	// Input field. Specify which resource this pipeline belongs to.
	// For Pipeline, the only valid resource reference is a single Namespace.
	ResourceReferences   []*ResourceReference `protobuf:"bytes,9,rep,name=resource_references,json=resourceReferences,proto3" json:"resource_references,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Pipeline) Reset()         { *m = Pipeline{} }
func (m *Pipeline) String() string { return proto.CompactTextString(m) }
func (*Pipeline) ProtoMessage()    {}
func (*Pipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{15}
}

func (m *Pipeline) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pipeline.Unmarshal(m, b)
}
func (m *Pipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pipeline.Marshal(b, m, deterministic)
}
func (m *Pipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pipeline.Merge(m, src)
}
func (m *Pipeline) XXX_Size() int {
	return xxx_messageInfo_Pipeline.Size(m)
}
func (m *Pipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_Pipeline.DiscardUnknown(m)
}

var xxx_messageInfo_Pipeline proto.InternalMessageInfo

func (m *Pipeline) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pipeline) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Pipeline) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pipeline) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Pipeline) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Pipeline) GetUrl() *Url {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *Pipeline) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Pipeline) GetDefaultVersion() *PipelineVersion {
	if m != nil {
		return m.DefaultVersion
	}
	return nil
}

func (m *Pipeline) GetResourceReferences() []*ResourceReference {
	if m != nil {
		return m.ResourceReferences
	}
	return nil
}

type PipelineVersion struct {
	// Output. Unique version ID. Generated by API server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Optional input field. Version name provided by user.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Output. The time this pipeline version is created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output. The input parameters for this pipeline.
	Parameters []*Parameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// Input. Optional. Pipeline version code source.
	CodeSourceUrl string `protobuf:"bytes,5,opt,name=code_source_url,json=codeSourceUrl,proto3" json:"code_source_url,omitempty"`
	// Input. Required. Pipeline version package url.
	// Whe calling CreatePipelineVersion API method, need to provide one package
	// file location.
	PackageUrl *Url `protobuf:"bytes,6,opt,name=package_url,json=packageUrl,proto3" json:"package_url,omitempty"`
	// Input field. Specify which resource this pipeline version belongs to.
	// For Experiment, the only valid resource reference is a single Namespace.
	ResourceReferences   []*ResourceReference `protobuf:"bytes,7,rep,name=resource_references,json=resourceReferences,proto3" json:"resource_references,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PipelineVersion) Reset()         { *m = PipelineVersion{} }
func (m *PipelineVersion) String() string { return proto.CompactTextString(m) }
func (*PipelineVersion) ProtoMessage()    {}
func (*PipelineVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_f11ac7285c35cf45, []int{16}
}

func (m *PipelineVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineVersion.Unmarshal(m, b)
}
func (m *PipelineVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineVersion.Marshal(b, m, deterministic)
}
func (m *PipelineVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineVersion.Merge(m, src)
}
func (m *PipelineVersion) XXX_Size() int {
	return xxx_messageInfo_PipelineVersion.Size(m)
}
func (m *PipelineVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineVersion.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineVersion proto.InternalMessageInfo

func (m *PipelineVersion) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PipelineVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PipelineVersion) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PipelineVersion) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *PipelineVersion) GetCodeSourceUrl() string {
	if m != nil {
		return m.CodeSourceUrl
	}
	return ""
}

func (m *PipelineVersion) GetPackageUrl() *Url {
	if m != nil {
		return m.PackageUrl
	}
	return nil
}

func (m *PipelineVersion) GetResourceReferences() []*ResourceReference {
	if m != nil {
		return m.ResourceReferences
	}
	return nil
}

func init() {
	proto.RegisterType((*Url)(nil), "api.Url")
	proto.RegisterType((*CreatePipelineRequest)(nil), "api.CreatePipelineRequest")
	proto.RegisterType((*UpdatePipelineDefaultVersionRequest)(nil), "api.UpdatePipelineDefaultVersionRequest")
	proto.RegisterType((*GetPipelineRequest)(nil), "api.GetPipelineRequest")
	proto.RegisterType((*ListPipelinesRequest)(nil), "api.ListPipelinesRequest")
	proto.RegisterType((*ListPipelinesResponse)(nil), "api.ListPipelinesResponse")
	proto.RegisterType((*DeletePipelineRequest)(nil), "api.DeletePipelineRequest")
	proto.RegisterType((*GetTemplateRequest)(nil), "api.GetTemplateRequest")
	proto.RegisterType((*GetTemplateResponse)(nil), "api.GetTemplateResponse")
	proto.RegisterType((*GetPipelineVersionTemplateRequest)(nil), "api.GetPipelineVersionTemplateRequest")
	proto.RegisterType((*CreatePipelineVersionRequest)(nil), "api.CreatePipelineVersionRequest")
	proto.RegisterType((*GetPipelineVersionRequest)(nil), "api.GetPipelineVersionRequest")
	proto.RegisterType((*ListPipelineVersionsRequest)(nil), "api.ListPipelineVersionsRequest")
	proto.RegisterType((*ListPipelineVersionsResponse)(nil), "api.ListPipelineVersionsResponse")
	proto.RegisterType((*DeletePipelineVersionRequest)(nil), "api.DeletePipelineVersionRequest")
	proto.RegisterType((*Pipeline)(nil), "api.Pipeline")
	proto.RegisterType((*PipelineVersion)(nil), "api.PipelineVersion")
}

func init() { proto.RegisterFile("backend/api/pipeline.proto", fileDescriptor_f11ac7285c35cf45) }

var fileDescriptor_f11ac7285c35cf45 = []byte{
	// 1272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xdf, 0x6e, 0x1b, 0xc5,
	0x17, 0xfe, 0xad, 0x9d, 0x38, 0xf6, 0x71, 0x9d, 0xfc, 0x98, 0xa6, 0x89, 0xbb, 0x71, 0x9a, 0x64,
	0x1b, 0xa5, 0x49, 0x68, 0xed, 0x26, 0x41, 0x08, 0x22, 0x15, 0xa9, 0x26, 0x50, 0x95, 0x02, 0xaa,
	0x9c, 0x84, 0x8b, 0x72, 0xb1, 0x5a, 0x7b, 0x8f, 0xdd, 0x25, 0xeb, 0xdd, 0x65, 0x76, 0x9c, 0xe2,
	0x54, 0x91, 0x50, 0x05, 0x02, 0x89, 0x3b, 0xb8, 0xe0, 0x8e, 0x27, 0xe0, 0x11, 0x90, 0x78, 0x00,
	0x2e, 0x79, 0x05, 0x5e, 0x81, 0x7b, 0xb4, 0xb3, 0x33, 0x9b, 0xfd, 0x63, 0x3b, 0xc9, 0x95, 0x3d,
	0x67, 0xbe, 0xd9, 0x73, 0xce, 0x77, 0xbe, 0x3d, 0x67, 0x16, 0xd4, 0xb6, 0xd1, 0x39, 0x41, 0xc7,
	0x6c, 0x18, 0x9e, 0xd5, 0xf0, 0x2c, 0x0f, 0x6d, 0xcb, 0xc1, 0xba, 0x47, 0x5d, 0xe6, 0x92, 0xbc,
	0xe1, 0x59, 0x6a, 0xad, 0xe7, 0xba, 0x3d, 0x1b, 0xf9, 0xbe, 0xe1, 0x38, 0x2e, 0x33, 0x98, 0xe5,
	0x3a, 0x7e, 0x08, 0x51, 0x57, 0xc4, 0x2e, 0x5f, 0xb5, 0x07, 0xdd, 0x06, 0xb3, 0xfa, 0xe8, 0x33,
	0xa3, 0xef, 0x09, 0xc0, 0x52, 0x1a, 0x80, 0x7d, 0x8f, 0x0d, 0xc5, 0xe6, 0x62, 0xdc, 0x39, 0x52,
	0xea, 0x52, 0x79, 0x2a, 0x11, 0x95, 0x41, 0x8d, 0x3e, 0x32, 0x94, 0x9b, 0xeb, 0xf1, 0x4d, 0x8a,
	0xbe, 0x3b, 0xa0, 0x1d, 0xd4, 0x29, 0x76, 0x91, 0xa2, 0xd3, 0x11, 0xc1, 0xab, 0xf7, 0xf9, 0x4f,
	0xe7, 0x41, 0x0f, 0x9d, 0x07, 0xfe, 0x2b, 0xa3, 0xd7, 0x43, 0xda, 0x70, 0x3d, 0x1e, 0x7b, 0x36,
	0x0f, 0x6d, 0x13, 0xf2, 0xc7, 0xd4, 0x26, 0x6b, 0x70, 0x43, 0x72, 0xa0, 0x0f, 0xa8, 0x5d, 0x55,
	0x56, 0x95, 0xcd, 0x52, 0xab, 0x2c, 0x6d, 0xc7, 0xd4, 0xd6, 0x9a, 0x70, 0xeb, 0x43, 0x8a, 0x06,
	0xc3, 0xe7, 0xc2, 0xd8, 0xc2, 0xaf, 0x07, 0xe8, 0x33, 0xb2, 0x05, 0x45, 0x89, 0xe3, 0xe7, 0xca,
	0xbb, 0x95, 0xba, 0xe1, 0x59, 0xf5, 0x08, 0x17, 0x6d, 0x6b, 0x08, 0x77, 0x8f, 0x3d, 0x33, 0xf6,
	0x8c, 0x03, 0xec, 0x1a, 0x03, 0x9b, 0x7d, 0x81, 0xd4, 0xb7, 0x5c, 0x47, 0x3e, 0x71, 0x05, 0x22,
	0xcf, 0xba, 0x65, 0x8a, 0x60, 0x40, 0x9a, 0x9e, 0x9a, 0x64, 0x19, 0xe0, 0x34, 0x3c, 0x12, 0xec,
	0xe7, 0xf8, 0x7e, 0x49, 0x58, 0x9e, 0x9a, 0xda, 0x3a, 0x90, 0x27, 0xc8, 0xd2, 0x71, 0xce, 0x42,
	0x2e, 0x7a, 0x58, 0xce, 0x32, 0xb5, 0xbf, 0x14, 0x98, 0xff, 0xd4, 0xf2, 0x23, 0x9c, 0x2f, 0x81,
	0xcb, 0x00, 0x9e, 0xd1, 0x43, 0x9d, 0xb9, 0x27, 0xe8, 0x88, 0x03, 0xa5, 0xc0, 0x72, 0x14, 0x18,
	0xc8, 0x12, 0xf0, 0x85, 0xee, 0x5b, 0x67, 0xc8, 0x7d, 0x4f, 0xb7, 0x8a, 0x81, 0xe1, 0xd0, 0x3a,
	0x43, 0xb2, 0x08, 0x33, 0xbe, 0x4b, 0x99, 0xde, 0x1e, 0x56, 0xf3, 0xfc, 0x60, 0x21, 0x58, 0x36,
	0x87, 0x64, 0x01, 0x0a, 0x5d, 0xcb, 0x66, 0x48, 0xab, 0x53, 0xa1, 0x3d, 0x5c, 0x91, 0x8f, 0x61,
	0x21, 0x5b, 0x4a, 0xfd, 0x04, 0x87, 0xd5, 0x69, 0xce, 0xe5, 0xff, 0x39, 0x97, 0x2d, 0x01, 0x79,
	0x86, 0xc3, 0xd6, 0xbc, 0xc4, 0xb7, 0x24, 0xfc, 0x19, 0x0e, 0xb5, 0x9f, 0x14, 0xb8, 0x95, 0xca,
	0xc6, 0xf7, 0x5c, 0xc7, 0x47, 0xf2, 0x36, 0x94, 0x24, 0x75, 0x7e, 0x55, 0x59, 0xcd, 0x67, 0x0b,
	0x74, 0xb1, 0x1f, 0xe4, 0xce, 0x5c, 0x66, 0xd8, 0x61, 0x76, 0x79, 0x9e, 0x5d, 0x89, 0x5b, 0x78,
	0x7a, 0x1b, 0x30, 0xe7, 0xe0, 0x37, 0x4c, 0x8f, 0xf1, 0x13, 0xb2, 0x5f, 0x09, 0xcc, 0xcf, 0x25,
	0x47, 0xda, 0x3d, 0xb8, 0x75, 0x80, 0x36, 0x66, 0xc5, 0x92, 0x2e, 0x42, 0x58, 0xaa, 0x23, 0xec,
	0x7b, 0xb6, 0xc1, 0xc6, 0xa2, 0x76, 0xe0, 0x66, 0x02, 0x25, 0x32, 0x53, 0xa1, 0xc8, 0x84, 0x4d,
	0x80, 0xa3, 0xb5, 0xd6, 0x84, 0xb5, 0x98, 0x06, 0x84, 0xc0, 0xd2, 0x7e, 0x92, 0x3a, 0x52, 0xd2,
	0x3a, 0xfa, 0x1c, 0x6a, 0x49, 0xc9, 0xa7, 0x74, 0x5a, 0x87, 0x19, 0x01, 0x16, 0xc2, 0x9f, 0x4f,
	0xf0, 0x2a, 0xd1, 0x12, 0xa4, 0xed, 0xc3, 0xed, 0x6c, 0x4c, 0x57, 0x8c, 0xe5, 0x4f, 0x05, 0x96,
	0xe2, 0xf5, 0x15, 0xa7, 0x23, 0xd1, 0xee, 0xc1, 0x8d, 0x48, 0x47, 0x81, 0x7a, 0x94, 0x31, 0xea,
	0x29, 0xd3, 0x8b, 0xc5, 0x64, 0x29, 0x27, 0x5f, 0x83, 0x7c, 0xfa, 0x35, 0x88, 0x29, 0x7d, 0x6a,
	0x8c, 0xd2, 0xa7, 0xe3, 0x4a, 0xd7, 0x7e, 0x55, 0xa0, 0x36, 0x3a, 0x03, 0x51, 0xce, 0x87, 0x50,
	0x14, 0xf9, 0x4a, 0x9d, 0x8e, 0xe6, 0x33, 0x42, 0x5d, 0x55, 0x8e, 0x97, 0xa8, 0x5a, 0x7b, 0x04,
	0xb5, 0xa4, 0x5a, 0xaf, 0x57, 0x9a, 0x7f, 0x73, 0x50, 0x94, 0x27, 0xd3, 0xd2, 0x25, 0xef, 0x03,
	0x74, 0xb8, 0x86, 0x4c, 0xdd, 0x60, 0x3c, 0xba, 0xf2, 0xae, 0x5a, 0x0f, 0x87, 0x43, 0x5d, 0x0e,
	0x87, 0xfa, 0x91, 0x9c, 0x1e, 0xad, 0x92, 0x40, 0x3f, 0x66, 0x84, 0xc0, 0x94, 0x63, 0xf4, 0x51,
	0x50, 0xcf, 0xff, 0x93, 0x55, 0x28, 0x9b, 0xe8, 0x77, 0xa8, 0xc5, 0x3b, 0xba, 0x60, 0x3e, 0x6e,
	0x22, 0xf5, 0xa0, 0x6c, 0x62, 0x70, 0xf8, 0xd5, 0x69, 0xce, 0xe3, 0x6c, 0xc8, 0xa3, 0x34, 0xb7,
	0x62, 0x08, 0xa2, 0x42, 0x3e, 0xe8, 0xf8, 0x33, 0x3c, 0xb2, 0x22, 0x07, 0x1e, 0x53, 0xbb, 0x15,
	0x18, 0xc9, 0x3c, 0x4c, 0xf3, 0xe9, 0x54, 0x2d, 0x70, 0x3f, 0xe1, 0x82, 0x3c, 0x82, 0x39, 0x33,
	0xec, 0xdb, 0xba, 0x94, 0x7f, 0x71, 0x82, 0xfc, 0x67, 0xcd, 0x44, 0x93, 0x27, 0x4f, 0xe0, 0x66,
	0xb6, 0xe3, 0xf9, 0xd5, 0x12, 0x8f, 0x74, 0x21, 0x21, 0xd8, 0xa8, 0xc3, 0xb5, 0x48, 0xa6, 0xe9,
	0xf9, 0xda, 0x1f, 0x39, 0x98, 0x4b, 0x39, 0xcb, 0xd0, 0x2f, 0x39, 0xcc, 0xc5, 0x38, 0x4c, 0x96,
	0x24, 0x7f, 0x9d, 0x92, 0x24, 0xc9, 0x9d, 0xba, 0x94, 0xdc, 0x0d, 0x98, 0xeb, 0xb8, 0x26, 0xea,
	0x22, 0xdd, 0x80, 0xe8, 0xf0, 0xa5, 0xa8, 0x04, 0xe6, 0x43, 0x6e, 0x0d, 0xe6, 0xef, 0x16, 0x94,
	0x3d, 0xa3, 0x73, 0x12, 0xc8, 0x38, 0xc0, 0x14, 0x52, 0xc5, 0x00, 0xb1, 0x19, 0x40, 0xc7, 0xd0,
	0x37, 0x73, 0x5d, 0xfa, 0x76, 0x7f, 0x28, 0x5f, 0xd0, 0x77, 0x88, 0xf4, 0xd4, 0xea, 0x20, 0xe9,
	0xc2, 0x6c, 0xb2, 0xe3, 0x11, 0x95, 0x3f, 0x71, 0xe4, 0xe4, 0x57, 0x93, 0x63, 0x44, 0xdb, 0x7a,
	0xf3, 0xf7, 0x3f, 0xbf, 0xe4, 0xee, 0x6a, 0x8b, 0xc1, 0x05, 0xc5, 0x6f, 0x9c, 0xee, 0xb4, 0x91,
	0x19, 0x3b, 0xd1, 0xe5, 0xca, 0xdf, 0x8f, 0x2e, 0x02, 0xe4, 0x4b, 0x28, 0xc7, 0x3a, 0x21, 0x59,
	0xe4, 0x0f, 0xca, 0xce, 0xec, 0xb4, 0x87, 0x75, 0xee, 0xe1, 0x0e, 0xa9, 0x8d, 0xf1, 0xd0, 0x78,
	0x6d, 0x99, 0xe7, 0xa4, 0x07, 0x95, 0xc4, 0x24, 0x24, 0xb7, 0xf9, 0x53, 0x46, 0xcd, 0x7a, 0x55,
	0x1d, 0xb5, 0x15, 0xf6, 0x23, 0x6d, 0x85, 0x7b, 0xbb, 0x4d, 0xc6, 0xe5, 0x43, 0xbe, 0x82, 0xd9,
	0x64, 0xdf, 0x10, 0x6c, 0x8d, 0x1c, 0x7d, 0xea, 0x42, 0x46, 0x62, 0x1f, 0x05, 0x57, 0x42, 0x99,
	0xd4, 0xf6, 0xe4, 0xa4, 0x3c, 0xce, 0x98, 0x1c, 0x60, 0x17, 0x8c, 0xa5, 0x46, 0x9a, 0x5a, 0xcd,
	0x6e, 0x88, 0x74, 0xea, 0xdc, 0xcf, 0x26, 0xd9, 0x98, 0xe4, 0xa7, 0x21, 0x07, 0xa8, 0x4f, 0xde,
	0x28, 0xe9, 0x1b, 0x9f, 0x7c, 0xc9, 0xd6, 0x46, 0x68, 0x22, 0xd9, 0x32, 0xd5, 0x91, 0xad, 0x40,
	0x7b, 0xc8, 0x43, 0xd8, 0xd6, 0x56, 0x46, 0x87, 0x20, 0xdb, 0x89, 0xbf, 0x2f, 0x47, 0x26, 0xf9,
	0x56, 0x49, 0xdc, 0xe5, 0x64, 0x04, 0x77, 0xd2, 0x82, 0xb9, 0x92, 0xfb, 0x77, 0xb8, 0xfb, 0x3a,
	0xb9, 0x7f, 0x89, 0xfb, 0xc6, 0xeb, 0x8b, 0x76, 0x7f, 0x4e, 0xbe, 0x4b, 0xdd, 0x13, 0xe5, 0xdc,
	0x22, 0xab, 0x19, 0xed, 0xa4, 0x86, 0xb2, 0xba, 0x36, 0x01, 0x21, 0xaa, 0x72, 0x8f, 0xc7, 0xb4,
	0x46, 0x2e, 0xa3, 0x84, 0xfc, 0xa8, 0xa4, 0xef, 0x54, 0xc9, 0x72, 0x4c, 0x9a, 0x60, 0x63, 0xb5,
	0x27, 0x18, 0xd9, 0xbe, 0x1e, 0x23, 0xbf, 0x29, 0xa0, 0x8e, 0xbf, 0x5c, 0x91, 0x8d, 0x31, 0xc5,
	0xb9, 0xba, 0x54, 0x3f, 0xe0, 0x61, 0xbd, 0x47, 0xde, 0xbd, 0x4e, 0x58, 0x31, 0xe9, 0xfe, 0xae,
	0x40, 0x6d, 0xd2, 0x87, 0x06, 0xd9, 0x0c, 0x5b, 0xeb, 0xe5, 0xdf, 0x22, 0x63, 0x99, 0xfb, 0x84,
	0x87, 0x78, 0xa0, 0x35, 0xc7, 0xbe, 0x4d, 0xb1, 0x4f, 0x98, 0xf3, 0x46, 0x6a, 0x60, 0x26, 0x02,
	0x6f, 0x7e, 0xaf, 0xfc, 0xfc, 0xf8, 0xb3, 0x56, 0x0d, 0x66, 0x04, 0x8a, 0xbc, 0x45, 0xe6, 0xa0,
	0xa2, 0x96, 0x79, 0x90, 0x87, 0xcc, 0x60, 0x03, 0xff, 0xc5, 0x0a, 0x2c, 0x43, 0xa1, 0x89, 0x06,
	0x45, 0x4a, 0x6e, 0x16, 0x73, 0x6a, 0xc5, 0x18, 0xb0, 0x97, 0x2e, 0xb5, 0xce, 0xf8, 0xe7, 0xdc,
	0x6a, 0xae, 0x7d, 0x03, 0x20, 0x02, 0xfc, 0xef, 0xc5, 0x5e, 0xcf, 0x62, 0x2f, 0x07, 0xed, 0x7a,
	0xc7, 0xed, 0x37, 0x4e, 0x06, 0x6d, 0xec, 0xda, 0xee, 0xab, 0x58, 0x70, 0xf1, 0x2f, 0xc9, 0x9e,
	0xab, 0x77, 0x6c, 0x0b, 0x1d, 0xd6, 0x2e, 0xf0, 0x1c, 0xf7, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x75, 0x92, 0xcc, 0x35, 0x1c, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineServiceClient interface {
	// Creates a pipeline.
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error)
	// Finds a specific pipeline by ID.
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error)
	// Finds all pipelines.
	ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error)
	// Deletes a pipeline and its pipeline versions.
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Returns a single YAML template that contains the description, parameters, and metadata associated with the pipeline provided.
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// Adds a pipeline version to the specified pipeline.
	CreatePipelineVersion(ctx context.Context, in *CreatePipelineVersionRequest, opts ...grpc.CallOption) (*PipelineVersion, error)
	// Gets a pipeline version by pipeline version ID.
	GetPipelineVersion(ctx context.Context, in *GetPipelineVersionRequest, opts ...grpc.CallOption) (*PipelineVersion, error)
	// Lists all pipeline versions of a given pipeline.
	ListPipelineVersions(ctx context.Context, in *ListPipelineVersionsRequest, opts ...grpc.CallOption) (*ListPipelineVersionsResponse, error)
	// Deletes a pipeline version by pipeline version ID. If the deleted pipeline
	// version is the default pipeline version, the pipeline's default version
	// changes to the pipeline's most recent pipeline version. If there are no
	// remaining pipeline versions, the pipeline will have no default version.
	// Examines the run_service_api.ipynb notebook to learn more about creating a
	// run using a pipeline version (https://github.com/kubeflow/pipelines/blob/master/tools/benchmarks/run_service_api.ipynb).
	DeletePipelineVersion(ctx context.Context, in *DeletePipelineVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Returns a YAML template that contains the specified pipeline version's description, parameters and metadata.
	GetPipelineVersionTemplate(ctx context.Context, in *GetPipelineVersionTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// Update the default pipeline version of a specific pipeline.
	UpdatePipelineDefaultVersion(ctx context.Context, in *UpdatePipelineDefaultVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type pipelineServiceClient struct {
	cc *grpc.ClientConn
}

func NewPipelineServiceClient(cc *grpc.ClientConn) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/api.PipelineService/CreatePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*Pipeline, error) {
	out := new(Pipeline)
	err := c.cc.Invoke(ctx, "/api.PipelineService/GetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	out := new(ListPipelinesResponse)
	err := c.cc.Invoke(ctx, "/api.PipelineService/ListPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.PipelineService/DeletePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/api.PipelineService/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) CreatePipelineVersion(ctx context.Context, in *CreatePipelineVersionRequest, opts ...grpc.CallOption) (*PipelineVersion, error) {
	out := new(PipelineVersion)
	err := c.cc.Invoke(ctx, "/api.PipelineService/CreatePipelineVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineVersion(ctx context.Context, in *GetPipelineVersionRequest, opts ...grpc.CallOption) (*PipelineVersion, error) {
	out := new(PipelineVersion)
	err := c.cc.Invoke(ctx, "/api.PipelineService/GetPipelineVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ListPipelineVersions(ctx context.Context, in *ListPipelineVersionsRequest, opts ...grpc.CallOption) (*ListPipelineVersionsResponse, error) {
	out := new(ListPipelineVersionsResponse)
	err := c.cc.Invoke(ctx, "/api.PipelineService/ListPipelineVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) DeletePipelineVersion(ctx context.Context, in *DeletePipelineVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.PipelineService/DeletePipelineVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineVersionTemplate(ctx context.Context, in *GetPipelineVersionTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/api.PipelineService/GetPipelineVersionTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) UpdatePipelineDefaultVersion(ctx context.Context, in *UpdatePipelineDefaultVersionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.PipelineService/UpdatePipelineDefaultVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
type PipelineServiceServer interface {
	// Creates a pipeline.
	CreatePipeline(context.Context, *CreatePipelineRequest) (*Pipeline, error)
	// Finds a specific pipeline by ID.
	GetPipeline(context.Context, *GetPipelineRequest) (*Pipeline, error)
	// Finds all pipelines.
	ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error)
	// Deletes a pipeline and its pipeline versions.
	DeletePipeline(context.Context, *DeletePipelineRequest) (*empty.Empty, error)
	// Returns a single YAML template that contains the description, parameters, and metadata associated with the pipeline provided.
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	// Adds a pipeline version to the specified pipeline.
	CreatePipelineVersion(context.Context, *CreatePipelineVersionRequest) (*PipelineVersion, error)
	// Gets a pipeline version by pipeline version ID.
	GetPipelineVersion(context.Context, *GetPipelineVersionRequest) (*PipelineVersion, error)
	// Lists all pipeline versions of a given pipeline.
	ListPipelineVersions(context.Context, *ListPipelineVersionsRequest) (*ListPipelineVersionsResponse, error)
	// Deletes a pipeline version by pipeline version ID. If the deleted pipeline
	// version is the default pipeline version, the pipeline's default version
	// changes to the pipeline's most recent pipeline version. If there are no
	// remaining pipeline versions, the pipeline will have no default version.
	// Examines the run_service_api.ipynb notebook to learn more about creating a
	// run using a pipeline version (https://github.com/kubeflow/pipelines/blob/master/tools/benchmarks/run_service_api.ipynb).
	DeletePipelineVersion(context.Context, *DeletePipelineVersionRequest) (*empty.Empty, error)
	// Returns a YAML template that contains the specified pipeline version's description, parameters and metadata.
	GetPipelineVersionTemplate(context.Context, *GetPipelineVersionTemplateRequest) (*GetTemplateResponse, error)
	// Update the default pipeline version of a specific pipeline.
	UpdatePipelineDefaultVersion(context.Context, *UpdatePipelineDefaultVersionRequest) (*empty.Empty, error)
}

// UnimplementedPipelineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPipelineServiceServer struct {
}

func (*UnimplementedPipelineServiceServer) CreatePipeline(ctx context.Context, req *CreatePipelineRequest) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (*UnimplementedPipelineServiceServer) GetPipeline(ctx context.Context, req *GetPipelineRequest) (*Pipeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (*UnimplementedPipelineServiceServer) ListPipelines(ctx context.Context, req *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (*UnimplementedPipelineServiceServer) DeletePipeline(ctx context.Context, req *DeletePipelineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (*UnimplementedPipelineServiceServer) GetTemplate(ctx context.Context, req *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedPipelineServiceServer) CreatePipelineVersion(ctx context.Context, req *CreatePipelineVersionRequest) (*PipelineVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipelineVersion not implemented")
}
func (*UnimplementedPipelineServiceServer) GetPipelineVersion(ctx context.Context, req *GetPipelineVersionRequest) (*PipelineVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineVersion not implemented")
}
func (*UnimplementedPipelineServiceServer) ListPipelineVersions(ctx context.Context, req *ListPipelineVersionsRequest) (*ListPipelineVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineVersions not implemented")
}
func (*UnimplementedPipelineServiceServer) DeletePipelineVersion(ctx context.Context, req *DeletePipelineVersionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineVersion not implemented")
}
func (*UnimplementedPipelineServiceServer) GetPipelineVersionTemplate(ctx context.Context, req *GetPipelineVersionTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineVersionTemplate not implemented")
}
func (*UnimplementedPipelineServiceServer) UpdatePipelineDefaultVersion(ctx context.Context, req *UpdatePipelineDefaultVersionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipelineDefaultVersion not implemented")
}

func RegisterPipelineServiceServer(s *grpc.Server, srv PipelineServiceServer) {
	s.RegisterService(&_PipelineService_serviceDesc, srv)
}

func _PipelineService_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/CreatePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/ListPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ListPipelines(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_CreatePipelineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).CreatePipelineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/CreatePipelineVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).CreatePipelineVersion(ctx, req.(*CreatePipelineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/GetPipelineVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineVersion(ctx, req.(*GetPipelineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ListPipelineVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ListPipelineVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/ListPipelineVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ListPipelineVersions(ctx, req.(*ListPipelineVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_DeletePipelineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).DeletePipelineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/DeletePipelineVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).DeletePipelineVersion(ctx, req.(*DeletePipelineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineVersionTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineVersionTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineVersionTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/GetPipelineVersionTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineVersionTemplate(ctx, req.(*GetPipelineVersionTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_UpdatePipelineDefaultVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineDefaultVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).UpdatePipelineDefaultVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PipelineService/UpdatePipelineDefaultVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).UpdatePipelineDefaultVersion(ctx, req.(*UpdatePipelineDefaultVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipelineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePipeline",
			Handler:    _PipelineService_CreatePipeline_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _PipelineService_GetPipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _PipelineService_ListPipelines_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _PipelineService_DeletePipeline_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _PipelineService_GetTemplate_Handler,
		},
		{
			MethodName: "CreatePipelineVersion",
			Handler:    _PipelineService_CreatePipelineVersion_Handler,
		},
		{
			MethodName: "GetPipelineVersion",
			Handler:    _PipelineService_GetPipelineVersion_Handler,
		},
		{
			MethodName: "ListPipelineVersions",
			Handler:    _PipelineService_ListPipelineVersions_Handler,
		},
		{
			MethodName: "DeletePipelineVersion",
			Handler:    _PipelineService_DeletePipelineVersion_Handler,
		},
		{
			MethodName: "GetPipelineVersionTemplate",
			Handler:    _PipelineService_GetPipelineVersionTemplate_Handler,
		},
		{
			MethodName: "UpdatePipelineDefaultVersion",
			Handler:    _PipelineService_UpdatePipelineDefaultVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/api/pipeline.proto",
}
