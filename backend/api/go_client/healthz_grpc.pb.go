// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_client

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HealthzServiceClient is the client API for HealthzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthzServiceClient interface {
	// Get healthz data.
	GetHealthz(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetHealthzResponse, error)
}

type healthzServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthzServiceClient(cc grpc.ClientConnInterface) HealthzServiceClient {
	return &healthzServiceClient{cc}
}

func (c *healthzServiceClient) GetHealthz(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetHealthzResponse, error) {
	out := new(GetHealthzResponse)
	err := c.cc.Invoke(ctx, "/api.HealthzService/GetHealthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthzServiceServer is the server API for HealthzService service.
// All implementations must embed UnimplementedHealthzServiceServer
// for forward compatibility
type HealthzServiceServer interface {
	// Get healthz data.
	GetHealthz(context.Context, *empty.Empty) (*GetHealthzResponse, error)
	mustEmbedUnimplementedHealthzServiceServer()
}

// UnimplementedHealthzServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHealthzServiceServer struct {
}

func (UnimplementedHealthzServiceServer) GetHealthz(context.Context, *empty.Empty) (*GetHealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthz not implemented")
}
func (UnimplementedHealthzServiceServer) mustEmbedUnimplementedHealthzServiceServer() {}

// UnsafeHealthzServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthzServiceServer will
// result in compilation errors.
type UnsafeHealthzServiceServer interface {
	mustEmbedUnimplementedHealthzServiceServer()
}

func RegisterHealthzServiceServer(s grpc.ServiceRegistrar, srv HealthzServiceServer) {
	s.RegisterService(&HealthzService_ServiceDesc, srv)
}

func _HealthzService_GetHealthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthzServiceServer).GetHealthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HealthzService/GetHealthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthzServiceServer).GetHealthz(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthzService_ServiceDesc is the grpc.ServiceDesc for HealthzService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthzService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.HealthzService",
	HandlerType: (*HealthzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealthz",
			Handler:    _HealthzService_GetHealthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/api/healthz.proto",
}
