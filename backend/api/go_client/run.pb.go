// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: run.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RunMetric_Format int32

const (
	// Default value if not present.
	RunMetric_UNSPECIFIED RunMetric_Format = 0
	// Display value as its raw format.
	RunMetric_RAW RunMetric_Format = 1
	// Display value in percentage format.
	RunMetric_PERCENTAGE RunMetric_Format = 2
)

var RunMetric_Format_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "RAW",
	2: "PERCENTAGE",
}

var RunMetric_Format_value = map[string]int32{
	"UNSPECIFIED": 0,
	"RAW":         1,
	"PERCENTAGE":  2,
}

func (x RunMetric_Format) String() string {
	return proto.EnumName(RunMetric_Format_name, int32(x))
}

func (RunMetric_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{7, 0}
}

type ReportRunMetricsResponse_ReportRunMetricResult_Status int32

const (
	// Default value if not present.
	ReportRunMetricsResponse_ReportRunMetricResult_UNSPECIFIED ReportRunMetricsResponse_ReportRunMetricResult_Status = 0
	// Indicates successful reporting.
	ReportRunMetricsResponse_ReportRunMetricResult_OK ReportRunMetricsResponse_ReportRunMetricResult_Status = 1
	// Indicates that the payload of the metric is invalid.
	ReportRunMetricsResponse_ReportRunMetricResult_INVALID_ARGUMENT ReportRunMetricsResponse_ReportRunMetricResult_Status = 2
	// Indicates that the metric has been reported before.
	ReportRunMetricsResponse_ReportRunMetricResult_DUPLICATE_REPORTING ReportRunMetricsResponse_ReportRunMetricResult_Status = 3
	// Indicates that something went wrong in the server.
	ReportRunMetricsResponse_ReportRunMetricResult_INTERNAL_ERROR ReportRunMetricsResponse_ReportRunMetricResult_Status = 4
)

var ReportRunMetricsResponse_ReportRunMetricResult_Status_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "OK",
	2: "INVALID_ARGUMENT",
	3: "DUPLICATE_REPORTING",
	4: "INTERNAL_ERROR",
}

var ReportRunMetricsResponse_ReportRunMetricResult_Status_value = map[string]int32{
	"UNSPECIFIED":         0,
	"OK":                  1,
	"INVALID_ARGUMENT":    2,
	"DUPLICATE_REPORTING": 3,
	"INTERNAL_ERROR":      4,
}

func (x ReportRunMetricsResponse_ReportRunMetricResult_Status) String() string {
	return proto.EnumName(ReportRunMetricsResponse_ReportRunMetricResult_Status_name, int32(x))
}

func (ReportRunMetricsResponse_ReportRunMetricResult_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{9, 0, 0}
}

type CreateRunRequest struct {
	Run                  *Run     `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRunRequest) Reset()         { *m = CreateRunRequest{} }
func (m *CreateRunRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRunRequest) ProtoMessage()    {}
func (*CreateRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{0}
}

func (m *CreateRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRunRequest.Unmarshal(m, b)
}
func (m *CreateRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRunRequest.Marshal(b, m, deterministic)
}
func (m *CreateRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRunRequest.Merge(m, src)
}
func (m *CreateRunRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRunRequest.Size(m)
}
func (m *CreateRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRunRequest proto.InternalMessageInfo

func (m *CreateRunRequest) GetRun() *Run {
	if m != nil {
		return m.Run
	}
	return nil
}

type GetRunRequest struct {
	RunId                string   `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRunRequest) Reset()         { *m = GetRunRequest{} }
func (m *GetRunRequest) String() string { return proto.CompactTextString(m) }
func (*GetRunRequest) ProtoMessage()    {}
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{1}
}

func (m *GetRunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRunRequest.Unmarshal(m, b)
}
func (m *GetRunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRunRequest.Marshal(b, m, deterministic)
}
func (m *GetRunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRunRequest.Merge(m, src)
}
func (m *GetRunRequest) XXX_Size() int {
	return xxx_messageInfo_GetRunRequest.Size(m)
}
func (m *GetRunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRunRequest proto.InternalMessageInfo

func (m *GetRunRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

type ListRunsRequest struct {
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Can be format of "field_name", "field_name asc" or "field_name des"
	// Ascending by default.
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// What resource reference to filter on.
	// E.g. If listing run for an experiment, the query string would be
	// resource_reference_key.type=EXPERIMENT&resource_reference_key.id=123
	ResourceReferenceKey *ResourceKey `protobuf:"bytes,4,opt,name=resource_reference_key,json=resourceReferenceKey,proto3" json:"resource_reference_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListRunsRequest) Reset()         { *m = ListRunsRequest{} }
func (m *ListRunsRequest) String() string { return proto.CompactTextString(m) }
func (*ListRunsRequest) ProtoMessage()    {}
func (*ListRunsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{2}
}

func (m *ListRunsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRunsRequest.Unmarshal(m, b)
}
func (m *ListRunsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRunsRequest.Marshal(b, m, deterministic)
}
func (m *ListRunsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRunsRequest.Merge(m, src)
}
func (m *ListRunsRequest) XXX_Size() int {
	return xxx_messageInfo_ListRunsRequest.Size(m)
}
func (m *ListRunsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRunsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRunsRequest proto.InternalMessageInfo

func (m *ListRunsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListRunsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRunsRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *ListRunsRequest) GetResourceReferenceKey() *ResourceKey {
	if m != nil {
		return m.ResourceReferenceKey
	}
	return nil
}

type ListRunsResponse struct {
	Runs                 []*Run   `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRunsResponse) Reset()         { *m = ListRunsResponse{} }
func (m *ListRunsResponse) String() string { return proto.CompactTextString(m) }
func (*ListRunsResponse) ProtoMessage()    {}
func (*ListRunsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{3}
}

func (m *ListRunsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRunsResponse.Unmarshal(m, b)
}
func (m *ListRunsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRunsResponse.Marshal(b, m, deterministic)
}
func (m *ListRunsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRunsResponse.Merge(m, src)
}
func (m *ListRunsResponse) XXX_Size() int {
	return xxx_messageInfo_ListRunsResponse.Size(m)
}
func (m *ListRunsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRunsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRunsResponse proto.InternalMessageInfo

func (m *ListRunsResponse) GetRuns() []*Run {
	if m != nil {
		return m.Runs
	}
	return nil
}

func (m *ListRunsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type Run struct {
	// Output. Unique run ID. Generated by API server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required input field. Name provided by user,
	// or auto generated if run is created by scheduled job. Not unique.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional input field. Describing the purpose of the run
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Required input field.
	// Describing what the pipeline manifest and parameters to use for the run.
	PipelineSpec *PipelineSpec `protobuf:"bytes,4,opt,name=pipeline_spec,json=pipelineSpec,proto3" json:"pipeline_spec,omitempty"`
	// Optional input field. Specify which resource this run belongs to.
	ResourceReferences []*ResourceReference `protobuf:"bytes,5,rep,name=resource_references,json=resourceReferences,proto3" json:"resource_references,omitempty"`
	// Output. The time that the run created.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output. When this run is scheduled to run. This could be different from
	// created_at. For example, if a run is from a backfilling job that was
	// supposed to run 2 month ago, the scheduled_at is 2 month ago,
	// v.s. created_at is the current time.
	ScheduledAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	// Output. The status of the run.
	// One of [Pending, Running, Succeeded, Skipped, Failed, Error]
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// In case any error happens retrieving a run field, only run ID
	// and the error message is returned. Client has the flexibility of choosing
	// how to handle error. This is especially useful during listing call.
	Error string `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
	// Output. The metrics of the run. The metrics are reported by ReportMetrics
	// API.
	Metrics              []*RunMetric `protobuf:"bytes,9,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Namespace            string       `protobuf:"bytes,14,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Run) Reset()         { *m = Run{} }
func (m *Run) String() string { return proto.CompactTextString(m) }
func (*Run) ProtoMessage()    {}
func (*Run) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{4}
}

func (m *Run) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Run.Unmarshal(m, b)
}
func (m *Run) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Run.Marshal(b, m, deterministic)
}
func (m *Run) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Run.Merge(m, src)
}
func (m *Run) XXX_Size() int {
	return xxx_messageInfo_Run.Size(m)
}
func (m *Run) XXX_DiscardUnknown() {
	xxx_messageInfo_Run.DiscardUnknown(m)
}

var xxx_messageInfo_Run proto.InternalMessageInfo

func (m *Run) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Run) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Run) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Run) GetPipelineSpec() *PipelineSpec {
	if m != nil {
		return m.PipelineSpec
	}
	return nil
}

func (m *Run) GetResourceReferences() []*ResourceReference {
	if m != nil {
		return m.ResourceReferences
	}
	return nil
}

func (m *Run) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Run) GetScheduledAt() *timestamp.Timestamp {
	if m != nil {
		return m.ScheduledAt
	}
	return nil
}

func (m *Run) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Run) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Run) GetMetrics() []*RunMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Run) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type PipelineRuntime struct {
	// Output. The runtime JSON manifest of the pipeline, including the status
	// of pipeline steps and fields need for UI visualization etc.
	PipelineManifest string `protobuf:"bytes,10,opt,name=pipeline_manifest,json=pipelineManifest,proto3" json:"pipeline_manifest,omitempty"`
	// Output. The runtime JSON manifest of the argo workflow.
	// This is deprecated after pipeline_runtime_manifest is in use.
	WorkflowManifest     string   `protobuf:"bytes,11,opt,name=workflow_manifest,json=workflowManifest,proto3" json:"workflow_manifest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineRuntime) Reset()         { *m = PipelineRuntime{} }
func (m *PipelineRuntime) String() string { return proto.CompactTextString(m) }
func (*PipelineRuntime) ProtoMessage()    {}
func (*PipelineRuntime) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{5}
}

func (m *PipelineRuntime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineRuntime.Unmarshal(m, b)
}
func (m *PipelineRuntime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineRuntime.Marshal(b, m, deterministic)
}
func (m *PipelineRuntime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineRuntime.Merge(m, src)
}
func (m *PipelineRuntime) XXX_Size() int {
	return xxx_messageInfo_PipelineRuntime.Size(m)
}
func (m *PipelineRuntime) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineRuntime.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineRuntime proto.InternalMessageInfo

func (m *PipelineRuntime) GetPipelineManifest() string {
	if m != nil {
		return m.PipelineManifest
	}
	return ""
}

func (m *PipelineRuntime) GetWorkflowManifest() string {
	if m != nil {
		return m.WorkflowManifest
	}
	return ""
}

type RunDetail struct {
	Run                  *Run             `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	PipelineRuntime      *PipelineRuntime `protobuf:"bytes,2,opt,name=pipeline_runtime,json=pipelineRuntime,proto3" json:"pipeline_runtime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RunDetail) Reset()         { *m = RunDetail{} }
func (m *RunDetail) String() string { return proto.CompactTextString(m) }
func (*RunDetail) ProtoMessage()    {}
func (*RunDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{6}
}

func (m *RunDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunDetail.Unmarshal(m, b)
}
func (m *RunDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunDetail.Marshal(b, m, deterministic)
}
func (m *RunDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunDetail.Merge(m, src)
}
func (m *RunDetail) XXX_Size() int {
	return xxx_messageInfo_RunDetail.Size(m)
}
func (m *RunDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_RunDetail.DiscardUnknown(m)
}

var xxx_messageInfo_RunDetail proto.InternalMessageInfo

func (m *RunDetail) GetRun() *Run {
	if m != nil {
		return m.Run
	}
	return nil
}

func (m *RunDetail) GetPipelineRuntime() *PipelineRuntime {
	if m != nil {
		return m.PipelineRuntime
	}
	return nil
}

type RunMetric struct {
	// Required. The user defined name of the metric. It must between 1 and 63 characters
	// long and must conform to the following regular expression:
	// `[a-z]([-a-z0-9]*[a-z0-9])?`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The runtime node ID which reports the metric. The node ID can be found in
	// the RunDetail.workflow.Status. Metric with same (node_id, name)
	// are considerd as duplicate. Only the first reporting will be recorded. Max length is 128.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*RunMetric_NumberValue
	Value isRunMetric_Value `protobuf_oneof:"value"`
	// The display format of metric.
	Format               RunMetric_Format `protobuf:"varint,4,opt,name=format,proto3,enum=api.RunMetric_Format" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RunMetric) Reset()         { *m = RunMetric{} }
func (m *RunMetric) String() string { return proto.CompactTextString(m) }
func (*RunMetric) ProtoMessage()    {}
func (*RunMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{7}
}

func (m *RunMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunMetric.Unmarshal(m, b)
}
func (m *RunMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunMetric.Marshal(b, m, deterministic)
}
func (m *RunMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunMetric.Merge(m, src)
}
func (m *RunMetric) XXX_Size() int {
	return xxx_messageInfo_RunMetric.Size(m)
}
func (m *RunMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_RunMetric.DiscardUnknown(m)
}

var xxx_messageInfo_RunMetric proto.InternalMessageInfo

func (m *RunMetric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RunMetric) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type isRunMetric_Value interface {
	isRunMetric_Value()
}

type RunMetric_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,3,opt,name=number_value,json=numberValue,proto3,oneof"`
}

func (*RunMetric_NumberValue) isRunMetric_Value() {}

func (m *RunMetric) GetValue() isRunMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RunMetric) GetNumberValue() float64 {
	if x, ok := m.GetValue().(*RunMetric_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (m *RunMetric) GetFormat() RunMetric_Format {
	if m != nil {
		return m.Format
	}
	return RunMetric_UNSPECIFIED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RunMetric) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RunMetric_OneofMarshaler, _RunMetric_OneofUnmarshaler, _RunMetric_OneofSizer, []interface{}{
		(*RunMetric_NumberValue)(nil),
	}
}

func _RunMetric_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RunMetric)
	// value
	switch x := m.Value.(type) {
	case *RunMetric_NumberValue:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.NumberValue))
	case nil:
	default:
		return fmt.Errorf("RunMetric.Value has unexpected type %T", x)
	}
	return nil
}

func _RunMetric_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RunMetric)
	switch tag {
	case 3: // value.number_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &RunMetric_NumberValue{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _RunMetric_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RunMetric)
	// value
	switch x := m.Value.(type) {
	case *RunMetric_NumberValue:
		n += 1 // tag and wire
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReportRunMetricsRequest struct {
	// Required. The parent run ID of the metric.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// List of metrics to report.
	Metrics              []*RunMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReportRunMetricsRequest) Reset()         { *m = ReportRunMetricsRequest{} }
func (m *ReportRunMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*ReportRunMetricsRequest) ProtoMessage()    {}
func (*ReportRunMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{8}
}

func (m *ReportRunMetricsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportRunMetricsRequest.Unmarshal(m, b)
}
func (m *ReportRunMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportRunMetricsRequest.Marshal(b, m, deterministic)
}
func (m *ReportRunMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRunMetricsRequest.Merge(m, src)
}
func (m *ReportRunMetricsRequest) XXX_Size() int {
	return xxx_messageInfo_ReportRunMetricsRequest.Size(m)
}
func (m *ReportRunMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRunMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRunMetricsRequest proto.InternalMessageInfo

func (m *ReportRunMetricsRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ReportRunMetricsRequest) GetMetrics() []*RunMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type ReportRunMetricsResponse struct {
	Results              []*ReportRunMetricsResponse_ReportRunMetricResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *ReportRunMetricsResponse) Reset()         { *m = ReportRunMetricsResponse{} }
func (m *ReportRunMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*ReportRunMetricsResponse) ProtoMessage()    {}
func (*ReportRunMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{9}
}

func (m *ReportRunMetricsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportRunMetricsResponse.Unmarshal(m, b)
}
func (m *ReportRunMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportRunMetricsResponse.Marshal(b, m, deterministic)
}
func (m *ReportRunMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRunMetricsResponse.Merge(m, src)
}
func (m *ReportRunMetricsResponse) XXX_Size() int {
	return xxx_messageInfo_ReportRunMetricsResponse.Size(m)
}
func (m *ReportRunMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRunMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRunMetricsResponse proto.InternalMessageInfo

func (m *ReportRunMetricsResponse) GetResults() []*ReportRunMetricsResponse_ReportRunMetricResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type ReportRunMetricsResponse_ReportRunMetricResult struct {
	// Output. The name of the metric.
	MetricName string `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// Output. The ID of the node which reports the metric.
	MetricNodeId string `protobuf:"bytes,2,opt,name=metric_node_id,json=metricNodeId,proto3" json:"metric_node_id,omitempty"`
	// Output. The status of the metric reporting.
	Status ReportRunMetricsResponse_ReportRunMetricResult_Status `protobuf:"varint,3,opt,name=status,proto3,enum=api.ReportRunMetricsResponse_ReportRunMetricResult_Status" json:"status,omitempty"`
	// Output. The detailed message of the error of the reporting.
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportRunMetricsResponse_ReportRunMetricResult) Reset() {
	*m = ReportRunMetricsResponse_ReportRunMetricResult{}
}
func (m *ReportRunMetricsResponse_ReportRunMetricResult) String() string {
	return proto.CompactTextString(m)
}
func (*ReportRunMetricsResponse_ReportRunMetricResult) ProtoMessage() {}
func (*ReportRunMetricsResponse_ReportRunMetricResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{9, 0}
}

func (m *ReportRunMetricsResponse_ReportRunMetricResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportRunMetricsResponse_ReportRunMetricResult.Unmarshal(m, b)
}
func (m *ReportRunMetricsResponse_ReportRunMetricResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportRunMetricsResponse_ReportRunMetricResult.Marshal(b, m, deterministic)
}
func (m *ReportRunMetricsResponse_ReportRunMetricResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportRunMetricsResponse_ReportRunMetricResult.Merge(m, src)
}
func (m *ReportRunMetricsResponse_ReportRunMetricResult) XXX_Size() int {
	return xxx_messageInfo_ReportRunMetricsResponse_ReportRunMetricResult.Size(m)
}
func (m *ReportRunMetricsResponse_ReportRunMetricResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportRunMetricsResponse_ReportRunMetricResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReportRunMetricsResponse_ReportRunMetricResult proto.InternalMessageInfo

func (m *ReportRunMetricsResponse_ReportRunMetricResult) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *ReportRunMetricsResponse_ReportRunMetricResult) GetMetricNodeId() string {
	if m != nil {
		return m.MetricNodeId
	}
	return ""
}

func (m *ReportRunMetricsResponse_ReportRunMetricResult) GetStatus() ReportRunMetricsResponse_ReportRunMetricResult_Status {
	if m != nil {
		return m.Status
	}
	return ReportRunMetricsResponse_ReportRunMetricResult_UNSPECIFIED
}

func (m *ReportRunMetricsResponse_ReportRunMetricResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadArtifactRequest struct {
	// The ID of the run.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The ID of the running node.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The name of the artifact.
	ArtifactName         string   `protobuf:"bytes,3,opt,name=artifact_name,json=artifactName,proto3" json:"artifact_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadArtifactRequest) Reset()         { *m = ReadArtifactRequest{} }
func (m *ReadArtifactRequest) String() string { return proto.CompactTextString(m) }
func (*ReadArtifactRequest) ProtoMessage()    {}
func (*ReadArtifactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{10}
}

func (m *ReadArtifactRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadArtifactRequest.Unmarshal(m, b)
}
func (m *ReadArtifactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadArtifactRequest.Marshal(b, m, deterministic)
}
func (m *ReadArtifactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadArtifactRequest.Merge(m, src)
}
func (m *ReadArtifactRequest) XXX_Size() int {
	return xxx_messageInfo_ReadArtifactRequest.Size(m)
}
func (m *ReadArtifactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadArtifactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadArtifactRequest proto.InternalMessageInfo

func (m *ReadArtifactRequest) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ReadArtifactRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ReadArtifactRequest) GetArtifactName() string {
	if m != nil {
		return m.ArtifactName
	}
	return ""
}

type ReadArtifactResponse struct {
	// The bytes of the artifact content.
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadArtifactResponse) Reset()         { *m = ReadArtifactResponse{} }
func (m *ReadArtifactResponse) String() string { return proto.CompactTextString(m) }
func (*ReadArtifactResponse) ProtoMessage()    {}
func (*ReadArtifactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3419bc3417bf873, []int{11}
}

func (m *ReadArtifactResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadArtifactResponse.Unmarshal(m, b)
}
func (m *ReadArtifactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadArtifactResponse.Marshal(b, m, deterministic)
}
func (m *ReadArtifactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadArtifactResponse.Merge(m, src)
}
func (m *ReadArtifactResponse) XXX_Size() int {
	return xxx_messageInfo_ReadArtifactResponse.Size(m)
}
func (m *ReadArtifactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadArtifactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadArtifactResponse proto.InternalMessageInfo

func (m *ReadArtifactResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.RunMetric_Format", RunMetric_Format_name, RunMetric_Format_value)
	proto.RegisterEnum("api.ReportRunMetricsResponse_ReportRunMetricResult_Status", ReportRunMetricsResponse_ReportRunMetricResult_Status_name, ReportRunMetricsResponse_ReportRunMetricResult_Status_value)
	proto.RegisterType((*CreateRunRequest)(nil), "api.CreateRunRequest")
	proto.RegisterType((*GetRunRequest)(nil), "api.GetRunRequest")
	proto.RegisterType((*ListRunsRequest)(nil), "api.ListRunsRequest")
	proto.RegisterType((*ListRunsResponse)(nil), "api.ListRunsResponse")
	proto.RegisterType((*Run)(nil), "api.Run")
	proto.RegisterType((*PipelineRuntime)(nil), "api.PipelineRuntime")
	proto.RegisterType((*RunDetail)(nil), "api.RunDetail")
	proto.RegisterType((*RunMetric)(nil), "api.RunMetric")
	proto.RegisterType((*ReportRunMetricsRequest)(nil), "api.ReportRunMetricsRequest")
	proto.RegisterType((*ReportRunMetricsResponse)(nil), "api.ReportRunMetricsResponse")
	proto.RegisterType((*ReportRunMetricsResponse_ReportRunMetricResult)(nil), "api.ReportRunMetricsResponse.ReportRunMetricResult")
	proto.RegisterType((*ReadArtifactRequest)(nil), "api.ReadArtifactRequest")
	proto.RegisterType((*ReadArtifactResponse)(nil), "api.ReadArtifactResponse")
}

func init() { proto.RegisterFile("run.proto", fileDescriptor_e3419bc3417bf873) }

var fileDescriptor_e3419bc3417bf873 = []byte{
	// 1244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0x0e, 0x25, 0x5b, 0xb2, 0x46, 0xb2, 0xcc, 0xac, 0xed, 0x98, 0x51, 0x6c, 0xd8, 0x60, 0x7e,
	0x08, 0xf2, 0x4b, 0x1b, 0x09, 0x71, 0x8a, 0x02, 0x35, 0x50, 0x14, 0xb2, 0xad, 0xb8, 0x6a, 0x6c,
	0x45, 0x5d, 0x29, 0x69, 0x91, 0x0b, 0xb1, 0x26, 0x57, 0x0a, 0x6b, 0x89, 0x64, 0x77, 0x97, 0x49,
	0x9d, 0x20, 0x97, 0x02, 0x7d, 0x81, 0xf6, 0xd0, 0x5b, 0x5f, 0xa0, 0x40, 0x0f, 0x3d, 0xf7, 0x05,
	0x7a, 0xee, 0x2b, 0xf4, 0x41, 0x0a, 0xee, 0x2e, 0x19, 0xfd, 0x71, 0x15, 0xa0, 0x27, 0x69, 0xbf,
	0xf9, 0x66, 0x67, 0x76, 0xe6, 0x9b, 0x5d, 0x42, 0x89, 0xc5, 0x41, 0x3d, 0x62, 0xa1, 0x08, 0x51,
	0x9e, 0x44, 0x7e, 0xad, 0x4c, 0x19, 0x0b, 0x99, 0x42, 0x6a, 0xb7, 0x86, 0x61, 0x38, 0x1c, 0xd1,
	0x86, 0x5c, 0x9d, 0xc7, 0x83, 0x06, 0x1d, 0x47, 0xe2, 0x52, 0x1b, 0xb7, 0xb5, 0x91, 0x44, 0x7e,
	0x83, 0x04, 0x41, 0x28, 0x88, 0xf0, 0xc3, 0x80, 0x6b, 0xeb, 0xee, 0xac, 0xab, 0xf0, 0xc7, 0x94,
	0x0b, 0x32, 0x8e, 0x34, 0x61, 0x3d, 0xf2, 0x23, 0x3a, 0xf2, 0x03, 0xea, 0xf0, 0x88, 0xba, 0x1a,
	0xb4, 0x18, 0xe5, 0x61, 0xcc, 0x5c, 0xea, 0x30, 0x3a, 0xa0, 0x8c, 0x06, 0x2e, 0xd5, 0x96, 0x0f,
	0xe5, 0x8f, 0x7b, 0x7f, 0x48, 0x83, 0xfb, 0xfc, 0x15, 0x19, 0x0e, 0x29, 0x6b, 0x84, 0x91, 0x8c,
	0x38, 0x1f, 0xdd, 0xae, 0x83, 0x79, 0xc4, 0x28, 0x11, 0x14, 0xc7, 0x01, 0xa6, 0xdf, 0xc6, 0x94,
	0x0b, 0x54, 0x83, 0x3c, 0x8b, 0x03, 0xcb, 0xd8, 0x33, 0xee, 0x96, 0xf7, 0x57, 0xea, 0x24, 0xf2,
	0xeb, 0x89, 0x35, 0x01, 0xed, 0x3b, 0xb0, 0x7a, 0x42, 0xc5, 0x04, 0x79, 0x13, 0x0a, 0x2c, 0x0e,
	0x1c, 0xdf, 0x93, 0xfc, 0x12, 0x5e, 0x66, 0x71, 0xd0, 0xf6, 0xec, 0xdf, 0x0c, 0x58, 0x3b, 0xf5,
	0x79, 0xc2, 0xe4, 0x29, 0x75, 0x07, 0x20, 0x22, 0x43, 0xea, 0x88, 0xf0, 0x82, 0x06, 0x9a, 0x5e,
	0x4a, 0x90, 0x7e, 0x02, 0xa0, 0x5b, 0x20, 0x17, 0x0e, 0xf7, 0x5f, 0x53, 0x2b, 0xb7, 0x67, 0xdc,
	0x5d, 0xc6, 0x2b, 0x09, 0xd0, 0xf3, 0x5f, 0x53, 0xb4, 0x05, 0x45, 0x1e, 0x32, 0xe1, 0x9c, 0x5f,
	0x5a, 0x79, 0xe9, 0x58, 0x48, 0x96, 0x87, 0x97, 0xe8, 0x11, 0xdc, 0x98, 0x2f, 0x85, 0x73, 0x41,
	0x2f, 0xad, 0x25, 0x99, 0xbf, 0xa9, 0xf2, 0xd7, 0x94, 0xc7, 0xf4, 0x12, 0x6f, 0xa4, 0x7c, 0x9c,
	0xd2, 0x1f, 0xd3, 0x4b, 0xfb, 0x6b, 0x30, 0xdf, 0xe5, 0xcb, 0xa3, 0x30, 0xe0, 0x14, 0x6d, 0xc3,
	0x12, 0x8b, 0x03, 0x6e, 0x19, 0x7b, 0xf9, 0xa9, 0x4a, 0x48, 0x14, 0xdd, 0x81, 0xb5, 0x80, 0x7e,
	0x27, 0x9c, 0x89, 0x33, 0xe5, 0x64, 0x6a, 0xab, 0x09, 0xdc, 0x4d, 0xcf, 0x65, 0xff, 0x91, 0x87,
	0x3c, 0x8e, 0x03, 0x54, 0x85, 0x5c, 0x56, 0xa5, 0x9c, 0xef, 0x21, 0x04, 0x4b, 0x01, 0x19, 0x53,
	0xed, 0x24, 0xff, 0xa3, 0x3d, 0x28, 0x7b, 0x94, 0xbb, 0xcc, 0x97, 0x0d, 0xd3, 0x47, 0x9d, 0x84,
	0xd0, 0xc7, 0xb0, 0x3a, 0xa5, 0x07, 0x7d, 0xcc, 0xeb, 0x32, 0xb9, 0xae, 0xb6, 0xf4, 0x22, 0xea,
	0xe2, 0x4a, 0x34, 0xb1, 0x42, 0x27, 0xb0, 0x3e, 0x5f, 0x27, 0x6e, 0x2d, 0xcb, 0xa3, 0xdd, 0x98,
	0x2a, 0x52, 0x56, 0x17, 0x8c, 0xe6, 0x4a, 0xc5, 0xd1, 0x27, 0x00, 0xae, 0x54, 0x8c, 0xe7, 0x10,
	0x61, 0x15, 0x64, 0xf4, 0x5a, 0x5d, 0x89, 0xb8, 0x9e, 0x8a, 0xb8, 0xde, 0x4f, 0x45, 0x8c, 0x4b,
	0x9a, 0xdd, 0x14, 0xe8, 0x53, 0xa8, 0x70, 0xf7, 0x05, 0xf5, 0xe2, 0x91, 0x72, 0x2e, 0xbe, 0xd7,
	0xb9, 0x9c, 0xf1, 0x9b, 0x02, 0xdd, 0x80, 0x02, 0x17, 0x44, 0xc4, 0xdc, 0x5a, 0xd1, 0x12, 0x90,
	0x2b, 0xb4, 0x01, 0xcb, 0x72, 0x16, 0xad, 0x8a, 0x52, 0xa0, 0x5c, 0xa0, 0xbb, 0x50, 0x1c, 0x53,
	0xc1, 0x7c, 0x97, 0x5b, 0x25, 0x79, 0xc8, 0x6a, 0xda, 0xbf, 0x33, 0x09, 0xe3, 0xd4, 0x8c, 0xb6,
	0xa1, 0x94, 0x14, 0x9f, 0x47, 0xc4, 0xa5, 0x56, 0x55, 0xc9, 0x32, 0x03, 0xec, 0x0b, 0x58, 0x4b,
	0xcb, 0x8a, 0xe3, 0x20, 0x19, 0x4e, 0xf4, 0x01, 0x5c, 0xcf, 0x7a, 0x30, 0x26, 0x81, 0x3f, 0xa0,
	0x5c, 0x58, 0x20, 0x1d, 0xcd, 0xd4, 0x70, 0xa6, 0xf1, 0x84, 0xfc, 0x2a, 0x64, 0x17, 0x83, 0x51,
	0xf8, 0xea, 0x1d, 0xb9, 0xac, 0xc8, 0xa9, 0x21, 0x25, 0xdb, 0x2f, 0xa0, 0x84, 0xe3, 0xe0, 0x98,
	0x0a, 0xe2, 0x8f, 0x16, 0xcd, 0x21, 0xfa, 0x0c, 0xb2, 0x48, 0x0e, 0x53, 0x69, 0x49, 0x21, 0x95,
	0xf7, 0x37, 0xa6, 0x94, 0xa0, 0x53, 0xc6, 0x6b, 0xd1, 0x34, 0x60, 0xff, 0x69, 0xc8, 0x50, 0xaa,
	0x16, 0x99, 0x16, 0x8d, 0x09, 0x2d, 0x6e, 0x41, 0x31, 0x08, 0x3d, 0x9a, 0x8c, 0xb6, 0x92, 0x68,
	0x21, 0x59, 0xb6, 0x3d, 0x74, 0x1b, 0x2a, 0x41, 0x3c, 0x3e, 0xa7, 0xcc, 0x79, 0x49, 0x46, 0x31,
	0x95, 0x2a, 0x35, 0x3e, 0xbf, 0x86, 0xcb, 0x0a, 0x7d, 0x96, 0x80, 0xe8, 0x3e, 0x14, 0x06, 0x21,
	0x1b, 0x13, 0x21, 0x05, 0x5a, 0xdd, 0xdf, 0x9c, 0xae, 0x7e, 0xfd, 0x91, 0x34, 0x62, 0x4d, 0xb2,
	0xf7, 0xa1, 0xa0, 0x10, 0xb4, 0x06, 0xe5, 0xa7, 0x9d, 0x5e, 0xb7, 0x75, 0xd4, 0x7e, 0xd4, 0x6e,
	0x1d, 0x9b, 0xd7, 0x50, 0x11, 0xf2, 0xb8, 0xf9, 0x95, 0x69, 0xa0, 0x2a, 0x40, 0xb7, 0x85, 0x8f,
	0x5a, 0x9d, 0x7e, 0xf3, 0xa4, 0x65, 0xe6, 0x0e, 0x8b, 0xb0, 0x2c, 0x13, 0xb0, 0x9f, 0xc3, 0x16,
	0xa6, 0x51, 0xc8, 0x44, 0xb6, 0x3d, 0x5f, 0x7c, 0x3d, 0x4d, 0x8a, 0x23, 0xb7, 0x50, 0x1c, 0xf6,
	0x2f, 0x79, 0xb0, 0xe6, 0x37, 0xd7, 0x17, 0xc4, 0x19, 0x14, 0x19, 0xe5, 0xf1, 0x48, 0xa4, 0x77,
	0xc4, 0x43, 0x3d, 0x48, 0x57, 0xf3, 0x67, 0x0d, 0x58, 0xfa, 0xe2, 0x74, 0x8f, 0xda, 0xef, 0x39,
	0xd8, 0xbc, 0x92, 0x82, 0x76, 0xa1, 0xac, 0x12, 0x72, 0x26, 0xda, 0x04, 0x0a, 0xea, 0x24, 0xcd,
	0xfa, 0x1f, 0x54, 0x53, 0xc2, 0x54, 0xcf, 0x2a, 0x9a, 0xa3, 0x3a, 0x87, 0xb3, 0x09, 0xca, 0xcb,
	0xa6, 0x1c, 0xfc, 0x87, 0x74, 0xeb, 0x3d, 0xb9, 0x43, 0x36, 0x7d, 0x56, 0x52, 0x4a, 0xce, 0xc9,
	0x90, 0xca, 0x4e, 0x97, 0x70, 0xba, 0xb4, 0x3d, 0x28, 0x28, 0xee, 0x7c, 0x4f, 0x0b, 0x90, 0x7b,
	0xf2, 0xd8, 0x34, 0xd0, 0x06, 0x98, 0xed, 0xce, 0xb3, 0xe6, 0x69, 0xfb, 0xd8, 0x69, 0xe2, 0x93,
	0xa7, 0x67, 0xad, 0x4e, 0xdf, 0xcc, 0xa1, 0x2d, 0x58, 0x3f, 0x7e, 0xda, 0x3d, 0x6d, 0x1f, 0x35,
	0xfb, 0x2d, 0x07, 0xb7, 0xba, 0x4f, 0x70, 0xbf, 0xdd, 0x39, 0x31, 0xf3, 0x08, 0x41, 0xb5, 0xdd,
	0xe9, 0xb7, 0x70, 0xa7, 0x79, 0xea, 0xb4, 0x30, 0x7e, 0x82, 0xcd, 0x25, 0xfb, 0x1b, 0x58, 0xc7,
	0x94, 0x78, 0x4d, 0x26, 0xfc, 0x01, 0x71, 0xc5, 0x7b, 0x1a, 0xbf, 0x40, 0xd4, 0xab, 0x44, 0x6f,
	0xa1, 0x6a, 0xac, 0xee, 0xde, 0x4a, 0x0a, 0x26, 0x55, 0xb6, 0xef, 0xc1, 0xc6, 0x74, 0x2c, 0xad,
	0x03, 0x04, 0x4b, 0x1e, 0x11, 0x44, 0x86, 0xaa, 0x60, 0xf9, 0x7f, 0xff, 0xd7, 0x25, 0x00, 0x1c,
	0x07, 0x3d, 0xca, 0x5e, 0xfa, 0x2e, 0x45, 0x3d, 0x28, 0x65, 0x0f, 0x2d, 0x52, 0xc3, 0x30, 0xfb,
	0xf0, 0xd6, 0x32, 0x11, 0xaa, 0x0b, 0xc0, 0xde, 0xfd, 0xfe, 0xaf, 0xbf, 0x7f, 0xca, 0xdd, 0xb4,
	0x51, 0xf2, 0xe9, 0xc0, 0x1b, 0x2f, 0x1f, 0x9c, 0x53, 0x41, 0x1e, 0x34, 0x92, 0xd7, 0xe7, 0x40,
	0xde, 0x02, 0x5f, 0x42, 0x41, 0xbd, 0xc6, 0x08, 0x49, 0xd7, 0xa9, 0xa7, 0x79, 0x6e, 0xbb, 0xdb,
	0x72, 0xbb, 0x1d, 0x74, 0x6b, 0x7e, 0xbb, 0xc6, 0x1b, 0x55, 0xac, 0xb7, 0xa8, 0x07, 0x2b, 0xe9,
	0x3b, 0x88, 0xd4, 0x55, 0x32, 0xf3, 0x8c, 0xd7, 0x36, 0x67, 0x50, 0x55, 0x03, 0xbb, 0x26, 0x77,
	0xdf, 0x40, 0x57, 0x24, 0x8b, 0x7e, 0x30, 0xc0, 0x9c, 0x55, 0x19, 0xda, 0xfe, 0x17, 0xf1, 0xa9,
	0x28, 0x3b, 0x0b, 0xa5, 0x69, 0x7f, 0x24, 0xa3, 0xd5, 0xed, 0xff, 0x2f, 0x38, 0xcb, 0x01, 0x93,
	0xde, 0xda, 0xf5, 0xc0, 0xb8, 0x87, 0x7e, 0x36, 0xa0, 0x32, 0xd9, 0x40, 0x64, 0xe9, 0x28, 0x73,
	0xfa, 0xa9, 0xdd, 0xbc, 0xc2, 0xa2, 0x63, 0x63, 0x19, 0xfb, 0x14, 0x7d, 0xb1, 0x20, 0x76, 0x23,
	0x91, 0x15, 0x6f, 0xbc, 0xd1, 0x62, 0x7b, 0xdb, 0x48, 0x75, 0xc4, 0x1b, 0x6f, 0xa6, 0x74, 0x96,
	0x64, 0x49, 0xbc, 0xc3, 0xee, 0x8f, 0xcd, 0x33, 0xbc, 0x0d, 0x45, 0x8f, 0x0e, 0x48, 0x32, 0xf0,
	0xd7, 0xd1, 0x1a, 0xac, 0xd6, 0xca, 0x32, 0x09, 0x35, 0x44, 0xcf, 0x77, 0x61, 0x07, 0x0a, 0x87,
	0x94, 0x30, 0xca, 0xd0, 0xfa, 0x4a, 0xae, 0xb6, 0x4a, 0x62, 0xf1, 0x22, 0x64, 0xfe, 0x6b, 0xf9,
	0x41, 0xb7, 0x97, 0x3b, 0xaf, 0x00, 0x64, 0x84, 0x6b, 0xe7, 0x05, 0xf9, 0x9c, 0x3e, 0xfc, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0xd9, 0x1a, 0x66, 0xb8, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunServiceClient is the client API for RunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunServiceClient interface {
	CreateRun(ctx context.Context, in *CreateRunRequest, opts ...grpc.CallOption) (*RunDetail, error)
	GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*RunDetail, error)
	ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// ReportRunMetrics reports metrics of a run. Each metric is reported in its
	// own transaction, so this API accepts partial failures. Metric can be uniquely
	// identified by (run_id, node_id, name). Duplicate reporting will be
	// ignored by the API. First reporting wins.
	ReportRunMetrics(ctx context.Context, in *ReportRunMetricsRequest, opts ...grpc.CallOption) (*ReportRunMetricsResponse, error)
	ReadArtifact(ctx context.Context, in *ReadArtifactRequest, opts ...grpc.CallOption) (*ReadArtifactResponse, error)
}

type runServiceClient struct {
	cc *grpc.ClientConn
}

func NewRunServiceClient(cc *grpc.ClientConn) RunServiceClient {
	return &runServiceClient{cc}
}

func (c *runServiceClient) CreateRun(ctx context.Context, in *CreateRunRequest, opts ...grpc.CallOption) (*RunDetail, error) {
	out := new(RunDetail)
	err := c.cc.Invoke(ctx, "/api.RunService/CreateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*RunDetail, error) {
	out := new(RunDetail)
	err := c.cc.Invoke(ctx, "/api.RunService/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/api.RunService/ListRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) ReportRunMetrics(ctx context.Context, in *ReportRunMetricsRequest, opts ...grpc.CallOption) (*ReportRunMetricsResponse, error) {
	out := new(ReportRunMetricsResponse)
	err := c.cc.Invoke(ctx, "/api.RunService/ReportRunMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) ReadArtifact(ctx context.Context, in *ReadArtifactRequest, opts ...grpc.CallOption) (*ReadArtifactResponse, error) {
	out := new(ReadArtifactResponse)
	err := c.cc.Invoke(ctx, "/api.RunService/ReadArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunServiceServer is the server API for RunService service.
type RunServiceServer interface {
	CreateRun(context.Context, *CreateRunRequest) (*RunDetail, error)
	GetRun(context.Context, *GetRunRequest) (*RunDetail, error)
	ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error)
	// ReportRunMetrics reports metrics of a run. Each metric is reported in its
	// own transaction, so this API accepts partial failures. Metric can be uniquely
	// identified by (run_id, node_id, name). Duplicate reporting will be
	// ignored by the API. First reporting wins.
	ReportRunMetrics(context.Context, *ReportRunMetricsRequest) (*ReportRunMetricsResponse, error)
	ReadArtifact(context.Context, *ReadArtifactRequest) (*ReadArtifactResponse, error)
}

func RegisterRunServiceServer(s *grpc.Server, srv RunServiceServer) {
	s.RegisterService(&_RunService_serviceDesc, srv)
}

func _RunService_CreateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).CreateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RunService/CreateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).CreateRun(ctx, req.(*CreateRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RunService/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).GetRun(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RunService/ListRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).ListRuns(ctx, req.(*ListRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_ReportRunMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRunMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).ReportRunMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RunService/ReportRunMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).ReportRunMetrics(ctx, req.(*ReportRunMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_ReadArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).ReadArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RunService/ReadArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).ReadArtifact(ctx, req.(*ReadArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RunService",
	HandlerType: (*RunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRun",
			Handler:    _RunService_CreateRun_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _RunService_GetRun_Handler,
		},
		{
			MethodName: "ListRuns",
			Handler:    _RunService_ListRuns_Handler,
		},
		{
			MethodName: "ReportRunMetrics",
			Handler:    _RunService_ReportRunMetrics_Handler,
		},
		{
			MethodName: "ReadArtifact",
			Handler:    _RunService_ReadArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "run.proto",
}
