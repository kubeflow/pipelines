// Code generated by go-swagger; DO NOT EDIT.

package run_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListRunsV2Params creates a new ListRunsV2Params object
// with the default values initialized.
func NewListRunsV2Params() *ListRunsV2Params {
	var ()
	return &ListRunsV2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewListRunsV2ParamsWithTimeout creates a new ListRunsV2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewListRunsV2ParamsWithTimeout(timeout time.Duration) *ListRunsV2Params {
	var ()
	return &ListRunsV2Params{

		timeout: timeout,
	}
}

// NewListRunsV2ParamsWithContext creates a new ListRunsV2Params object
// with the default values initialized, and the ability to set a context for a request
func NewListRunsV2ParamsWithContext(ctx context.Context) *ListRunsV2Params {
	var ()
	return &ListRunsV2Params{

		Context: ctx,
	}
}

// NewListRunsV2ParamsWithHTTPClient creates a new ListRunsV2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListRunsV2ParamsWithHTTPClient(client *http.Client) *ListRunsV2Params {
	var ()
	return &ListRunsV2Params{
		HTTPClient: client,
	}
}

/*ListRunsV2Params contains all the parameters to send to the API endpoint
for the list runs v2 operation typically these are written to a http.Request
*/
type ListRunsV2Params struct {

	/*PageSize*/
	PageSize *int32
	/*PageToken*/
	PageToken *string
	/*SortBy
	  Can be format of "field_name", "field_name asc" or "field_name des"
	Ascending by default.

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list runs v2 params
func (o *ListRunsV2Params) WithTimeout(timeout time.Duration) *ListRunsV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list runs v2 params
func (o *ListRunsV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list runs v2 params
func (o *ListRunsV2Params) WithContext(ctx context.Context) *ListRunsV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list runs v2 params
func (o *ListRunsV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list runs v2 params
func (o *ListRunsV2Params) WithHTTPClient(client *http.Client) *ListRunsV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list runs v2 params
func (o *ListRunsV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageSize adds the pageSize to the list runs v2 params
func (o *ListRunsV2Params) WithPageSize(pageSize *int32) *ListRunsV2Params {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list runs v2 params
func (o *ListRunsV2Params) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the list runs v2 params
func (o *ListRunsV2Params) WithPageToken(pageToken *string) *ListRunsV2Params {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list runs v2 params
func (o *ListRunsV2Params) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithSortBy adds the sortBy to the list runs v2 params
func (o *ListRunsV2Params) WithSortBy(sortBy *string) *ListRunsV2Params {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list runs v2 params
func (o *ListRunsV2Params) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *ListRunsV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PageToken != nil {

		// query param page_token
		var qrPageToken string
		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {
			if err := r.SetQueryParam("page_token", qPageToken); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
