// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package api;

import "error.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "pipeline_spec.proto";
import "resource_reference.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {
          ref: ".api.Status";
        }
      }
    }
  }
  // Use bearer token for authorizing access to job service.
  // Kubernetes client library(https://kubernetes.io/docs/reference/using-api/client-libraries/)
  // uses bearer token as default for authorization. The section below
  // ensures security definition object is generated in the swagger definition.
  // For more details see https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityDefinitionsObject
  security_definitions: {
    security: {
      key: "Bearer";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "authorization";
      }
    }
  }
  security: {
    security_requirement: {
      key: "Bearer";
      value: {};
    }
  }
};

service RunService {
  rpc CreateRun(CreateRunRequest) returns (Run) {
    option (google.api.http) = {
      post: "/apis/v1alpha2/runs"
      body: "run"
    };
  }

  rpc GetRunV2(GetRunV2Request) returns (RunDetail) {
    option (google.api.http) = {
      get: "/apis/v1alpha2/runs/{run_id}"
    };
  }

  rpc ListRuns(ListRunsRequest) returns (ListRunsResponse) {
    option (google.api.http) = {
      get: "/apis/v1alpha2/runs"
    };
  }

  // TODO(yangpa): This will be deprecated in v1beta1
  rpc GetRun(GetRunRequest) returns (RunDetail) {
    option (google.api.http) = {
      get: "/apis/v1alpha2/jobs/{job_id}/runs/{run_id}"
    };
  }
}

message CreateRunRequest{
  Run run = 1;
}

message GetRunV2Request{
  string run_id = 1;
}

message GetRunRequest {
  string job_id = 1;
  string run_id = 2;
}

message ListRunsRequest{
  string page_token = 1;
  int32 page_size = 2;
  // Can be format of "field_name", "field_name asc" or "field_name des"
  // Ascending by default.
  string sort_by = 3;

  // What resource reference to filter on. Expect {type=XX,id=XX}
  // E.g. Listing job for an experiment would be {type=EXPERIMENT,id=123}
  string resource_reference = 4;
}

message ListRunsResponse {
  repeated Run runs = 1;
  string next_page_token = 2;
}

message Run {
  // Output. Unique run ID. Generated by API server.
  string id = 1;

  // Required input field. Name provided by user,
  // or auto generated if run is created by scheduled job. Not unique.
  string name = 2;

  // Optional input field. Describing the purpose of the run
  string description = 3;

  // Required input field.
  // Describing what the pipeline manifest and parameters to use for the run.
  PipelineSpec pipeline_spec = 4;

  // Optional input field. Specify which resource this run belongs to.
  repeated ResourceReference resource_references = 5;

  // Output. The time that the run created.
  google.protobuf.Timestamp created_at = 6;

  // Output. When this run is scheduled to run. This could be different from
  // created_at. For example, if a run is from a backfilling job that was
  // supposed to run 2 month ago, the scheduled_at is 2 month ago,
  // v.s. created_at is the current time.
  google.protobuf.Timestamp scheduled_at = 7;

  // Output. The status of the run.
  // One of [Pending, Running, Succeeded, Skipped, Failed, Error]
  string status = 8;


  // In case any error happens retrieving a run field, only run ID
  // and the error message is returned. Client has the flexibility of choosing
  // how to handle error. This is especially useful during listing call.
  string error = 12;

  // TODO(yangpa): Following will be deprecated in v1beta1
  string job_id = 13;
  string namespace = 14;
}

message PipelineRuntime {
  // Output. The runtime manifest of the pipeline, including the status
  // of pipeline steps and fields need for UI visualization etc.
  string pipeline_manifest = 10;

  // Output. The runtime manifest of the argo workflow.
  // This is deprecated after pipeline_runtime_manifest is in use.
  string workflow_manifest = 11;
}

message RunDetail {
  Run run = 1;
  PipelineRuntime pipeline_runtime = 2;

  // TODO(yangpa): Following will be deprecated in v1beta1
  string workflow = 3;
}