apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    pipelines.kubeflow.org/v2_pipeline: "true"
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
  creationTimestamp: null
  generateName: tutorial-control-flows-
  labels:
    pipelines.kubeflow.org/v2_component: "true"
spec:
  pipelineSpec:
    tasks:
    - name: flip-coin-op
      params:
      - name: type
        value: CONTAINER
      - name: pipeline-name
        value: tutorial-control-flows
      - name: run-id
        value: $(context.pipelineRun.uid)
      - name: dag-execution-id
        value: $(tasks.root-system-dag-driver.results.execution-id)
      - name: task
        value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-flip-coin-op"},"taskInfo":{"name":"flip-coin-op"}}'
      - name: container
        value: '{"args":["--executor_input","{{$}}","--function_to_execute","flip_coin_op"],"command":["sh","-c","\nif
          ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3
          -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1
          python3 -m pip install --quiet     --no-warn-script-location ''kfp==2.0.1''
          \u0026\u0026 \"$0\" \"$@\"\n","sh","-ec","program_path=$(mktemp -d)\nprintf
          \"%s\" \"$0\" \u003e \"$program_path/ephemeral_component.py\"\npython3 -m
          kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n","\nimport
          kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef
          flip_coin_op() -\u003e str:\n    \"\"\"Flip a coin and output heads or tails
          randomly.\"\"\"\n    import random\n    result = random.choice([''heads'',
          ''tails''])\n    print(result)\n    return result\n\n"],"image":"python:3.7"}'
      - name: iteration-index
        value: ""
      - name: kubernetes-config
        value: ""
      - name: mlmd-server-address
        value: metadata-grpc-service.kubeflow.svc.cluster.local
      - name: mlmd-server-port
        value: "8080"
      - name: component
        value: '{"executorLabel":"exec-flip-coin-op","outputDefinitions":{"parameters":{"Output":{"parameterType":"STRING"}}}}'
      taskSpec:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: KFPTask
        metadata:
          annotations:
            pipelines.kubeflow.org/v2_pipeline: "true"
          labels:
            pipelines.kubeflow.org/v2_component: "true"
        spec:
          taskSpec:
            params:
            - name: executor-input
              type: string
            - name: execution-id
              type: string
            - name: run-id
              type: string
            - name: component
              type: string
            steps:
            - command:
              - launcher-v2
              - --copy
              - /tekton/home/launch
              computeResources: {}
              image: gcr.io/ml-pipeline/kfp-launcher@sha256:50151a8615c8d6907aa627902dce50a2619fd231f25d1e5c2a72737a2ea4001e
              imagePullPolicy: Always
              name: kfp-launcher
            - args:
              - sh
              - -c
              - |2

                if ! [ -x "$(command -v pip)" ]; then
                    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
                fi

                PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.1' && "$0" "$@"
              - sh
              - -ec
              - |
                program_path=$(mktemp -d)
                printf "%s" "$0" > "$program_path/ephemeral_component.py"
                python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
              - |2+

                import kfp
                from kfp import dsl
                from kfp.dsl import *
                from typing import *

                def flip_coin_op() -> str:
                    """Flip a coin and output heads or tails randomly."""
                    import random
                    result = random.choice(['heads', 'tails'])
                    print(result)
                    return result

              - --executor_input
              - '{{$}}'
              - --function_to_execute
              - flip_coin_op
              command:
              - /tekton/home/launch
              - --pipeline_name
              - tutorial-control-flows
              - --run_id
              - $(params.run-id)
              - --execution_id
              - $(params.execution-id)
              - --executor_input
              - $(params.executor-input)
              - --component_spec
              - $(params.component)
              - --pod_name
              - $(KFP_POD_NAME)
              - --pod_uid
              - $(KFP_POD_UID)
              - --mlmd_server_address
              - $(METADATA_GRPC_SERVICE_HOST)
              - --mlmd_server_port
              - $(METADATA_GRPC_SERVICE_PORT)
              - --
              computeResources: {}
              env:
              - name: KFP_POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: KFP_POD_UID
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.uid
              - name: METADATA_GRPC_SERVICE_HOST
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: METADATA_GRPC_SERVICE_PORT
                value: "8080"
              - name: ML_PIPELINE_SERVICE_HOST
                value: ml-pipeline.kubeflow.svc.cluster.local
              - name: ML_PIPELINE_SERVICE_PORT_GRPC
                value: "8887"
              - name: MINIO_SERVICE_SERVICE_HOST
                value: minio-service.kubeflow.svc.cluster.local
              - name: MINIO_SERVICE_SERVICE_PORT
                value: "9000"
              envFrom:
              - configMapRef:
                  name: metadata-grpc-configmap
                  optional: true
              image: python:3.7
              name: user-main
    - name: for-loop-2-pipelineloop
      params:
      - name: parent-dag-id
        value: $(tasks.for-loop-2-dag-driver.results.execution-id)
      - name: from
        value: "0"
      - name: step
        value: "1"
      - name: to
        value: $(tasks.for-loop-2-dag-driver.results.iteration-count)
      - name: type
        value: DAG
      - name: pipeline-name
        value: tutorial-control-flows
      - name: run-id
        value: $(context.pipelineRun.uid)
      - name: dag-execution-id
        value: $(tasks.for-loop-2-dag-driver.results.execution-id)
      - name: component
        value: '{"dag":{"tasks":{"condition-3":{"componentRef":{"name":"comp-condition-3"},"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"componentInputParameter":"pipelinechannel--flip-coin-op-Output"},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"condition-3"},"triggerPolicy":{"condition":"inputs.parameter_values[''pipelinechannel--loop-item-param-1'']
          == inputs.parameter_values[''pipelinechannel--flip-coin-op-Output'']"}}}},"inputDefinitions":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"parameterType":"STRING"},"pipelinechannel--loop-item-param-1":{"parameterType":"STRING"}}}}'
      - name: task
        value: '{"componentRef":{"name":"comp-for-loop-2"},"dependentTasks":["flip-coin-op"],"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"taskOutputParameter":{"outputParameterKey":"Output","producerTask":"flip-coin-op"}}}},"iteratorPolicy":{"parallelismLimit":2},"parameterIterator":{"itemInput":"pipelinechannel--loop-item-param-1","items":{"raw":"[\"heads\",
          \"tails\"]"}},"taskInfo":{"name":"for-loop-2"}}'
      - name: runtime-config
        value: ""
      - name: mlmd-server-address
        value: metadata-grpc-service.kubeflow.svc.cluster.local
      - name: mlmd-server-port
        value: "8080"
      runAfter:
      - flip-coin-op
      taskSpec:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: PipelineLoop
        metadata: {}
        spec:
          iterateNumeric: iteration-index
          iterateParam: ""
          parallelism: 2
          pipelineSpec:
            params:
            - name: dag-execution-id
              type: string
            - name: iteration-index
              type: string
            tasks:
            - name: print-op
              params:
              - name: type
                value: CONTAINER
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(tasks.condition-4-dag-driver.results.execution-id)
              - name: task
                value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-print-op"},"inputs":{"parameters":{"message":{"runtimeValue":{"constant":"{{$.inputs.parameters[''pipelinechannel--loop-item-param-1'']}}
                  and {{$.inputs.parameters[''pipelinechannel--get-random-int-op-Output'']}}
                  \u003e 5!"}},"pipelinechannel--get-random-int-op-Output":{"componentInputParameter":"pipelinechannel--get-random-int-op-Output"},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"print-op"}}'
              - name: container
                value: '{"args":["--executor_input","{{$}}","--function_to_execute","print_op"],"command":["sh","-c","\nif
                  ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||
                  python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1
                  python3 -m pip install --quiet     --no-warn-script-location ''kfp==2.0.1''
                  \u0026\u0026 \"$0\" \"$@\"\n","sh","-ec","program_path=$(mktemp
                  -d)\nprintf \"%s\" \"$0\" \u003e \"$program_path/ephemeral_component.py\"\npython3
                  -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n","\nimport
                  kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import
                  *\n\ndef print_op(message: str):\n    \"\"\"Print a message.\"\"\"\n    print(message)\n\n"],"image":"python:3.7"}'
              - name: iteration-index
                value: ""
              - name: kubernetes-config
                value: ""
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              - name: component
                value: '{"executorLabel":"exec-print-op","inputDefinitions":{"parameters":{"message":{"parameterType":"STRING"}}}}'
              taskSpec:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
                metadata:
                  annotations:
                    pipelines.kubeflow.org/v2_pipeline: "true"
                  labels:
                    pipelines.kubeflow.org/v2_component: "true"
                spec:
                  taskSpec:
                    params:
                    - name: executor-input
                      type: string
                    - name: execution-id
                      type: string
                    - name: run-id
                      type: string
                    - name: component
                      type: string
                    steps:
                    - command:
                      - launcher-v2
                      - --copy
                      - /tekton/home/launch
                      computeResources: {}
                      image: gcr.io/ml-pipeline/kfp-launcher@sha256:50151a8615c8d6907aa627902dce50a2619fd231f25d1e5c2a72737a2ea4001e
                      imagePullPolicy: Always
                      name: kfp-launcher
                    - args:
                      - sh
                      - -c
                      - |2

                        if ! [ -x "$(command -v pip)" ]; then
                            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
                        fi

                        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.1' && "$0" "$@"
                      - sh
                      - -ec
                      - |
                        program_path=$(mktemp -d)
                        printf "%s" "$0" > "$program_path/ephemeral_component.py"
                        python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
                      - |2+

                        import kfp
                        from kfp import dsl
                        from kfp.dsl import *
                        from typing import *

                        def print_op(message: str):
                            """Print a message."""
                            print(message)

                      - --executor_input
                      - '{{$}}'
                      - --function_to_execute
                      - print_op
                      command:
                      - /tekton/home/launch
                      - --pipeline_name
                      - tutorial-control-flows
                      - --run_id
                      - $(params.run-id)
                      - --execution_id
                      - $(params.execution-id)
                      - --executor_input
                      - $(params.executor-input)
                      - --component_spec
                      - $(params.component)
                      - --pod_name
                      - $(KFP_POD_NAME)
                      - --pod_uid
                      - $(KFP_POD_UID)
                      - --mlmd_server_address
                      - $(METADATA_GRPC_SERVICE_HOST)
                      - --mlmd_server_port
                      - $(METADATA_GRPC_SERVICE_PORT)
                      - --
                      computeResources: {}
                      env:
                      - name: KFP_POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      - name: KFP_POD_UID
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.uid
                      - name: METADATA_GRPC_SERVICE_HOST
                        value: metadata-grpc-service.kubeflow.svc.cluster.local
                      - name: METADATA_GRPC_SERVICE_PORT
                        value: "8080"
                      - name: ML_PIPELINE_SERVICE_HOST
                        value: ml-pipeline.kubeflow.svc.cluster.local
                      - name: ML_PIPELINE_SERVICE_PORT_GRPC
                        value: "8887"
                      - name: MINIO_SERVICE_SERVICE_HOST
                        value: minio-service.kubeflow.svc.cluster.local
                      - name: MINIO_SERVICE_SERVICE_PORT
                        value: "9000"
                      envFrom:
                      - configMapRef:
                          name: metadata-grpc-configmap
                          optional: true
                      image: python:3.7
                      name: user-main
              when:
              - input: $(tasks.condition-4-dag-driver.results.condition)
                operator: notin
                values:
                - "false"
            - name: condition-4-dag-driver
              params:
              - name: type
                value: DAG
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(tasks.condition-3-dag-driver.results.execution-id)
              - name: component
                value: '{"dag":{"tasks":{"print-op":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-print-op"},"inputs":{"parameters":{"message":{"runtimeValue":{"constant":"{{$.inputs.parameters[''pipelinechannel--loop-item-param-1'']}}
                  and {{$.inputs.parameters[''pipelinechannel--get-random-int-op-Output'']}}
                  \u003e 5!"}},"pipelinechannel--get-random-int-op-Output":{"componentInputParameter":"pipelinechannel--get-random-int-op-Output"},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"print-op"}}}},"inputDefinitions":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"parameterType":"STRING"},"pipelinechannel--get-random-int-op-Output":{"parameterType":"NUMBER_INTEGER"},"pipelinechannel--loop-item-param-1":{"parameterType":"STRING"}}}}'
              - name: task
                value: '{"componentRef":{"name":"comp-condition-4"},"dependentTasks":["get-random-int-op"],"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"componentInputParameter":"pipelinechannel--flip-coin-op-Output"},"pipelinechannel--get-random-int-op-Output":{"taskOutputParameter":{"outputParameterKey":"Output","producerTask":"get-random-int-op"}},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"condition-4"},"triggerPolicy":{"condition":"int(inputs.parameter_values[''pipelinechannel--get-random-int-op-Output''])
                  \u003e 5"}}'
              - name: runtime-config
                value: ""
              - name: iteration-index
                value: "-1"
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              runAfter:
              - get-random-int-op
              taskRef:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
            - name: condition-4-dag-pub-driver
              params:
              - name: type
                value: DAG_PUB
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(tasks.condition-4-dag-driver.results.execution-id)
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              runAfter:
              - print-op
              taskRef:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
            - name: print-op-2
              params:
              - name: type
                value: CONTAINER
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(tasks.condition-5-dag-driver.results.execution-id)
              - name: task
                value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-print-op-2"},"inputs":{"parameters":{"message":{"runtimeValue":{"constant":"{{$.inputs.parameters[''pipelinechannel--loop-item-param-1'']}}
                  and {{$.inputs.parameters[''pipelinechannel--get-random-int-op-Output'']}}
                  \u003c= 5!"}},"pipelinechannel--get-random-int-op-Output":{"componentInputParameter":"pipelinechannel--get-random-int-op-Output"},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"print-op-2"}}'
              - name: container
                value: '{"args":["--executor_input","{{$}}","--function_to_execute","print_op"],"command":["sh","-c","\nif
                  ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||
                  python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1
                  python3 -m pip install --quiet     --no-warn-script-location ''kfp==2.0.1''
                  \u0026\u0026 \"$0\" \"$@\"\n","sh","-ec","program_path=$(mktemp
                  -d)\nprintf \"%s\" \"$0\" \u003e \"$program_path/ephemeral_component.py\"\npython3
                  -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n","\nimport
                  kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import
                  *\n\ndef print_op(message: str):\n    \"\"\"Print a message.\"\"\"\n    print(message)\n\n"],"image":"python:3.7"}'
              - name: iteration-index
                value: ""
              - name: kubernetes-config
                value: ""
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              - name: component
                value: '{"executorLabel":"exec-print-op-2","inputDefinitions":{"parameters":{"message":{"parameterType":"STRING"}}}}'
              taskSpec:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
                metadata:
                  annotations:
                    pipelines.kubeflow.org/v2_pipeline: "true"
                  labels:
                    pipelines.kubeflow.org/v2_component: "true"
                spec:
                  taskSpec:
                    params:
                    - name: executor-input
                      type: string
                    - name: execution-id
                      type: string
                    - name: run-id
                      type: string
                    - name: component
                      type: string
                    steps:
                    - command:
                      - launcher-v2
                      - --copy
                      - /tekton/home/launch
                      computeResources: {}
                      image: gcr.io/ml-pipeline/kfp-launcher@sha256:50151a8615c8d6907aa627902dce50a2619fd231f25d1e5c2a72737a2ea4001e
                      imagePullPolicy: Always
                      name: kfp-launcher
                    - args:
                      - sh
                      - -c
                      - |2

                        if ! [ -x "$(command -v pip)" ]; then
                            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
                        fi

                        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.1' && "$0" "$@"
                      - sh
                      - -ec
                      - |
                        program_path=$(mktemp -d)
                        printf "%s" "$0" > "$program_path/ephemeral_component.py"
                        python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
                      - |2+

                        import kfp
                        from kfp import dsl
                        from kfp.dsl import *
                        from typing import *

                        def print_op(message: str):
                            """Print a message."""
                            print(message)

                      - --executor_input
                      - '{{$}}'
                      - --function_to_execute
                      - print_op
                      command:
                      - /tekton/home/launch
                      - --pipeline_name
                      - tutorial-control-flows
                      - --run_id
                      - $(params.run-id)
                      - --execution_id
                      - $(params.execution-id)
                      - --executor_input
                      - $(params.executor-input)
                      - --component_spec
                      - $(params.component)
                      - --pod_name
                      - $(KFP_POD_NAME)
                      - --pod_uid
                      - $(KFP_POD_UID)
                      - --mlmd_server_address
                      - $(METADATA_GRPC_SERVICE_HOST)
                      - --mlmd_server_port
                      - $(METADATA_GRPC_SERVICE_PORT)
                      - --
                      computeResources: {}
                      env:
                      - name: KFP_POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      - name: KFP_POD_UID
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.uid
                      - name: METADATA_GRPC_SERVICE_HOST
                        value: metadata-grpc-service.kubeflow.svc.cluster.local
                      - name: METADATA_GRPC_SERVICE_PORT
                        value: "8080"
                      - name: ML_PIPELINE_SERVICE_HOST
                        value: ml-pipeline.kubeflow.svc.cluster.local
                      - name: ML_PIPELINE_SERVICE_PORT_GRPC
                        value: "8887"
                      - name: MINIO_SERVICE_SERVICE_HOST
                        value: minio-service.kubeflow.svc.cluster.local
                      - name: MINIO_SERVICE_SERVICE_PORT
                        value: "9000"
                      envFrom:
                      - configMapRef:
                          name: metadata-grpc-configmap
                          optional: true
                      image: python:3.7
                      name: user-main
              when:
              - input: $(tasks.condition-5-dag-driver.results.condition)
                operator: notin
                values:
                - "false"
            - name: condition-5-dag-driver
              params:
              - name: type
                value: DAG
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(tasks.condition-3-dag-driver.results.execution-id)
              - name: component
                value: '{"dag":{"tasks":{"print-op-2":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-print-op-2"},"inputs":{"parameters":{"message":{"runtimeValue":{"constant":"{{$.inputs.parameters[''pipelinechannel--loop-item-param-1'']}}
                  and {{$.inputs.parameters[''pipelinechannel--get-random-int-op-Output'']}}
                  \u003c= 5!"}},"pipelinechannel--get-random-int-op-Output":{"componentInputParameter":"pipelinechannel--get-random-int-op-Output"},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"print-op-2"}}}},"inputDefinitions":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"parameterType":"STRING"},"pipelinechannel--get-random-int-op-Output":{"parameterType":"NUMBER_INTEGER"},"pipelinechannel--loop-item-param-1":{"parameterType":"STRING"}}}}'
              - name: task
                value: '{"componentRef":{"name":"comp-condition-5"},"dependentTasks":["get-random-int-op"],"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"componentInputParameter":"pipelinechannel--flip-coin-op-Output"},"pipelinechannel--get-random-int-op-Output":{"taskOutputParameter":{"outputParameterKey":"Output","producerTask":"get-random-int-op"}},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"condition-5"},"triggerPolicy":{"condition":"int(inputs.parameter_values[''pipelinechannel--get-random-int-op-Output''])
                  \u003c= 5"}}'
              - name: runtime-config
                value: ""
              - name: iteration-index
                value: "-1"
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              runAfter:
              - get-random-int-op
              taskRef:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
            - name: condition-5-dag-pub-driver
              params:
              - name: type
                value: DAG_PUB
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(tasks.condition-5-dag-driver.results.execution-id)
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              runAfter:
              - print-op-2
              taskRef:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
            - name: get-random-int-op
              params:
              - name: type
                value: CONTAINER
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(tasks.condition-3-dag-driver.results.execution-id)
              - name: task
                value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-get-random-int-op"},"inputs":{"parameters":{"maximum":{"runtimeValue":{"constant":9}},"minimum":{"runtimeValue":{"constant":0}}}},"taskInfo":{"name":"get-random-int-op"}}'
              - name: container
                value: '{"args":["--executor_input","{{$}}","--function_to_execute","get_random_int_op"],"command":["sh","-c","\nif
                  ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||
                  python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1
                  python3 -m pip install --quiet     --no-warn-script-location ''kfp==2.0.1''
                  \u0026\u0026 \"$0\" \"$@\"\n","sh","-ec","program_path=$(mktemp
                  -d)\nprintf \"%s\" \"$0\" \u003e \"$program_path/ephemeral_component.py\"\npython3
                  -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n","\nimport
                  kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import
                  *\n\ndef get_random_int_op(minimum: int, maximum: int) -\u003e int:\n    \"\"\"Generate
                  a random number between minimum and maximum (inclusive).\"\"\"\n    import
                  random\n    result = random.randint(minimum, maximum)\n    print(result)\n    return
                  result\n\n"],"image":"python:3.7"}'
              - name: iteration-index
                value: ""
              - name: kubernetes-config
                value: ""
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              - name: component
                value: '{"executorLabel":"exec-get-random-int-op","inputDefinitions":{"parameters":{"maximum":{"parameterType":"NUMBER_INTEGER"},"minimum":{"parameterType":"NUMBER_INTEGER"}}},"outputDefinitions":{"parameters":{"Output":{"parameterType":"NUMBER_INTEGER"}}}}'
              taskSpec:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
                metadata:
                  annotations:
                    pipelines.kubeflow.org/v2_pipeline: "true"
                  labels:
                    pipelines.kubeflow.org/v2_component: "true"
                spec:
                  taskSpec:
                    params:
                    - name: executor-input
                      type: string
                    - name: execution-id
                      type: string
                    - name: run-id
                      type: string
                    - name: component
                      type: string
                    steps:
                    - command:
                      - launcher-v2
                      - --copy
                      - /tekton/home/launch
                      computeResources: {}
                      image: gcr.io/ml-pipeline/kfp-launcher@sha256:50151a8615c8d6907aa627902dce50a2619fd231f25d1e5c2a72737a2ea4001e
                      imagePullPolicy: Always
                      name: kfp-launcher
                    - args:
                      - sh
                      - -c
                      - |2

                        if ! [ -x "$(command -v pip)" ]; then
                            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
                        fi

                        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.1' && "$0" "$@"
                      - sh
                      - -ec
                      - |
                        program_path=$(mktemp -d)
                        printf "%s" "$0" > "$program_path/ephemeral_component.py"
                        python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
                      - |2+

                        import kfp
                        from kfp import dsl
                        from kfp.dsl import *
                        from typing import *

                        def get_random_int_op(minimum: int, maximum: int) -> int:
                            """Generate a random number between minimum and maximum (inclusive)."""
                            import random
                            result = random.randint(minimum, maximum)
                            print(result)
                            return result

                      - --executor_input
                      - '{{$}}'
                      - --function_to_execute
                      - get_random_int_op
                      command:
                      - /tekton/home/launch
                      - --pipeline_name
                      - tutorial-control-flows
                      - --run_id
                      - $(params.run-id)
                      - --execution_id
                      - $(params.execution-id)
                      - --executor_input
                      - $(params.executor-input)
                      - --component_spec
                      - $(params.component)
                      - --pod_name
                      - $(KFP_POD_NAME)
                      - --pod_uid
                      - $(KFP_POD_UID)
                      - --mlmd_server_address
                      - $(METADATA_GRPC_SERVICE_HOST)
                      - --mlmd_server_port
                      - $(METADATA_GRPC_SERVICE_PORT)
                      - --
                      computeResources: {}
                      env:
                      - name: KFP_POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      - name: KFP_POD_UID
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.uid
                      - name: METADATA_GRPC_SERVICE_HOST
                        value: metadata-grpc-service.kubeflow.svc.cluster.local
                      - name: METADATA_GRPC_SERVICE_PORT
                        value: "8080"
                      - name: ML_PIPELINE_SERVICE_HOST
                        value: ml-pipeline.kubeflow.svc.cluster.local
                      - name: ML_PIPELINE_SERVICE_PORT_GRPC
                        value: "8887"
                      - name: MINIO_SERVICE_SERVICE_HOST
                        value: minio-service.kubeflow.svc.cluster.local
                      - name: MINIO_SERVICE_SERVICE_PORT
                        value: "9000"
                      envFrom:
                      - configMapRef:
                          name: metadata-grpc-configmap
                          optional: true
                      image: python:3.7
                      name: user-main
              when:
              - input: $(tasks.condition-3-dag-driver.results.condition)
                operator: notin
                values:
                - "false"
            - name: condition-3-dag-driver
              params:
              - name: type
                value: DAG
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(params.dag-execution-id)
              - name: component
                value: '{"dag":{"tasks":{"condition-4":{"componentRef":{"name":"comp-condition-4"},"dependentTasks":["get-random-int-op"],"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"componentInputParameter":"pipelinechannel--flip-coin-op-Output"},"pipelinechannel--get-random-int-op-Output":{"taskOutputParameter":{"outputParameterKey":"Output","producerTask":"get-random-int-op"}},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"condition-4"},"triggerPolicy":{"condition":"int(inputs.parameter_values[''pipelinechannel--get-random-int-op-Output''])
                  \u003e 5"}},"condition-5":{"componentRef":{"name":"comp-condition-5"},"dependentTasks":["get-random-int-op"],"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"componentInputParameter":"pipelinechannel--flip-coin-op-Output"},"pipelinechannel--get-random-int-op-Output":{"taskOutputParameter":{"outputParameterKey":"Output","producerTask":"get-random-int-op"}},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"condition-5"},"triggerPolicy":{"condition":"int(inputs.parameter_values[''pipelinechannel--get-random-int-op-Output''])
                  \u003c= 5"}},"get-random-int-op":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-get-random-int-op"},"inputs":{"parameters":{"maximum":{"runtimeValue":{"constant":9}},"minimum":{"runtimeValue":{"constant":0}}}},"taskInfo":{"name":"get-random-int-op"}}}},"inputDefinitions":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"parameterType":"STRING"},"pipelinechannel--loop-item-param-1":{"parameterType":"STRING"}}}}'
              - name: task
                value: '{"componentRef":{"name":"comp-condition-3"},"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"componentInputParameter":"pipelinechannel--flip-coin-op-Output"},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"condition-3"},"triggerPolicy":{"condition":"inputs.parameter_values[''pipelinechannel--loop-item-param-1'']
                  == inputs.parameter_values[''pipelinechannel--flip-coin-op-Output'']"}}'
              - name: runtime-config
                value: ""
              - name: iteration-index
                value: "-1"
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              taskRef:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
            - name: condition-3-dag-pub-driver
              params:
              - name: type
                value: DAG_PUB
              - name: pipeline-name
                value: tutorial-control-flows
              - name: run-id
                value: $(context.pipelineRun.uid)
              - name: dag-execution-id
                value: $(tasks.condition-3-dag-driver.results.execution-id)
              - name: mlmd-server-address
                value: metadata-grpc-service.kubeflow.svc.cluster.local
              - name: mlmd-server-port
                value: "8080"
              runAfter:
              - print-op-2
              - print-op
              taskRef:
                apiVersion: custom.tekton.dev/v1alpha1
                kind: KFPTask
    - name: for-loop-2-dag-driver
      params:
      - name: type
        value: DAG
      - name: pipeline-name
        value: tutorial-control-flows
      - name: run-id
        value: $(context.pipelineRun.uid)
      - name: dag-execution-id
        value: $(tasks.root-system-dag-driver.results.execution-id)
      - name: component
        value: '{"dag":{"tasks":{"condition-3":{"componentRef":{"name":"comp-condition-3"},"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"componentInputParameter":"pipelinechannel--flip-coin-op-Output"},"pipelinechannel--loop-item-param-1":{"componentInputParameter":"pipelinechannel--loop-item-param-1"}}},"taskInfo":{"name":"condition-3"},"triggerPolicy":{"condition":"inputs.parameter_values[''pipelinechannel--loop-item-param-1'']
          == inputs.parameter_values[''pipelinechannel--flip-coin-op-Output'']"}}}},"inputDefinitions":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"parameterType":"STRING"},"pipelinechannel--loop-item-param-1":{"parameterType":"STRING"}}}}'
      - name: task
        value: '{"componentRef":{"name":"comp-for-loop-2"},"dependentTasks":["flip-coin-op"],"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"taskOutputParameter":{"outputParameterKey":"Output","producerTask":"flip-coin-op"}}}},"iteratorPolicy":{"parallelismLimit":2},"parameterIterator":{"itemInput":"pipelinechannel--loop-item-param-1","items":{"raw":"[\"heads\",
          \"tails\"]"}},"taskInfo":{"name":"for-loop-2"}}'
      - name: runtime-config
        value: ""
      - name: iteration-index
        value: "-1"
      - name: mlmd-server-address
        value: metadata-grpc-service.kubeflow.svc.cluster.local
      - name: mlmd-server-port
        value: "8080"
      runAfter:
      - flip-coin-op
      taskRef:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: KFPTask
    - name: for-loop-2-dag-pub-driver
      params:
      - name: type
        value: DAG_PUB
      - name: pipeline-name
        value: tutorial-control-flows
      - name: run-id
        value: $(context.pipelineRun.uid)
      - name: dag-execution-id
        value: $(tasks.for-loop-2-dag-driver.results.execution-id)
      - name: mlmd-server-address
        value: metadata-grpc-service.kubeflow.svc.cluster.local
      - name: mlmd-server-port
        value: "8080"
      runAfter:
      - for-loop-2-pipelineloop
      taskRef:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: KFPTask
    - name: root-system-dag-driver
      params:
      - name: type
        value: ROOT_DAG
      - name: pipeline-name
        value: tutorial-control-flows
      - name: run-id
        value: $(context.pipelineRun.uid)
      - name: dag-execution-id
        value: "0"
      - name: component
        value: '{"dag":{"tasks":{"flip-coin-op":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-flip-coin-op"},"taskInfo":{"name":"flip-coin-op"}},"for-loop-2":{"componentRef":{"name":"comp-for-loop-2"},"dependentTasks":["flip-coin-op"],"inputs":{"parameters":{"pipelinechannel--flip-coin-op-Output":{"taskOutputParameter":{"outputParameterKey":"Output","producerTask":"flip-coin-op"}}}},"iteratorPolicy":{"parallelismLimit":2},"parameterIterator":{"itemInput":"pipelinechannel--loop-item-param-1","items":{"raw":"[\"heads\",
          \"tails\"]"}},"taskInfo":{"name":"for-loop-2"}}}}}'
      - name: task
        value: ""
      - name: runtime-config
        value: '{}'
      - name: iteration-index
        value: "-1"
      - name: mlmd-server-address
        value: metadata-grpc-service.kubeflow.svc.cluster.local
      - name: mlmd-server-port
        value: "8080"
      taskRef:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: KFPTask
    - name: root-system-dag-pub-driver
      params:
      - name: type
        value: DAG_PUB
      - name: pipeline-name
        value: tutorial-control-flows
      - name: run-id
        value: $(context.pipelineRun.uid)
      - name: dag-execution-id
        value: $(tasks.root-system-dag-driver.results.execution-id)
      - name: mlmd-server-address
        value: metadata-grpc-service.kubeflow.svc.cluster.local
      - name: mlmd-server-port
        value: "8080"
      runAfter:
      - for-loop-2-pipelineloop
      taskRef:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: KFPTask
  taskRunTemplate: {}
status: {}
