// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"

	"github.com/golang/glog"

	"github.com/golang/protobuf/jsonpb"

	"encoding/json"

	pb "github.com/kubeflow/pipelines/api/v2alpha1/go"
)

var pipelineSpecPath = flag.String("pipeline_spec_path", "../../../../samples/v2/hello_world/hw_pipeline_job.json", "Path to pipeline spec file generated by KFP SDK v2")

func main() {
	flag.Parse()
	if pipelineSpecPath == nil || *pipelineSpecPath == "" {
		glog.Fatal("Pipeline spec path is not provided")
	}
	in, err := ioutil.ReadFile(*pipelineSpecPath)
	if err != nil {
		fmt.Println(err)
	}
	jobJson := fmt.Sprintf("%s", in)
	// fmt.Println(specJson)
	job := &pb.PipelineJob{}
	if err := jsonpb.UnmarshalString(jobJson, job); err != nil {
		glog.Fatalf("Failed to parse pipeline job: %v, error: %s", jobJson, err)
	}
	// TODO(Bobgy): can we avoid this marshal to string step?
	marshaler := jsonpb.Marshaler{}
	specJson, err := marshaler.MarshalToString(job.GetPipelineSpec())
	if err != nil {
		glog.Fatalf("Failed marshal pipeline spec to json: %v", err)
	}
	spec := &pb.PipelineSpec{}
	if err := jsonpb.UnmarshalString(specJson, spec); err != nil {
		glog.Fatalf("Failed to parse pipeline spec: %v", err)
	}
	deploymentConfig, err := unmarshalDeploymentConfig(spec)
	if err != nil {
		glog.Fatalf("Failed to unmarshal deployment config: %v", err)
	}
	// fmt.Println(a)
	workflow, err := CompilePipelineSpec(spec, deploymentConfig)
	if err != nil {
		glog.Fatalf("Failed to compile pipeline IR to argo workflow: %v", err)
	}
	workflowInJson, err := json.MarshalIndent(workflow, "", "  ")
	if err != nil {
		glog.Fatalf("Could not marshal the workflow: %v", err)
	}
	fmt.Println(string(workflowInJson))
	glog.Flush()
}

func unmarshalDeploymentConfig(spec *pb.PipelineSpec) (*pb.PipelineDeploymentConfig, error) {
	marshaler := jsonpb.Marshaler{}
	buffer := new(bytes.Buffer)
	if err := marshaler.Marshal(buffer, spec.GetDeploymentConfig()); err != nil {
		return nil, err
	}
	deploymentConfig := &pb.PipelineDeploymentConfig{}
	// Allow unknown '@type' field in the json message.
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err := unmarshaler.Unmarshal(buffer, deploymentConfig); err != nil {
		return nil, err
	}
	return deploymentConfig, nil
}
