{{ define "tupleSerializer" }}
// UnmarshalJSON unmarshals this tuple type from a JSON array
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(raw []byte) error {
  // stage 1, get the array but just the array
  var stage1 []json.RawMessage
  buf := bytes.NewBuffer(raw)
  dec := json.NewDecoder(buf)
  dec.UseNumber()

  if err := dec.Decode(&stage1); err != nil {
    return err
  }

  // stage 2: hydrates struct members with tuple elements
  {{ if .AdditionalItems }}
  var lastIndex int
  {{ end }}
  {{ range $idx, $val := .Properties }}if len(stage1) > {{ $idx }} {
    var data{{ pascalize .Name }} {{ template "dereffedSchemaType" . }}
    buf = bytes.NewBuffer(stage1[{{ $idx }}])
    dec := json.NewDecoder(buf)
    dec.UseNumber()
    if err := dec.Decode(&data{{ pascalize .Name }}); err != nil {
      return err
    }
    {{ .ReceiverName }}.{{ if .IsExported }}{{ pascalize .Name }}{{ else }}{{ camelize .Name }}{{ end }} = {{ if .IsNullable }}&{{ end }}data{{ pascalize .Name }}
    {{ if $.AdditionalItems }}
    lastIndex = {{ $idx }}
    {{ end }}
  }
  {{ end }}
  {{ if .AdditionalItems }}
  // stage 3: hydrates AdditionalItems
  if len(stage1) > lastIndex+1 {
    for _, val := range stage1[lastIndex+1:] {
      var toadd {{ template "schemaType" .AdditionalItems }}
      buf = bytes.NewBuffer(val)
      dec := json.NewDecoder(buf)
      dec.UseNumber()
      if err := dec.Decode({{ if not .AdditionalItems.IsNullable }}&{{ end }}toadd); err != nil {
        return err
      }
      {{ with .AdditionalItems -}}
        {{ $.ValueExpression }}.{{- if .IsExported }}{{ pascalize .Name }}{{ else }}{{ camelize .Name }}{{ end }} = append({{ $.ValueExpression }}.{{- if .IsExported }}{{ pascalize .Name }}{{ else }}{{ camelize .Name }}{{ end }}, toadd)
      {{- end }}
    }
  }
  {{ end }}
  return nil
}

// MarshalJSON marshals this tuple type into a JSON array
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) {
  data := []interface{}{
  {{ range .Properties -}}
    {{.ReceiverName}}.{{ pascalize .Name }},
  {{ end }}
  }
  {{ with .AdditionalItems }}
  for _, v := range {{ $.ValueExpression }}.{{ if .IsExported }}{{ pascalize .Name }}{{ else }}{{ camelize .Name }}{{ end }} {
    data = append(data, v)
  }
  {{ end }}
  return json.Marshal(data)
}
{{ end }}

{{ define "hasDiscriminatedSerializer" }}
// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(raw []byte) error {
  var data {{ template "withoutBaseTypeBody" . }}
  buf := bytes.NewBuffer(raw)
  dec := json.NewDecoder(buf)
  dec.UseNumber()

  if err := dec.Decode(&data); err != nil {
  	return err
  }

  {{ if or .IsBaseType .IsSubType }}
  var base {{ template "JustBaseTypeBody" . }}
  buf = bytes.NewBuffer(raw)
  dec = json.NewDecoder(buf)
  dec.UseNumber()

  if err := dec.Decode(&base); err != nil {
    return err
  }
  {{ end }}

  {{ range .AllOf }}
    {{ if not .IsBaseType }}
      {{ range .Properties }}
        {{ if or .IsBaseType (not .IsExported) }}
  allOf{{ pascalize .Name }}, err := Unmarshal{{ if .IsArray }}{{ pascalize .Items.GoType }}Slice{{ else }}{{ pascalize .GoType }}{{ end }}(bytes.NewBuffer(data.{{ pascalize .Name }}), runtime.JSONConsumer())
  if err != nil && err != io.EOF {
    return err
  }
        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
  {{ range .Properties }}
    {{ if or .IsBaseType (not .IsExported) }}
  prop{{ pascalize .Name }}, err := Unmarshal{{ if .IsArray }}{{ pascalize .Items.GoType }}Slice{{ else }}{{ pascalize .GoType }}{{ end }}(bytes.NewBuffer(data.{{ pascalize .Name }}), runtime.JSONConsumer())
  if err != nil && err != io.EOF {
    return err
  }
    {{ end }}
  {{ end }}

  var result {{ pascalize .Name }}

  {{ range $_, $parent := .AllOf }}
    {{ if $parent.IsAnonymous }}
      {{ if $parent.IsBaseType }}
        {{ range $idx, $val := $parent.Properties }}
          {{ if ne $parent.DiscriminatorField $val.Name }}
            {{ if $val.IsExported }}
  result.{{ camelize $val.Name }}Field = base.{{ pascalize $val.Name }}
            {{ else }}
  result.{{ camelize $val.Name }}Field = allOf{{ pascalize $val.Name }}
            {{ end }}
          {{ else }}
  if base.{{ pascalize $val.Name }} != result.{{ pascalize $val.Name }}() {
    /* Not the type we're looking for. */
    return errors.New(422, "invalid {{$val.Name}} value: %q", base.{{ pascalize $val.Name }})
  }
          {{ end }}
        {{ end }}
      {{ else }}
        {{ range $idx, $val := $parent.Properties }}
          {{ if $val.IsBaseType }}
  result.{{ camelize $val.Name }}Field = allOf{{ pascalize $val.Name }}
          {{ else }}
  result.{{ pascalize $val.Name }} = data.{{ pascalize $val.Name }}
          {{ end }}
        {{ end }}
      {{ end }}
    {{ else }}
      {{ if and $parent.IsBaseType $parent.IsExported }}
        {{ range $idx, $val := $parent.Properties }}
          {{ if ne $parent.DiscriminatorField $val.Name }}
            {{ if $val.IsExported }}
  result.{{ camelize $val.Name }}Field = base.{{ pascalize $val.Name }}
            {{ else }}
  result.{{ camelize $val.Name }}Field = allOf{{ pascalize $val.Name }}
            {{ end }}
          {{ else }}
  if base.{{ pascalize $val.Name }} != result.{{ pascalize $val.Name }}() {
    /* Not the type we're looking for. */
    return errors.New(422, "invalid {{$val.Name}} value: %q", base.{{ pascalize $val.Name }})
  }
          {{ end }}
        {{ end }}
      {{ else }}
  result.{{ $parent.GoType }} = data.{{ $parent.GoType }}
      {{ end }}
    {{ end }}
  {{ end }}
  {{ range .Properties }}
  // {{ .Name }}
  result.{{ if .IsBaseType }}{{ camelize .Name }}Field{{ else }}{{ pascalize .Name }}{{ end }} = {{ if .IsBaseType }}prop{{ pascalize .Name }}{{ else }}data.{{ pascalize .Name}}{{ end }}
  {{ end }}
  *{{ .ReceiverName }} = result

  {{ if .IsAdditionalProperties }}
  // Additional Properties: read raw, remove named properties, and add to map
  rawProps := make(map[string]{{ if .AdditionalProperties }}json.RawMessage{{ else }}interface{}{{ end }})
  if err := json.Unmarshal(raw, &rawProps); err != nil {
    return err
  }

    {{ range .Properties -}}
  delete(rawProps, {{ printf "%q" .Name }})
    {{ end }}

    {{ if .AdditionalProperties }}
  if len(rawProps) > 0 {
    {{ .ValueExpression }} = make(map[string]{{ template "schemaType" .AdditionalProperties }})
    for k, v := range rawProps {
      var toadd {{ template "schemaType" .AdditionalProperties }}
      if err := json.Unmarshal(v, {{if not .AdditionalProperties.IsNullable }}&{{ end }}toadd); err != nil {
        return err
      }
      {{ .ValueExpression }}[k] = toadd
    }
  }
    {{ else }}
      {{ .ValueExpression }} = rawProps
    {{ end }}
  {{ end }}

  return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) { {{ $receiverName := .ReceiverName }}
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal({{ template "withoutBaseTypeBodyOrNonExported" . }})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal({{ template "withBaseTypeBodyAndNonExported" . }})
	if err != nil {
		return nil, err
	}
  {{ if .IsAdditionalProperties }}
  if len({{ .ValueExpression }}) > 0 {
    // make JSON object for the additional properties
    b3, err = json.Marshal({{ .ValueExpression }})
    if err != nil {
      return nil, err
    }
  }
  {{ end }}

	return swag.ConcatJSON(b1, b2, b3), nil
}
{{ end }}

{{ define "allOfSerializer" }} 
  {{- $receiverName := .ReceiverName }}
// UnmarshalJSON unmarshals this object from a JSON structure
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(raw []byte) error {
  {{- range .AllOf }}
    // {{ pascalize .Name }}
    {{- if and .IsAnonymous .Properties }}{{/* unmarshalling properties in all of anonymous objects */}}
      {{- $part :=  pascalize .Name }}
      var data{{ $part }} struct {
      {{- range .Properties }}
        {{- if not .IsBaseType }}
          {{- if not $.IsExported }}
            {{ template "privstructfield" . }}
          {{- else }}
            {{ pascalize .Name}} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if and (not .Required) .IsEmptyOmitted }},omitempty{{ end }}"`
          {{- end }}
        {{ else }}
          {{ if not $.IsExported }}
            {{ template "privstructfield" . }}
          {{ else }}
            {{ pascalize .Name}} json.RawMessage `json:"{{ .Name }}{{ if and (not .Required) .IsEmptyOmitted }},omitempty{{ end }}"`
          {{ end }}
        {{ end }}
      {{- end }}
      {{- if .HasAdditionalProperties }}
        {{ pascalize .AdditionalProperties.Name }}{{ if not .IsExported }}Field{{ end }} map[string]{{ template "schemaType" .AdditionalProperties }} `json:"-"`
      {{- end }}
      {{- if .AdditionalItems }}
        {{ pascalize .AdditionalItems.Name }}{{ if or (not .IsExported) .IsSubType }}Field{{ end }} []{{ template "schemaType" .AdditionalItems }} `json:"-"`
      {{- end }}
  }
  if err := swag.ReadJSON(raw, &data{{ $part }}); err != nil {
    return err
  }
      {{ range .Properties }}
  {{ $receiverName }}.{{ pascalize .Name }} = data{{ $part }}.{{ pascalize .Name }}
      {{ end }}
    {{- else if .IsAnonymous }}
  var {{ varname .Name }} {{ .GoType }}
  if err := {{ if .IsBaseType}}Unmarshal{{ .GoType }}(bytes.NewBuffer(raw), &{{ varname .Name }}){{ else }} swag.ReadJSON(raw, &{{ varname .Name }}){{ end }}; err != nil {
    return err
  }
  {{ .ValueExpression }} = {{ varname .Name }}
    {{- end }}
    {{- if not .IsAnonymous }}{{/* unmarshalling allOf named objects */}}
  var {{ varname .Name }} {{ .GoType }}
  if err := {{ if .IsBaseType}}Unmarshal{{ .GoType }}(bytes.NewBuffer(raw), &{{ varname .Name }}){{ else }} swag.ReadJSON(raw, &{{ varname .Name }}){{ end }}; err != nil {
    return err
  }
  {{ .ReceiverName }}.{{ stripPackage .GoType "" }} = {{ varname .Name }}
    {{ end }}
  {{ end }}
  {{- if .Properties }}
    // now for regular properties
    {{- $part :=  pascalize .Name }}
    var props{{ $part }} struct {
    {{- range .Properties }}
      {{- if not .IsBaseType }}
        {{- if not $.IsExported }}
          {{ template "privstructfield" . }}
        {{- else }}
          {{ pascalize .Name}} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if and (not .Required) .IsEmptyOmitted }},omitempty{{ end }}"`
        {{- end }}
      {{- else }}
        {{- if not $.IsExported }}
          {{ template "privstructfield" . }}
        {{- else }}
          {{ pascalize .Name}} json.RawMessage `json:"{{ .Name }}{{ if and (not .Required) .IsEmptyOmitted }},omitempty{{ end }}"`
        {{- end }}
      {{- end }}
    {{ end }}
    }
    if err := swag.ReadJSON(raw, &props{{ $part }}); err != nil {
       return err
    }
    {{- range .Properties }}
      {{ $receiverName }}.{{ pascalize .Name }} = props{{ $part }}.{{ pascalize .Name }}
    {{ end }}
  {{- end }}
  {{ if .HasAdditionalProperties }}
  // TODO: AdditionalProperties
  {{- end }}
  {{- if .AdditionalItems }}
  // TODO: AdditionalItems
  {{- end }}
  return nil
}

// MarshalJSON marshals this object to a JSON structure
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) {
  _parts := make([][]byte, 0, {{ len .AllOf }})
  {{ range .AllOf }}
    {{- if and .IsAnonymous .Properties }}
      {{- $part :=  pascalize .Name }}
  var data{{ $part }} struct {
      {{- range .Properties }}
        {{- if not .IsBaseType }}
          {{ if not $.IsExported }}
            {{ template "privstructfield" . }}
          {{ else }}
            {{ pascalize .Name}} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if and (not .Required) .IsEmptyOmitted }},omitempty{{ end }}"`
          {{ end }}
        {{- else }}
          {{ if not $.IsExported }}
            {{ template "privstructfield" . }}
          {{ else }}
            {{ pascalize .Name}} json.RawMessage `json:"{{ .Name }}{{ if and (not .Required) .IsEmptyOmitted }},omitempty{{ end }}"`
          {{ end}}
        {{- end }}
      {{ end }}
      {{ if .HasAdditionalProperties }}
        {{ pascalize .AdditionalProperties.Name }}{{ if not .IsExported }}Field{{ end }} map[string]{{ template "schemaType" .AdditionalProperties }} `json:"-"`
      {{ end }}
      {{ if .AdditionalItems }}
        {{ pascalize .AdditionalItems.Name }}{{ if or (not .IsExported) .IsSubType }}Field{{ end }} []{{ template "schemaType" .AdditionalItems }} `json:"-"`
      {{ end }}
  }

      {{ range .Properties }}
  data{{ $part }}.{{ pascalize .Name }} = {{ $receiverName }}.{{ pascalize .Name }}
      {{ end }}

  jsonData{{ $part }}, err{{ $part }} := swag.WriteJSON(data{{ $part }})
  if err{{ $part }} != nil {
    return nil, err{{ $part }}
  }
  _parts = append(_parts, jsonData{{ $part }})
    {{- else if .IsAnonymous }}{{/* unmarshalling anonymous type composition */}}
  {{ varname .Name }}, err := swag.WriteJSON({{ .ValueExpression }})
  if err != nil {
    return nil, err
  }
  _parts = append(_parts, {{ varname .Name }})
    {{- end }}
    {{ if not .IsAnonymous }}
  {{ varname .Name }}, err := swag.WriteJSON({{ $receiverName }}.{{ stripPackage .GoType "" }})
  if err != nil {
    return nil, err
  }
  _parts = append(_parts, {{ varname .Name }})
    {{ end }}
  {{ end }}
  {{- if .Properties }}
    // now for regular properties
    {{- $part :=  pascalize .Name }}
    var props{{ $part }} struct {
    {{- range .Properties }}
      {{- if not .IsBaseType }}
        {{- if not $.IsExported }}
          {{ template "privstructfield" . }}
        {{- else }}
          {{ pascalize .Name}} {{ template "schemaType" . }} `json:"{{ .Name }}{{ if and (not .Required) .IsEmptyOmitted }},omitempty{{ end }}"`
        {{- end }}
      {{- else }}
        {{- if not $.IsExported }}
          {{ template "privstructfield" . }}
        {{- else }}
          {{ pascalize .Name}} json.RawMessage `json:"{{ .Name }}{{ if and (not .Required) .IsEmptyOmitted }},omitempty{{ end }}"`
        {{- end }}
      {{- end }}
    {{ end }}
    }
    {{- range .Properties }}
    props{{ $part }}.{{ pascalize .Name }} = {{ $receiverName }}.{{ pascalize .Name }}
    {{ end }}
    jsonDataProps{{ $part }}, err{{ $part }} := swag.WriteJSON(props{{ $part }})
    if err{{ $part }} != nil {
        return nil, err{{ $part }}
    }
    _parts = append(_parts, jsonDataProps{{ $part }})
  {{- end }}
  {{- if .HasAdditionalProperties }}
  {{- end }}
  {{- if .HasAdditionalItems }}
  {{- end }}
  return swag.ConcatJSON(_parts...), nil
}
{{ end }}

{{ define "schemaSerializer" }}
  {{- if and .IsSubType (not .HasBaseType) }}
    {{ template "hasDiscriminatedSerializer" . }}
  {{ else if .IsTuple }}
    {{ template "tupleSerializer" . }}
  {{ else if .HasBaseType -}}
    {{ template "hasDiscriminatedSerializer" . }}
  {{ else if .IsAdditionalProperties }}
    {{ template "additionalPropertiesSerializer" . }}
  {{- else if and (gt (len .AllOf) 0) (not .IsSubType ) -}}
    {{ template "allOfSerializer" . }}
  {{ end -}}
{{ end }}
