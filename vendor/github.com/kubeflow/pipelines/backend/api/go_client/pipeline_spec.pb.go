// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pipeline_spec.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PipelineSpec struct {
	// Optional input field. The ID of the pipeline user uploaded before.
	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// Optional input field. The marshalled raw argo JSON workflow.
	// This will be deprecated when pipeline_manifest is in use.
	WorkflowManifest string `protobuf:"bytes,2,opt,name=workflow_manifest,json=workflowManifest,proto3" json:"workflow_manifest,omitempty"`
	// Optional input field. The raw pipeline JSON spec.
	PipelineManifest string `protobuf:"bytes,3,opt,name=pipeline_manifest,json=pipelineManifest,proto3" json:"pipeline_manifest,omitempty"`
	// The parameter user provide to inject to the pipeline JSON.
	// If a default value of a parameter exist in the JSON,
	// the value user provided here will replace.
	Parameters           []*Parameter `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PipelineSpec) Reset()         { *m = PipelineSpec{} }
func (m *PipelineSpec) String() string { return proto.CompactTextString(m) }
func (*PipelineSpec) ProtoMessage()    {}
func (*PipelineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ae2a94ab58e513c, []int{0}
}

func (m *PipelineSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineSpec.Unmarshal(m, b)
}
func (m *PipelineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineSpec.Marshal(b, m, deterministic)
}
func (m *PipelineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineSpec.Merge(m, src)
}
func (m *PipelineSpec) XXX_Size() int {
	return xxx_messageInfo_PipelineSpec.Size(m)
}
func (m *PipelineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineSpec proto.InternalMessageInfo

func (m *PipelineSpec) GetPipelineId() string {
	if m != nil {
		return m.PipelineId
	}
	return ""
}

func (m *PipelineSpec) GetWorkflowManifest() string {
	if m != nil {
		return m.WorkflowManifest
	}
	return ""
}

func (m *PipelineSpec) GetPipelineManifest() string {
	if m != nil {
		return m.PipelineManifest
	}
	return ""
}

func (m *PipelineSpec) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func init() {
	proto.RegisterType((*PipelineSpec)(nil), "api.PipelineSpec")
}

func init() { proto.RegisterFile("pipeline_spec.proto", fileDescriptor_7ae2a94ab58e513c) }

var fileDescriptor_7ae2a94ab58e513c = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0xc8, 0x2c, 0x48,
	0xcd, 0xc9, 0xcc, 0x4b, 0x8d, 0x2f, 0x2e, 0x48, 0x4d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x4e, 0x2c, 0xc8, 0x94, 0xe2, 0x2f, 0x48, 0x2c, 0x4a, 0xcc, 0x4d, 0x2d, 0x49, 0x2d, 0x82,
	0x88, 0x2a, 0xed, 0x64, 0xe4, 0xe2, 0x09, 0x80, 0xaa, 0x0e, 0x2e, 0x48, 0x4d, 0x16, 0x92, 0xe7,
	0xe2, 0x86, 0xeb, 0xce, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x82, 0x09, 0x79,
	0xa6, 0x08, 0x69, 0x73, 0x09, 0x96, 0xe7, 0x17, 0x65, 0xa7, 0xe5, 0xe4, 0x97, 0xc7, 0xe7, 0x26,
	0xe6, 0x65, 0xa6, 0xa5, 0x16, 0x97, 0x48, 0x30, 0x81, 0x95, 0x09, 0xc0, 0x24, 0x7c, 0xa1, 0xe2,
	0x20, 0xc5, 0x70, 0xd3, 0xe0, 0x8a, 0x99, 0x21, 0x8a, 0x61, 0x12, 0x70, 0xc5, 0x7a, 0x5c, 0x5c,
	0x70, 0xe7, 0x15, 0x4b, 0xb0, 0x28, 0x30, 0x6b, 0x70, 0x1b, 0xf1, 0xe9, 0x25, 0x16, 0x64, 0xea,
	0x05, 0xc0, 0x84, 0x83, 0x90, 0x54, 0x24, 0xb1, 0x81, 0xbd, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x7f, 0xd3, 0x17, 0x98, 0xef, 0x00, 0x00, 0x00,
}
