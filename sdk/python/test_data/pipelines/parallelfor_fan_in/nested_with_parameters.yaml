# PIPELINE DEFINITION
# Name: math-pipeline
# Outputs:
#    Output: list
components:
  comp-add:
    executorLabel: exec-add
    inputDefinitions:
      parameters:
        nums:
          parameterType: LIST
    outputDefinitions:
      parameters:
        Output:
          parameterType: NUMBER_INTEGER
  comp-add-two-nums:
    executorLabel: exec-add-two-nums
    inputDefinitions:
      parameters:
        x:
          parameterType: NUMBER_INTEGER
        y:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        Output:
          parameterType: NUMBER_INTEGER
  comp-double:
    executorLabel: exec-double
    inputDefinitions:
      parameters:
        num:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        Output:
          parameterType: NUMBER_INTEGER
  comp-double-2:
    executorLabel: exec-double-2
    inputDefinitions:
      parameters:
        num:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        Output:
          parameterType: NUMBER_INTEGER
  comp-for-loop-2:
    dag:
      outputs:
        parameters:
          pipelinechannel--add-two-nums-Output:
            valueFromParameter:
              outputParameterKey: pipelinechannel--add-two-nums-Output
              producerSubtask: for-loop-4
      tasks:
        for-loop-4:
          componentRef:
            name: comp-for-loop-4
          inputs:
            parameters:
              pipelinechannel--loop-item-param-1:
                componentInputParameter: pipelinechannel--loop-item-param-1
          parameterIterator:
            itemInput: pipelinechannel--loop-item-param-3
            items:
              raw: '[1, 2, 3]'
          taskInfo:
            name: for-loop-4
    inputDefinitions:
      parameters:
        pipelinechannel--loop-item-param-1:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        pipelinechannel--add-two-nums-Output:
          parameterType: NUMBER_INTEGER
  comp-for-loop-4:
    dag:
      outputs:
        parameters:
          pipelinechannel--add-two-nums-Output:
            valueFromParameter:
              outputParameterKey: Output
              producerSubtask: add-two-nums
      tasks:
        add-two-nums:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-add-two-nums
          dependentTasks:
          - double
          - double-2
          inputs:
            parameters:
              x:
                taskOutputParameter:
                  outputParameterKey: Output
                  producerTask: double
              y:
                taskOutputParameter:
                  outputParameterKey: Output
                  producerTask: double-2
          taskInfo:
            name: add-two-nums
        double:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-double
          inputs:
            parameters:
              num:
                componentInputParameter: pipelinechannel--loop-item-param-1
          taskInfo:
            name: double
        double-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-double-2
          inputs:
            parameters:
              num:
                componentInputParameter: pipelinechannel--loop-item-param-3
          taskInfo:
            name: double-2
    inputDefinitions:
      parameters:
        pipelinechannel--loop-item-param-1:
          parameterType: NUMBER_INTEGER
        pipelinechannel--loop-item-param-3:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        pipelinechannel--add-two-nums-Output:
          parameterType: NUMBER_INTEGER
deploymentSpec:
  executors:
    exec-add:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - add
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.0-beta.14'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)

          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef add(nums: List[int]) -> int:\n    import itertools\n    return\
          \ sum(itertools.chain(*nums))\n\n"
        image: python:3.7
    exec-add-two-nums:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - add_two_nums
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.0-beta.14'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)

          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef add_two_nums(x: int, y: int) -> int:\n    return x + y\n\n"
        image: python:3.7
    exec-double:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - double
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.0-beta.14'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)

          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef double(num: int) -> int:\n    return 2 * num\n\n"
        image: python:3.7
    exec-double-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - double
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet     --no-warn-script-location 'kfp==2.0.0-beta.14'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)

          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef double(num: int) -> int:\n    return 2 * num\n\n"
        image: python:3.7
pipelineInfo:
  name: math-pipeline
root:
  dag:
    outputs:
      parameters:
        Output:
          valueFromParameter:
            outputParameterKey: pipelinechannel--add-two-nums-Output
            producerSubtask: for-loop-2
    tasks:
      add:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-add
        dependentTasks:
        - for-loop-2
        inputs:
          parameters:
            nums:
              taskOutputParameter:
                outputParameterKey: pipelinechannel--add-two-nums-Output
                producerTask: for-loop-2
        taskInfo:
          name: add
      for-loop-2:
        componentRef:
          name: comp-for-loop-2
        parameterIterator:
          itemInput: pipelinechannel--loop-item-param-1
          items:
            raw: '[1, 2, 3]'
        taskInfo:
          name: for-loop-2
  outputDefinitions:
    parameters:
      Output:
        parameterType: LIST
schemaVersion: 2.1.0
sdkVersion: kfp-2.0.0-beta.14
