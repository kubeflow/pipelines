{
  "pipelineSpec": {
    "pipelineInfo": {
      "name": "pipeline-with-pipelineparam-containing-format"
    },
    "sdkVersion": "kfp-1.4.0",
    "components": {
      "comp-print-op": {
        "inputDefinitions": {
          "parameters": {
            "s": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        },
        "executorLabel": "exec-print-op"
      }
    },
    "schemaVersion": "2.0.0",
    "deploymentSpec": {
      "executors": {
        "exec-print-op": {
          "container": {
            "image": "python:3.7",
            "args": [
              "--s",
              "{{$.inputs.parameters['s']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(s):\n  print(s)\n  return s\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='')\n_parser.add_argument(\"--s\", dest=\"s\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = print_op(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ]
          }
        }
      }
    },
    "root": {
      "dag": {
        "tasks": {
          "task-print-op": {
            "inputs": {
              "parameters": {
                "s": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "Hello {{$.inputs.parameters['s--name']}}"
                    }
                  }
                },
                "s--name": {
                  "componentInputParameter": "name"
                }
              }
            },
            "componentRef": {
              "name": "comp-print-op"
            },
            "taskInfo": {
              "name": "task-print-op"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "name": {
            "type": "STRING"
          }
        }
      }
    }
  },
  "runtimeConfig": {
    "parameters": {
      "name": {
        "stringValue": "KFP"
      }
    },
    "gcsOutputDirectory": "dummy_root"
  }
}
