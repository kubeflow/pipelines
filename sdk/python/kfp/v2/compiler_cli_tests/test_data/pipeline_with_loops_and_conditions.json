{
  "pipelineSpec": {
    "sdkVersion": "kfp-1.5.0-rc.3",
    "deploymentSpec": {
      "executors": {
        "exec-flip-coin-op": {
          "container": {
            "args": [
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "image": "python:3.7",
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def flip_coin_op():\n  \"\"\"Flip a coin and output heads or tails randomly.\"\"\"\n  import random\n  result = 'heads' if random.randint(0, 1) == 0 else 'tails'\n  return result\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Flip coin op', description='Flip a coin and output heads or tails randomly.')\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = flip_coin_op(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ]
          }
        },
        "exec-print-op-3": {
          "container": {
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(msg):\n  print(msg)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='')\n_parser.add_argument(\"--msg\", dest=\"msg\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ],
            "args": [
              "--msg",
              "{{$.inputs.parameters['msg']}}"
            ],
            "image": "python:3.7"
          }
        },
        "exec-print-op-5": {
          "container": {
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(msg):\n  print(msg)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='')\n_parser.add_argument(\"--msg\", dest=\"msg\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ],
            "image": "python:3.7",
            "args": [
              "--msg",
              "{{$.inputs.parameters['msg']}}"
            ]
          }
        },
        "exec-print-op": {
          "container": {
            "args": [
              "--msg",
              "{{$.inputs.parameters['msg']}}"
            ],
            "image": "python:3.7",
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(msg):\n  print(msg)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='')\n_parser.add_argument(\"--msg\", dest=\"msg\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ]
          }
        },
        "exec-print-op-2": {
          "container": {
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(msg):\n  print(msg)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='')\n_parser.add_argument(\"--msg\", dest=\"msg\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ],
            "args": [
              "--msg",
              "{{$.inputs.parameters['msg']}}"
            ],
            "image": "python:3.7"
          }
        },
        "exec-args-generator-op": {
          "container": {
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def args_generator_op():\n  import json\n  return json.dumps(\n      [{'A_a': '1', 'B_b': '2'}, {'A_a': '10', 'B_b': '20'}], sort_keys=True)\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Args generator op', description='')\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = args_generator_op(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7",
            "args": [
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ]
          }
        },
        "exec-print-op-4": {
          "container": {
            "image": "python:3.7",
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def print_op(msg):\n  print(msg)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Print op', description='')\n_parser.add_argument(\"--msg\", dest=\"msg\", type=str, required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs = print_op(**_parsed_args)\n"
            ],
            "args": [
              "--msg",
              "{{$.inputs.parameters['msg']}}"
            ]
          }
        }
      }
    },
    "root": {
      "inputDefinitions": {
        "parameters": {
          "text_parameter": {
            "type": "STRING"
          }
        }
      },
      "dag": {
        "tasks": {
          "task-condition-1": {
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value != 'no-such-result'"
            },
            "inputs": {
              "parameters": {
                "pipelineparam--text_parameter": {
                  "componentInputParameter": "text_parameter"
                },
                "pipelineparam--flip-coin-op-Output": {
                  "taskOutputParameter": {
                    "producerTask": "task-flip-coin-op",
                    "outputParameterKey": "Output"
                  }
                }
              }
            },
            "dependentTasks": [
              "task-flip-coin-op"
            ],
            "componentRef": {
              "name": "comp-condition-1"
            },
            "taskInfo": {
              "name": "task-condition-1"
            }
          },
          "task-flip-coin-op": {
            "taskInfo": {
              "name": "task-flip-coin-op"
            },
            "componentRef": {
              "name": "comp-flip-coin-op"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "pipelineInfo": {
      "name": "pipeline-with-loops-and-conditions"
    },
    "components": {
      "comp-condition-1": {
        "dag": {
          "tasks": {
            "task-for-loop-2": {
              "dependentTasks": [
                "task-args-generator-op"
              ],
              "componentRef": {
                "name": "comp-for-loop-2"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  },
                  "pipelineparam--args-generator-op-Output": {
                    "taskOutputParameter": {
                      "producerTask": "task-args-generator-op",
                      "outputParameterKey": "Output"
                    }
                  },
                  "pipelineparam--text_parameter": {
                    "componentInputParameter": "pipelineparam--text_parameter"
                  }
                }
              },
              "taskInfo": {
                "name": "task-for-loop-2"
              }
            },
            "task-args-generator-op": {
              "taskInfo": {
                "name": "task-args-generator-op"
              },
              "componentRef": {
                "name": "comp-args-generator-op"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--text_parameter": {
              "type": "STRING"
            },
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-5": {
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        },
        "dag": {
          "tasks": {
            "task-for-loop-7": {
              "componentRef": {
                "name": "comp-for-loop-7"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  }
                }
              },
              "taskInfo": {
                "name": "task-for-loop-7"
              }
            }
          }
        }
      },
      "comp-args-generator-op": {
        "executorLabel": "exec-args-generator-op",
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-4": {
        "executorLabel": "exec-print-op-4",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-print-op-2": {
        "executorLabel": "exec-print-op-2",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-flip-coin-op": {
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        },
        "executorLabel": "exec-flip-coin-op"
      },
      "comp-condition-3": {
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--args-generator-op-Output-loop-item": {
              "type": "STRING"
            }
          }
        },
        "dag": {
          "tasks": {
            "task-print-op-3": {
              "componentRef": {
                "name": "comp-print-op-3"
              },
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"A_a\"]"
                  }
                }
              },
              "taskInfo": {
                "name": "task-print-op-3"
              }
            }
          }
        }
      },
      "comp-print-op-5": {
        "executorLabel": "exec-print-op-5",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-for-loop-2-iterator": {
        "dag": {
          "tasks": {
            "task-condition-5": {
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value != 'no-such-result'"
              },
              "taskInfo": {
                "name": "task-condition-5"
              },
              "componentRef": {
                "name": "comp-condition-5"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  }
                }
              }
            },
            "task-print-op-2": {
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item"
                  }
                }
              },
              "componentRef": {
                "name": "comp-print-op-2"
              },
              "taskInfo": {
                "name": "task-print-op-2"
              }
            },
            "task-condition-4": {
              "componentRef": {
                "name": "comp-condition-4"
              },
              "taskInfo": {
                "name": "task-condition-4"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--args-generator-op-Output-loop-item": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item"
                  },
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  }
                }
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value == 'tails'"
              }
            },
            "task-condition-3": {
              "componentRef": {
                "name": "comp-condition-3"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--args-generator-op-Output-loop-item": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item"
                  },
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  }
                }
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--flip-coin-op-Output'].string_value == 'heads'"
              },
              "taskInfo": {
                "name": "task-condition-3"
              }
            },
            "task-print-op": {
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--text_parameter"
                  }
                }
              },
              "componentRef": {
                "name": "comp-print-op"
              },
              "taskInfo": {
                "name": "task-print-op"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--args-generator-op-Output-loop-item": {
              "type": "STRING"
            },
            "pipelineparam--text_parameter": {
              "type": "STRING"
            },
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-for-loop-2": {
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--args-generator-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--text_parameter": {
              "type": "STRING"
            }
          }
        },
        "dag": {
          "tasks": {
            "task-for-loop-2-iterator": {
              "taskInfo": {
                "name": "task-for-loop-2-iterator"
              },
              "componentRef": {
                "name": "comp-for-loop-2-iterator"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  },
                  "pipelineparam--args-generator-op-Output": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output"
                  },
                  "pipelineparam--text_parameter": {
                    "componentInputParameter": "pipelineparam--text_parameter"
                  }
                }
              },
              "parameterIterator": {
                "itemInput": "pipelineparam--args-generator-op-Output-loop-item",
                "items": {
                  "inputParameter": "pipelineparam--args-generator-op-Output"
                }
              }
            }
          }
        }
      },
      "comp-print-op": {
        "executorLabel": "exec-print-op",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-for-loop-7-iterator": {
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--loop-item-param-6": {
              "type": "STRING"
            },
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        },
        "dag": {
          "tasks": {
            "task-print-op-5": {
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--loop-item-param-6"
                  }
                }
              },
              "componentRef": {
                "name": "comp-print-op-5"
              },
              "taskInfo": {
                "name": "task-print-op-5"
              }
            }
          }
        }
      },
      "comp-print-op-3": {
        "executorLabel": "exec-print-op-3",
        "inputDefinitions": {
          "parameters": {
            "msg": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-for-loop-7": {
        "dag": {
          "tasks": {
            "task-for-loop-7-iterator": {
              "taskInfo": {
                "name": "task-for-loop-7-iterator"
              },
              "componentRef": {
                "name": "comp-for-loop-7-iterator"
              },
              "inputs": {
                "parameters": {
                  "pipelineparam--flip-coin-op-Output": {
                    "componentInputParameter": "pipelineparam--flip-coin-op-Output"
                  }
                }
              },
              "parameterIterator": {
                "items": {
                  "raw": "[\"a\", \"b\", \"c\"]"
                },
                "itemInput": "pipelineparam--loop-item-param-6"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-4": {
        "dag": {
          "tasks": {
            "task-print-op-4": {
              "inputs": {
                "parameters": {
                  "msg": {
                    "componentInputParameter": "pipelineparam--args-generator-op-Output-loop-item",
                    "parameterExpressionSelector": "parseJson(string_value)[\"B_b\"]"
                  }
                }
              },
              "componentRef": {
                "name": "comp-print-op-4"
              },
              "taskInfo": {
                "name": "task-print-op-4"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--flip-coin-op-Output": {
              "type": "STRING"
            },
            "pipelineparam--args-generator-op-Output-loop-item": {
              "type": "STRING"
            }
          }
        }
      }
    }
  },
  "runtimeConfig": {
    "parameters": {
      "text_parameter": {
        "stringValue": "Hello world!"
      }
    },
    "gcsOutputDirectory": "dummy_root"
  }
}