{'ContainerOp': {'is_exit_handler': False, 'human_name': 'Generate resouce request', 'display_name': None, 'name': 'generate-resouce-request', 'node_selector': {}, 'volumes': [], 'tolerations': [], 'affinity': {}, 'pod_annotations': {}, 'pod_labels': {'pipelines.kubeflow.org/kfp_sdk_version': '1.6.0-rc.0', 'pipelines.kubeflow.org/pipeline-sdk-type': 'kfp'}, 'num_retries': 0, 'retry_policy': None, 'backoff_factor': None, 'backoff_duration': None, 'backoff_max_duration': None, 'timeout': 0, 'init_containers': [], 'sidecars': [], 'loop_args': None, '_inputs': [], 'dependent_names': [], 'attrs_with_pipelineparams': ['node_selector', 'volumes', 'pod_annotations', 'pod_labels', 'num_retries', 'init_containers', 'sidecars', 'tolerations', '_container', 'artifact_arguments', '_parameter_arguments'], '_is_v2': False, '_container': {'args': ['----output-paths', '/tmp/outputs/memory/data', '/tmp/outputs/cpu/data'], 'command': ['sh', '-ec', 'program_path=$(mktemp)\nprintf "%s" "$0" > "$program_path"\npython3 -u "$program_path" "$@"\n', 'def generate_resouce_request():\n    \'\'\'Returns the memory and cpu request\'\'\'\n    from collections import namedtuple\n\n    resouce_output = namedtuple(\'output\', [\'memory\', \'cpu\'])\n    return resouce_output("500Mi", "200m")\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError(\'Value "{}" has type "{}" instead of str.\'.format(str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=\'Generate resouce request\', description=\'Returns the memory and cpu request\')\n_parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=2)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop("_output_paths", [])\n\n_outputs = generate_resouce_request(**_parsed_args)\n\n_output_serializers = [\n    _serialize_str,\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, \'w\') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n'], 'image': 'python:3.7'}, 'add_env_from': <function deprecation_warning.<locals>._wrapped at 0x7f9c80368680>, 'add_env_variable': <function deprecation_warning.<locals>._wrapped at 0x7f9c803687a0>, 'add_port': <function deprecation_warning.<locals>._wrapped at 0x7f9c803688c0>, 'add_resource_limit': <function deprecation_warning.<locals>._wrapped at 0x7f9c803689e0>, 'add_resource_request': <function deprecation_warning.<locals>._wrapped at 0x7f9c80368b00>, 'add_volume_devices': <function deprecation_warning.<locals>._wrapped at 0x7f9c80368c20>, 'add_volume_mount': <function deprecation_warning.<locals>._wrapped at 0x7f9c80368d40>, 'set_cpu_limit': <function deprecation_warning.<locals>._wrapped at 0x7f9c80368e60>, 'set_cpu_request': <function deprecation_warning.<locals>._wrapped at 0x7f9c80368f80>, 'set_ephemeral_storage_limit': <function deprecation_warning.<locals>._wrapped at 0x7f9c803770e0>, 'set_ephemeral_storage_request': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377200>, 'set_gpu_limit': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377320>, 'set_image_pull_policy': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377440>, 'set_lifecycle': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377560>, 'set_liveness_probe': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377680>, 'set_memory_limit': <function deprecation_warning.<locals>._wrapped at 0x7f9c803777a0>, 'set_memory_request': <function deprecation_warning.<locals>._wrapped at 0x7f9c803778c0>, 'set_readiness_probe': <function deprecation_warning.<locals>._wrapped at 0x7f9c803779e0>, 'set_security_context': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377b00>, 'set_stdin': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377c20>, 'set_stdin_once': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377d40>, 'set_termination_message_path': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377e60>, 'set_termination_message_policy': <function deprecation_warning.<locals>._wrapped at 0x7f9c80377f80>, 'set_tty': <function deprecation_warning.<locals>._wrapped at 0x7f9c803790e0>, 'input_artifact_paths': {}, 'artifact_arguments': {}, 'file_outputs': {'memory': '/tmp/outputs/memory/data', 'cpu': '/tmp/outputs/cpu/data'}, 'output_artifact_paths': {}, '_metadata': ComponentSpec(name='Generate resouce request', description='Returns the memory and cpu request', metadata=None, inputs=None, outputs=[OutputSpec(name='memory', type='String', description=None, annotations=None), OutputSpec(name='cpu', type='String', description=None, annotations=None)], implementation=ContainerImplementation(container=ContainerSpec(image='python:3.7', command=['sh', '-ec', 'program_path=$(mktemp)\nprintf "%s" "$0" > "$program_path"\npython3 -u "$program_path" "$@"\n', 'def generate_resouce_request():\n    \'\'\'Returns the memory and cpu request\'\'\'\n    from collections import namedtuple\n\n    resouce_output = namedtuple(\'output\', [\'memory\', \'cpu\'])\n    return resouce_output("500Mi", "200m")\n\ndef _serialize_str(str_value: str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError(\'Value "{}" has type "{}" instead of str.\'.format(str(str_value), str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=\'Generate resouce request\', description=\'Returns the memory and cpu request\')\n_parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=2)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop("_output_paths", [])\n\n_outputs = generate_resouce_request(**_parsed_args)\n\n_output_serializers = [\n    _serialize_str,\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, \'w\') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n'], args=['----output-paths', OutputPathPlaceholder(output_name='memory'), OutputPathPlaceholder(output_name='cpu')], env=None, file_outputs=None)), version='google.com/cloud/pipelines/component/v1'), '_parameter_arguments': {}, 'execution_options': ExecutionOptionsSpec(retry_strategy=None, caching_strategy=CachingStrategySpec(max_cache_staleness=None)), 'outputs': {'memory': {{pipelineparam:op=generate-resouce-request;name=memory}}, 'cpu': {{pipelineparam:op=generate-resouce-request;name=cpu}}}, 'output': <kfp.dsl._container_op._MultipleOutputsError object at 0x7f9c8037c050>, 'pvolumes': {}, 'pvolume': None, '_component_ref': ComponentReference(name=None, digest=None, tag=None, url=None, spec=None), 'component_spec': output_definitions {
  parameters {
    key: "cpu"
    value {
      type: STRING
    }
  }
  parameters {
    key: "memory"
    value {
      type: STRING
    }
  }
}
executor_label: "exec-generate-resouce-request"
, 'task_spec': task_info {
  name: "task-generate-resouce-request"
}
component_ref {
  name: "comp-generate-resouce-request"
}
}}