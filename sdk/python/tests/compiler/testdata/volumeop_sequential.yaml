apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: volumeop-sequential-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.7.0, pipelines.kubeflow.org/pipeline_compilation_time: '2021-08-09T15:45:22.287975',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "The third example of the
      design doc.", "name": "VolumeOp Sequential"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.7.0}
spec:
  entrypoint: volumeop-sequential
  templates:
  - name: mypvc
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '{{workflow.name}}-newpvc'
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 10Gi
    outputs:
      parameters:
      - name: mypvc-manifest
        valueFrom: {jsonPath: '{}'}
      - name: mypvc-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: mypvc-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.7.0
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  - name: step1
    container:
      args: [echo 1|tee /data/file1]
      command: [sh, -c]
      image: library/bash:4.4.23
      volumeMounts:
      - {mountPath: /data, name: mypvc}
    inputs:
      parameters:
      - {name: mypvc-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.7.0
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: mypvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.mypvc-name}}'}
  - name: step2
    container:
      args: [cp /data/file1 /data/file2]
      command: [sh, -c]
      image: library/bash:4.4.23
      volumeMounts:
      - {mountPath: /data, name: mypvc}
    inputs:
      parameters:
      - {name: mypvc-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.7.0
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: mypvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.mypvc-name}}'}
  - name: step3
    container:
      command: [cat, /mnt/file1, /mnt/file2]
      image: library/bash:4.4.23
      volumeMounts:
      - {mountPath: /mnt, name: mypvc}
    inputs:
      parameters:
      - {name: mypvc-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.7.0
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: mypvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.mypvc-name}}'}
  - name: volumeop-sequential
    dag:
      tasks:
      - {name: mypvc, template: mypvc}
      - name: step1
        template: step1
        dependencies: [mypvc]
        arguments:
          parameters:
          - {name: mypvc-name, value: '{{tasks.mypvc.outputs.parameters.mypvc-name}}'}
      - name: step2
        template: step2
        dependencies: [mypvc, step1]
        arguments:
          parameters:
          - {name: mypvc-name, value: '{{tasks.mypvc.outputs.parameters.mypvc-name}}'}
      - name: step3
        template: step3
        dependencies: [mypvc, step2]
        arguments:
          parameters:
          - {name: mypvc-name, value: '{{tasks.mypvc.outputs.parameters.mypvc-name}}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
