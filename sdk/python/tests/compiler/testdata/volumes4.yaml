# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: example-4-
spec:
  arguments:
    parameters:
    - name: url
  entrypoint: example-4
  serviceAccountName: pipeline-runner
  templates:
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: vol1-name
            value: '{{tasks.vol1.outputs.parameters.vol1-name}}'
        dependencies:
        - step1-ingest
        name: snap1
        template: snap1
      - arguments:
          parameters:
          - name: vol2-name
            value: '{{tasks.vol2.outputs.parameters.vol2-name}}'
        dependencies:
        - step2-gunzip
        name: snap2
        template: snap2
      - arguments:
          parameters:
          - name: url
            value: '{{inputs.parameters.url}}'
        dependencies:
        - vol1
        name: step1-ingest
        template: step1-ingest
      - dependencies:
        - vol2
        name: step2-gunzip
        template: step2-gunzip
      - dependencies:
        - vol3
        name: step3-output
        template: step3-output
      - name: vol1
        template: vol1
      - arguments:
          parameters:
          - name: snap1-name
            value: '{{tasks.snap1.outputs.parameters.snap1-name}}'
          - name: snap1-size
            value: '{{tasks.snap1.outputs.parameters.snap1-size}}'
        dependencies:
        - snap1
        name: vol2
        template: vol2
      - arguments:
          parameters:
          - name: snap2-name
            value: '{{tasks.snap2.outputs.parameters.snap2-name}}'
          - name: snap2-size
            value: '{{tasks.snap2.outputs.parameters.snap2-size}}'
        dependencies:
        - snap2
        name: vol3
        template: vol3
    inputs:
      parameters:
      - name: url
    name: example-4
  - inputs:
      parameters:
      - name: vol1-name
    name: snap1
    outputs:
      parameters:
      - name: snap1-name
        valueFrom:
          jsonPath: '{.metadata.name}'
      - name: snap1-size
        valueFrom:
          jsonPath: '{.status.restoreSize}'
    resource:
      action: create
      manifest: "apiVersion: snapshot.storage.k8s.io/v1alpha1\nkind: VolumeSnapshot\n\
        metadata:\n  name: '{{workflow.name}}-snap1'\nspec:\n  source:\n    kind:\
        \ PersistentVolumeClaim\n    name: '{{inputs.parameters.vol1-name}}'\n"
      successCondition: status.readyToUse == true
  - inputs:
      parameters:
      - name: vol2-name
    name: snap2
    outputs:
      parameters:
      - name: snap2-name
        valueFrom:
          jsonPath: '{.metadata.name}'
      - name: snap2-size
        valueFrom:
          jsonPath: '{.status.restoreSize}'
    resource:
      action: create
      manifest: "apiVersion: snapshot.storage.k8s.io/v1alpha1\nkind: VolumeSnapshot\n\
        metadata:\n  name: '{{workflow.name}}-snap2'\nspec:\n  source:\n    kind:\
        \ PersistentVolumeClaim\n    name: '{{inputs.parameters.vol2-name}}'\n"
      successCondition: status.readyToUse == true
  - container:
      args:
      - gsutil cat {{inputs.parameters.url}} | tee /data/file1.gz
      command:
      - sh
      - -c
      image: google/cloud-sdk:216.0.0
      volumeMounts:
      - mountPath: /data
        name: vol1
    inputs:
      parameters:
      - name: url
    name: step1-ingest
    outputs:
      artifacts:
      - name: mlpipeline-ui-metadata
        path: /mlpipeline-ui-metadata.json
        s3:
          accessKeySecret:
            key: accesskey
            name: mlpipeline-minio-artifact
          bucket: mlpipeline
          endpoint: minio-service.kubeflow:9000
          insecure: true
          key: runs/{{workflow.uid}}/{{pod.name}}/mlpipeline-ui-metadata.tgz
          secretKeySecret:
            key: secretkey
            name: mlpipeline-minio-artifact
      - name: mlpipeline-metrics
        path: /mlpipeline-metrics.json
        s3:
          accessKeySecret:
            key: accesskey
            name: mlpipeline-minio-artifact
          bucket: mlpipeline
          endpoint: minio-service.kubeflow:9000
          insecure: true
          key: runs/{{workflow.uid}}/{{pod.name}}/mlpipeline-metrics.tgz
          secretKeySecret:
            key: secretkey
            name: mlpipeline-minio-artifact
  - container:
      command:
      - gunzip
      - /data/file1.gz
      image: library/bash:4.4.23
      volumeMounts:
      - mountPath: /data
        name: vol2
    name: step2-gunzip
    outputs:
      artifacts:
      - name: mlpipeline-ui-metadata
        path: /mlpipeline-ui-metadata.json
        s3:
          accessKeySecret:
            key: accesskey
            name: mlpipeline-minio-artifact
          bucket: mlpipeline
          endpoint: minio-service.kubeflow:9000
          insecure: true
          key: runs/{{workflow.uid}}/{{pod.name}}/mlpipeline-ui-metadata.tgz
          secretKeySecret:
            key: secretkey
            name: mlpipeline-minio-artifact
      - name: mlpipeline-metrics
        path: /mlpipeline-metrics.json
        s3:
          accessKeySecret:
            key: accesskey
            name: mlpipeline-minio-artifact
          bucket: mlpipeline
          endpoint: minio-service.kubeflow:9000
          insecure: true
          key: runs/{{workflow.uid}}/{{pod.name}}/mlpipeline-metrics.tgz
          secretKeySecret:
            key: secretkey
            name: mlpipeline-minio-artifact
  - container:
      command:
      - cat
      - /data/file1
      image: library/bash:4.4.23
      volumeMounts:
      - mountPath: /data
        name: vol3
    name: step3-output
    outputs:
      artifacts:
      - name: mlpipeline-ui-metadata
        path: /mlpipeline-ui-metadata.json
        s3:
          accessKeySecret:
            key: accesskey
            name: mlpipeline-minio-artifact
          bucket: mlpipeline
          endpoint: minio-service.kubeflow:9000
          insecure: true
          key: runs/{{workflow.uid}}/{{pod.name}}/mlpipeline-ui-metadata.tgz
          secretKeySecret:
            key: secretkey
            name: mlpipeline-minio-artifact
      - name: mlpipeline-metrics
        path: /mlpipeline-metrics.json
        s3:
          accessKeySecret:
            key: accesskey
            name: mlpipeline-minio-artifact
          bucket: mlpipeline
          endpoint: minio-service.kubeflow:9000
          insecure: true
          key: runs/{{workflow.uid}}/{{pod.name}}/mlpipeline-metrics.tgz
          secretKeySecret:
            key: secretkey
            name: mlpipeline-minio-artifact
  - name: vol1
    outputs:
      parameters:
      - name: vol1-name
        valueFrom:
          jsonPath: '{.metadata.name}'
    resource:
      action: create
      manifest: "apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: '{{workflow.name}}-vol1'\n\
        spec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n  \
        \    storage: 1Gi\n"
  - inputs:
      parameters:
      - name: snap1-name
      - name: snap1-size
    name: vol2
    outputs:
      parameters:
      - name: vol2-name
        valueFrom:
          jsonPath: '{.metadata.name}'
    resource:
      action: create
      manifest: "apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: '{{workflow.name}}-vol2'\n\
        spec:\n  accessModes:\n  - ReadWriteMany\n  dataSource:\n    apiGroup: snapshot.storage.k8s.io\n\
        \    kind: VolumeSnapshot\n    name: '{{inputs.parameters.snap1-name}}'\n\
        \  resources:\n    requests:\n      storage: '{{inputs.parameters.snap1-size}}'\n"
  - inputs:
      parameters:
      - name: snap2-name
      - name: snap2-size
    name: vol3
    outputs:
      parameters:
      - name: vol3-name
        valueFrom:
          jsonPath: '{.metadata.name}'
    resource:
      action: create
      manifest: "apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: '{{workflow.name}}-vol3'\n\
        spec:\n  accessModes:\n  - ReadWriteMany\n  dataSource:\n    apiGroup: snapshot.storage.k8s.io\n\
        \    kind: VolumeSnapshot\n    name: '{{inputs.parameters.snap2-name}}'\n\
        \  resources:\n    requests:\n      storage: '{{inputs.parameters.snap2-size}}'\n"
  volumes:
  - name: vol1
    persistentVolumeClaim:
      claimName: '{{tasks.vol1.outputs.parameters.vol1-name}}'
  - name: vol2
    persistentVolumeClaim:
      claimName: '{{tasks.vol2.outputs.parameters.vol2-name}}'
  - name: vol3
    persistentVolumeClaim:
      claimName: '{{tasks.vol3.outputs.parameters.vol3-name}}'
