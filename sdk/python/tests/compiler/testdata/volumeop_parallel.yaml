apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: volumeop-parallel-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.7.0, pipelines.kubeflow.org/pipeline_compilation_time: '2021-08-09T15:45:19.988312',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "The first example of the
      design doc.", "name": "VolumeOp Parallel"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.7.0}
spec:
  entrypoint: volumeop-parallel
  templates:
  - name: create-pvc
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '{{workflow.name}}-my-pvc'
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 10Gi
    outputs:
      parameters:
      - name: create-pvc-manifest
        valueFrom: {jsonPath: '{}'}
      - name: create-pvc-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: create-pvc-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.7.0
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  - name: step1
    container:
      args: [echo 1 | tee /mnt/file1]
      command: [sh, -c]
      image: library/bash:4.4.23
      volumeMounts:
      - {mountPath: /mnt, name: create-pvc}
    inputs:
      parameters:
      - {name: create-pvc-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.7.0
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: create-pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-pvc-name}}'}
  - name: step2
    container:
      args: [echo 2 | tee /common/file2]
      command: [sh, -c]
      image: library/bash:4.4.23
      volumeMounts:
      - {mountPath: /common, name: create-pvc}
    inputs:
      parameters:
      - {name: create-pvc-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.7.0
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: create-pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-pvc-name}}'}
  - name: step3
    container:
      args: [echo 3 | tee /mnt3/file3]
      command: [sh, -c]
      image: library/bash:4.4.23
      volumeMounts:
      - {mountPath: /mnt3, name: create-pvc}
    inputs:
      parameters:
      - {name: create-pvc-name}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.7.0
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: create-pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-pvc-name}}'}
  - name: volumeop-parallel
    dag:
      tasks:
      - {name: create-pvc, template: create-pvc}
      - name: step1
        template: step1
        dependencies: [create-pvc]
        arguments:
          parameters:
          - {name: create-pvc-name, value: '{{tasks.create-pvc.outputs.parameters.create-pvc-name}}'}
      - name: step2
        template: step2
        dependencies: [create-pvc]
        arguments:
          parameters:
          - {name: create-pvc-name, value: '{{tasks.create-pvc.outputs.parameters.create-pvc-name}}'}
      - name: step3
        template: step3
        dependencies: [create-pvc]
        arguments:
          parameters:
          - {name: create-pvc-name, value: '{{tasks.create-pvc.outputs.parameters.create-pvc-name}}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
