apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata: 
  annotations: 
    pipelines.kubeflow.org/pipeline_spec: "{\"name\": \"Parallelfor item argument resolving pipeline\"}"
  generateName: parallelfor-item-argument-resolving-
spec: 
  arguments: 
    parameters: []
  entrypoint: parallelfor-item-argument-resolving
  serviceAccountName: pipeline-runner
  templates: 
    - 
      container: 
        args: 
          - "--param1"
          - "{{inputs.parameters.produce-list-of-strings-Output}}"
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def consume(param1):
                  print(param1)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Consume', description='')
              _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
              _parsed_args = vars(_parser.parse_args())
              
              _outputs = consume(**_parsed_args)
        image: "python:3.7"
      inputs: 
        parameters: 
          - 
            name: produce-list-of-strings-Output
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"inputs\": [{\"name\": \"param1\"}], \"name\": \"Consume\"}"
      name: consume
    - 
      container: 
        args: 
          - "--param1"
          - "{{inputs.parameters.produce-list-of-strings-Output-loop-item}}"
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def consume(param1):
                  print(param1)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Consume', description='')
              _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
              _parsed_args = vars(_parser.parse_args())
              
              _outputs = consume(**_parsed_args)
        image: "python:3.7"
      inputs: 
        parameters: 
          - 
            name: produce-list-of-strings-Output-loop-item
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"inputs\": [{\"name\": \"param1\"}], \"name\": \"Consume\"}"
      name: consume-2
    - 
      container: 
        args: 
          - "--param1"
          - "{{inputs.parameters.produce-str-Output}}"
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def consume(param1):
                  print(param1)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Consume', description='')
              _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
              _parsed_args = vars(_parser.parse_args())
              
              _outputs = consume(**_parsed_args)
        image: "python:3.7"
      inputs: 
        parameters: 
          - 
            name: produce-str-Output
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"inputs\": [{\"name\": \"param1\"}], \"name\": \"Consume\"}"
      name: consume-3
    - 
      container: 
        args: 
          - "--param1"
          - "{{inputs.parameters.produce-list-of-ints-Output}}"
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def consume(param1):
                  print(param1)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Consume', description='')
              _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
              _parsed_args = vars(_parser.parse_args())
              
              _outputs = consume(**_parsed_args)
        image: "python:3.7"
      inputs: 
        parameters: 
          - 
            name: produce-list-of-ints-Output
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"inputs\": [{\"name\": \"param1\"}], \"name\": \"Consume\"}"
      name: consume-4
    - 
      container: 
        args: 
          - "--param1"
          - "{{inputs.parameters.produce-list-of-ints-Output-loop-item}}"
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def consume(param1):
                  print(param1)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Consume', description='')
              _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
              _parsed_args = vars(_parser.parse_args())
              
              _outputs = consume(**_parsed_args)
        image: "python:3.7"
      inputs: 
        parameters: 
          - 
            name: produce-list-of-ints-Output-loop-item
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"inputs\": [{\"name\": \"param1\"}], \"name\": \"Consume\"}"
      name: consume-5
    - 
      container: 
        args: 
          - "--param1"
          - "{{inputs.parameters.produce-list-of-dicts-Output}}"
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def consume(param1):
                  print(param1)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Consume', description='')
              _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
              _parsed_args = vars(_parser.parse_args())
              
              _outputs = consume(**_parsed_args)
        image: "python:3.7"
      inputs: 
        parameters: 
          - 
            name: produce-list-of-dicts-Output
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"inputs\": [{\"name\": \"param1\"}], \"name\": \"Consume\"}"
      name: consume-6
    - 
      container: 
        args: 
          - "--param1"
          - "{{inputs.parameters.produce-list-of-dicts-Output-loop-item-subvar-aaa}}"
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def consume(param1):
                  print(param1)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Consume', description='')
              _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
              _parsed_args = vars(_parser.parse_args())
              
              _outputs = consume(**_parsed_args)
        image: "python:3.7"
      inputs: 
        parameters: 
          - 
            name: produce-list-of-dicts-Output-loop-item-subvar-aaa
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"inputs\": [{\"name\": \"param1\"}], \"name\": \"Consume\"}"
      name: consume-7
    - 
      dag: 
        tasks: 
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-strings-Output
                  value: "{{inputs.parameters.produce-list-of-strings-Output}}"
            name: consume
            template: consume
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-strings-Output-loop-item
                  value: "{{inputs.parameters.produce-list-of-strings-Output-loop-item}}"
            name: consume-2
            template: consume-2
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-str-Output
                  value: "{{inputs.parameters.produce-str-Output}}"
            name: consume-3
            template: consume-3
      inputs: 
        parameters: 
          - 
            name: produce-list-of-strings-Output
          - 
            name: produce-list-of-strings-Output-loop-item
          - 
            name: produce-str-Output
      name: for-loop-for-loop-00000001-1
    - 
      dag: 
        tasks: 
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-ints-Output
                  value: "{{inputs.parameters.produce-list-of-ints-Output}}"
            name: consume-4
            template: consume-4
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-ints-Output-loop-item
                  value: "{{inputs.parameters.produce-list-of-ints-Output-loop-item}}"
            name: consume-5
            template: consume-5
      inputs: 
        parameters: 
          - 
            name: produce-list-of-ints-Output
          - 
            name: produce-list-of-ints-Output-loop-item
      name: for-loop-for-loop-00000002-2
    - 
      dag: 
        tasks: 
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-dicts-Output
                  value: "{{inputs.parameters.produce-list-of-dicts-Output}}"
            name: consume-6
            template: consume-6
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-dicts-Output-loop-item-subvar-aaa
                  value: "{{inputs.parameters.produce-list-of-dicts-Output-loop-item-subvar-aaa}}"
            name: consume-7
            template: consume-7
      inputs: 
        parameters: 
          - 
            name: produce-list-of-dicts-Output
          - 
            name: produce-list-of-dicts-Output-loop-item-subvar-aaa
      name: for-loop-for-loop-00000003-3
    - 
      dag: 
        tasks: 
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-strings-Output
                  value: "{{tasks.produce-list-of-strings.outputs.parameters.produce-list-of-strings-Output}}"
                - 
                  name: produce-list-of-strings-Output-loop-item
                  value: "{{item}}"
                - 
                  name: produce-str-Output
                  value: "{{tasks.produce-str.outputs.parameters.produce-str-Output}}"
            dependencies: 
              - produce-list-of-strings
              - produce-str
            name: for-loop-for-loop-00000001-1
            template: for-loop-for-loop-00000001-1
            withParam: "{{tasks.produce-list-of-strings.outputs.parameters.produce-list-of-strings-Output}}"
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-ints-Output
                  value: "{{tasks.produce-list-of-ints.outputs.parameters.produce-list-of-ints-Output}}"
                - 
                  name: produce-list-of-ints-Output-loop-item
                  value: "{{item}}"
            dependencies: 
              - produce-list-of-ints
            name: for-loop-for-loop-00000002-2
            template: for-loop-for-loop-00000002-2
            withParam: "{{tasks.produce-list-of-ints.outputs.parameters.produce-list-of-ints-Output}}"
          - 
            arguments: 
              parameters: 
                - 
                  name: produce-list-of-dicts-Output
                  value: "{{tasks.produce-list-of-dicts.outputs.parameters.produce-list-of-dicts-Output}}"
                - 
                  name: produce-list-of-dicts-Output-loop-item-subvar-aaa
                  value: "{{item.aaa}}"
            dependencies: 
              - produce-list-of-dicts
            name: for-loop-for-loop-00000003-3
            template: for-loop-for-loop-00000003-3
            withParam: "{{tasks.produce-list-of-dicts.outputs.parameters.produce-list-of-dicts-Output}}"
          - 
            name: produce-list-of-dicts
            template: produce-list-of-dicts
          - 
            name: produce-list-of-ints
            template: produce-list-of-ints
          - 
            name: produce-list-of-strings
            template: produce-list-of-strings
          - 
            name: produce-str
            template: produce-str
      name: parallelfor-item-argument-resolving
    - 
      container: 
        args: 
          - "----output-paths"
          - /tmp/outputs/Output/data
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def produce_list_of_dicts():
                  return ([{"aaa": "aaa1", "bbb": "bbb1"}, {"aaa": "aaa2", "bbb": "bbb2"}],)
              
              def _serialize_json(obj) -> str:
                  if isinstance(obj, str):
                      return obj
                  import json
                  def default_serializer(obj):
                      if hasattr(obj, 'to_struct'):
                          return obj.to_struct()
                      else:
                          raise TypeError("Object of type '%s' is not JSON serializable and does not have .to_struct() method." % obj.__class__.__name__)
                  return json.dumps(obj, default=default_serializer, sort_keys=True)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Produce list of dicts', description='')
              _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
              _parsed_args = vars(_parser.parse_args())
              _output_files = _parsed_args.pop("_output_paths", [])
              
              _outputs = produce_list_of_dicts(**_parsed_args)
              
              _outputs = [_outputs]
              
              _output_serializers = [
                  _serialize_json,
              
              ]
              
              import os
              for idx, output_file in enumerate(_output_files):
                  try:
                      os.makedirs(os.path.dirname(output_file))
                  except OSError:
                      pass
                  with open(output_file, 'w') as f:
                      f.write(_output_serializers[idx](_outputs[idx]))
        image: "python:3.7"
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"name\": \"Produce list of dicts\", \"outputs\": [{\"name\": \"Output\", \"type\": \"JsonArray\"}]}"
      name: produce-list-of-dicts
      outputs: 
        artifacts: 
          - 
            name: produce-list-of-dicts-Output
            path: /tmp/outputs/Output/data
        parameters: 
          - 
            name: produce-list-of-dicts-Output
            valueFrom: 
              path: /tmp/outputs/Output/data
    - 
      container: 
        args: 
          - "----output-paths"
          - /tmp/outputs/Output/data
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def produce_list_of_ints():
                  return ([1234567890, 987654321],)
              
              def _serialize_json(obj) -> str:
                  if isinstance(obj, str):
                      return obj
                  import json
                  def default_serializer(obj):
                      if hasattr(obj, 'to_struct'):
                          return obj.to_struct()
                      else:
                          raise TypeError("Object of type '%s' is not JSON serializable and does not have .to_struct() method." % obj.__class__.__name__)
                  return json.dumps(obj, default=default_serializer, sort_keys=True)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Produce list of ints', description='')
              _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
              _parsed_args = vars(_parser.parse_args())
              _output_files = _parsed_args.pop("_output_paths", [])
              
              _outputs = produce_list_of_ints(**_parsed_args)
              
              _outputs = [_outputs]
              
              _output_serializers = [
                  _serialize_json,
              
              ]
              
              import os
              for idx, output_file in enumerate(_output_files):
                  try:
                      os.makedirs(os.path.dirname(output_file))
                  except OSError:
                      pass
                  with open(output_file, 'w') as f:
                      f.write(_output_serializers[idx](_outputs[idx]))
        image: "python:3.7"
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"name\": \"Produce list of ints\", \"outputs\": [{\"name\": \"Output\", \"type\": \"JsonArray\"}]}"
      name: produce-list-of-ints
      outputs: 
        artifacts: 
          - 
            name: produce-list-of-ints-Output
            path: /tmp/outputs/Output/data
        parameters: 
          - 
            name: produce-list-of-ints-Output
            valueFrom: 
              path: /tmp/outputs/Output/data
    - 
      container: 
        args: 
          - "----output-paths"
          - /tmp/outputs/Output/data
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def produce_list_of_strings():
                  return (["a", "z"],)
              
              def _serialize_json(obj) -> str:
                  if isinstance(obj, str):
                      return obj
                  import json
                  def default_serializer(obj):
                      if hasattr(obj, 'to_struct'):
                          return obj.to_struct()
                      else:
                          raise TypeError("Object of type '%s' is not JSON serializable and does not have .to_struct() method." % obj.__class__.__name__)
                  return json.dumps(obj, default=default_serializer, sort_keys=True)
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Produce list of strings', description='')
              _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
              _parsed_args = vars(_parser.parse_args())
              _output_files = _parsed_args.pop("_output_paths", [])
              
              _outputs = produce_list_of_strings(**_parsed_args)
              
              _outputs = [_outputs]
              
              _output_serializers = [
                  _serialize_json,
              
              ]
              
              import os
              for idx, output_file in enumerate(_output_files):
                  try:
                      os.makedirs(os.path.dirname(output_file))
                  except OSError:
                      pass
                  with open(output_file, 'w') as f:
                      f.write(_output_serializers[idx](_outputs[idx]))
        image: "python:3.7"
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"name\": \"Produce list of strings\", \"outputs\": [{\"name\": \"Output\", \"type\": \"JsonArray\"}]}"
      name: produce-list-of-strings
      outputs: 
        artifacts: 
          - 
            name: produce-list-of-strings-Output
            path: /tmp/outputs/Output/data
        parameters: 
          - 
            name: produce-list-of-strings-Output
            valueFrom: 
              path: /tmp/outputs/Output/data
    - 
      container: 
        args: 
          - "----output-paths"
          - /tmp/outputs/Output/data
        command: 
          - python3
          - "-u"
          - "-c"
          - |
              def produce_str():
                  return "Hello"
              
              def _serialize_str(str_value: str) -> str:
                  if not isinstance(str_value, str):
                      raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
                  return str_value
              
              import argparse
              _parser = argparse.ArgumentParser(prog='Produce str', description='')
              _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
              _parsed_args = vars(_parser.parse_args())
              _output_files = _parsed_args.pop("_output_paths", [])
              
              _outputs = produce_str(**_parsed_args)
              
              _outputs = [_outputs]
              
              _output_serializers = [
                  _serialize_str,
              
              ]
              
              import os
              for idx, output_file in enumerate(_output_files):
                  try:
                      os.makedirs(os.path.dirname(output_file))
                  except OSError:
                      pass
                  with open(output_file, 'w') as f:
                      f.write(_output_serializers[idx](_outputs[idx]))
        image: "python:3.7"
      metadata:
        annotations: 
          pipelines.kubeflow.org/component_spec: "{\"name\": \"Produce str\", \"outputs\": [{\"name\": \"Output\", \"type\": \"String\"}]}"
      name: produce-str
      outputs: 
        artifacts: 
          - 
            name: produce-str-Output
            path: /tmp/outputs/Output/data
        parameters: 
          - 
            name: produce-str-Output
            valueFrom: 
              path: /tmp/outputs/Output/data
