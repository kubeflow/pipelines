// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UploadPipelineDialog renders an active dropzone 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle)>
    Upload and name your pipeline
  </WithStyles(DialogTitle)>
  <n
    className=""
    disableClick={true}
    disablePreview={false}
    disabled={false}
    getDataTransferItems={[Function]}
    id="dropZone"
    inputProps={
      Object {
        "tabIndex": -1,
      }
    }
    maxSize={Infinity}
    minSize={0}
    multiple={true}
    onDragEnter={[Function]}
    onDragLeave={[Function]}
    onDrop={[Function]}
    preventDropOnDocument={true}
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <div
      className="dropOverlay"
    >
      Drop files..
    </div>
    <div
      className=""
    >
      Choose a pipeline package file from your computer, and give the pipeline a unique name.
      <br />
      You can also drag and drop the file here.
    </div>
    <Component
      InputProps={
        Object {
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              Choose file
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      field="fileName"
      instance={
        UploadPipelineDialog {
          "_dropzoneRef": Object {
            "current": null,
          },
          "context": Object {},
          "handleChange": [Function],
          "props": Object {
            "onClose": [MockFunction],
            "open": false,
          },
          "refs": Object {},
          "setState": [Function],
          "state": Object {
            "busy": false,
            "dropzoneActive": true,
            "file": null,
            "fileName": "",
            "uploadPipelineDescription": "",
            "uploadPipelineName": "",
          },
          "updater": Updater {
            "_callbacks": Array [],
            "_renderer": ReactShallowRenderer {
              "_context": Object {},
              "_element": <UploadPipelineDialog
                onClose={[MockFunction]}
                open={false}
              />,
              "_forcedUpdate": false,
              "_instance": [Circular],
              "_newState": Object {
                "busy": false,
                "dropzoneActive": true,
                "file": null,
                "fileName": "",
                "uploadPipelineDescription": "",
                "uploadPipelineName": "",
              },
              "_rendered": <WithStyles(Dialog)
                classes={
                  Object {
                    "paper": "root",
                  }
                }
                id="uploadDialog"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)>
                  Upload and name your pipeline
                </WithStyles(DialogTitle)>
                <n
                  className=""
                  disableClick={true}
                  disablePreview={false}
                  disabled={false}
                  getDataTransferItems={[Function]}
                  id="dropZone"
                  inputProps={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  maxSize={Infinity}
                  minSize={0}
                  multiple={true}
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDrop={[Function]}
                  preventDropOnDocument={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <div
                    className="dropOverlay"
                  >
                    Drop files..
                  </div>
                  <div
                    className=""
                  >
                    Choose a pipeline package file from your computer, and give the pipeline a unique name.
                    <br />
                    You can also drag and drop the file here.
                  </div>
                  <Unknown
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Button)
                            color="secondary"
                            onClick={[Function]}
                            style={
                              Object {
                                "margin": 0,
                                "padding": "3px 5px",
                              }
                            }
                          >
                            Choose file
                          </WithStyles(Button)>
                        </WithStyles(InputAdornment)>,
                        "readOnly": true,
                      }
                    }
                    field="fileName"
                    instance={[Circular]}
                    label="File"
                    required={true}
                  />
                  <Unknown
                    field="uploadPipelineName"
                    id="uploadFileName"
                    instance={[Circular]}
                    label="Pipeline name"
                    required={true}
                  />
                </n>
                <WithStyles(DialogActions)>
                  <BusyButton
                    busy={false}
                    disabled={true}
                    id="confirmUploadBtn"
                    onClick={[Function]}
                    title="Upload"
                  />
                  <WithStyles(Button)
                    id="cancelUploadBtn"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>,
              "_rendering": false,
              "_updater": [Circular],
            },
          },
          Symbol(enzyme.__setState__): [Function],
        }
      }
      label="File"
      required={true}
    />
    <Component
      field="uploadPipelineName"
      id="uploadFileName"
      instance={
        UploadPipelineDialog {
          "_dropzoneRef": Object {
            "current": null,
          },
          "context": Object {},
          "handleChange": [Function],
          "props": Object {
            "onClose": [MockFunction],
            "open": false,
          },
          "refs": Object {},
          "setState": [Function],
          "state": Object {
            "busy": false,
            "dropzoneActive": true,
            "file": null,
            "fileName": "",
            "uploadPipelineDescription": "",
            "uploadPipelineName": "",
          },
          "updater": Updater {
            "_callbacks": Array [],
            "_renderer": ReactShallowRenderer {
              "_context": Object {},
              "_element": <UploadPipelineDialog
                onClose={[MockFunction]}
                open={false}
              />,
              "_forcedUpdate": false,
              "_instance": [Circular],
              "_newState": Object {
                "busy": false,
                "dropzoneActive": true,
                "file": null,
                "fileName": "",
                "uploadPipelineDescription": "",
                "uploadPipelineName": "",
              },
              "_rendered": <WithStyles(Dialog)
                classes={
                  Object {
                    "paper": "root",
                  }
                }
                id="uploadDialog"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)>
                  Upload and name your pipeline
                </WithStyles(DialogTitle)>
                <n
                  className=""
                  disableClick={true}
                  disablePreview={false}
                  disabled={false}
                  getDataTransferItems={[Function]}
                  id="dropZone"
                  inputProps={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  maxSize={Infinity}
                  minSize={0}
                  multiple={true}
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDrop={[Function]}
                  preventDropOnDocument={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <div
                    className="dropOverlay"
                  >
                    Drop files..
                  </div>
                  <div
                    className=""
                  >
                    Choose a pipeline package file from your computer, and give the pipeline a unique name.
                    <br />
                    You can also drag and drop the file here.
                  </div>
                  <Unknown
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Button)
                            color="secondary"
                            onClick={[Function]}
                            style={
                              Object {
                                "margin": 0,
                                "padding": "3px 5px",
                              }
                            }
                          >
                            Choose file
                          </WithStyles(Button)>
                        </WithStyles(InputAdornment)>,
                        "readOnly": true,
                      }
                    }
                    field="fileName"
                    instance={[Circular]}
                    label="File"
                    required={true}
                  />
                  <Unknown
                    field="uploadPipelineName"
                    id="uploadFileName"
                    instance={[Circular]}
                    label="Pipeline name"
                    required={true}
                  />
                </n>
                <WithStyles(DialogActions)>
                  <BusyButton
                    busy={false}
                    disabled={true}
                    id="confirmUploadBtn"
                    onClick={[Function]}
                    title="Upload"
                  />
                  <WithStyles(Button)
                    id="cancelUploadBtn"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>,
              "_rendering": false,
              "_updater": [Circular],
            },
          },
          Symbol(enzyme.__setState__): [Function],
        }
      }
      label="Pipeline name"
      required={true}
    />
  </n>
  <WithStyles(DialogActions)>
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title="Upload"
    />
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    >
      Cancel
    </WithStyles(Button)>
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;

exports[`UploadPipelineDialog renders closed 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle)>
    Upload and name your pipeline
  </WithStyles(DialogTitle)>
  <n
    className=""
    disableClick={true}
    disablePreview={false}
    disabled={false}
    getDataTransferItems={[Function]}
    id="dropZone"
    inputProps={
      Object {
        "tabIndex": -1,
      }
    }
    maxSize={Infinity}
    minSize={0}
    multiple={true}
    onDragEnter={[Function]}
    onDragLeave={[Function]}
    onDrop={[Function]}
    preventDropOnDocument={true}
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <div
      className=""
    >
      Choose a pipeline package file from your computer, and give the pipeline a unique name.
      <br />
      You can also drag and drop the file here.
    </div>
    <Component
      InputProps={
        Object {
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              Choose file
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      field="fileName"
      instance={
        UploadPipelineDialog {
          "_dropzoneRef": Object {
            "current": null,
          },
          "context": Object {},
          "handleChange": [Function],
          "props": Object {
            "onClose": [MockFunction],
            "open": false,
          },
          "refs": Object {},
          "setState": [Function],
          "state": Object {
            "busy": false,
            "dropzoneActive": false,
            "file": null,
            "fileName": "",
            "uploadPipelineDescription": "",
            "uploadPipelineName": "",
          },
          "updater": Updater {
            "_callbacks": Array [],
            "_renderer": ReactShallowRenderer {
              "_context": Object {},
              "_element": <UploadPipelineDialog
                onClose={[MockFunction]}
                open={false}
              />,
              "_forcedUpdate": false,
              "_instance": [Circular],
              "_newState": null,
              "_rendered": <WithStyles(Dialog)
                classes={
                  Object {
                    "paper": "root",
                  }
                }
                id="uploadDialog"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)>
                  Upload and name your pipeline
                </WithStyles(DialogTitle)>
                <n
                  className=""
                  disableClick={true}
                  disablePreview={false}
                  disabled={false}
                  getDataTransferItems={[Function]}
                  id="dropZone"
                  inputProps={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  maxSize={Infinity}
                  minSize={0}
                  multiple={true}
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDrop={[Function]}
                  preventDropOnDocument={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <div
                    className=""
                  >
                    Choose a pipeline package file from your computer, and give the pipeline a unique name.
                    <br />
                    You can also drag and drop the file here.
                  </div>
                  <Unknown
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Button)
                            color="secondary"
                            onClick={[Function]}
                            style={
                              Object {
                                "margin": 0,
                                "padding": "3px 5px",
                              }
                            }
                          >
                            Choose file
                          </WithStyles(Button)>
                        </WithStyles(InputAdornment)>,
                        "readOnly": true,
                      }
                    }
                    field="fileName"
                    instance={[Circular]}
                    label="File"
                    required={true}
                  />
                  <Unknown
                    field="uploadPipelineName"
                    id="uploadFileName"
                    instance={[Circular]}
                    label="Pipeline name"
                    required={true}
                  />
                </n>
                <WithStyles(DialogActions)>
                  <BusyButton
                    busy={false}
                    disabled={true}
                    id="confirmUploadBtn"
                    onClick={[Function]}
                    title="Upload"
                  />
                  <WithStyles(Button)
                    id="cancelUploadBtn"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>,
              "_rendering": false,
              "_updater": [Circular],
            },
          },
          Symbol(enzyme.__setState__): [Function],
        }
      }
      label="File"
      required={true}
    />
    <Component
      field="uploadPipelineName"
      id="uploadFileName"
      instance={
        UploadPipelineDialog {
          "_dropzoneRef": Object {
            "current": null,
          },
          "context": Object {},
          "handleChange": [Function],
          "props": Object {
            "onClose": [MockFunction],
            "open": false,
          },
          "refs": Object {},
          "setState": [Function],
          "state": Object {
            "busy": false,
            "dropzoneActive": false,
            "file": null,
            "fileName": "",
            "uploadPipelineDescription": "",
            "uploadPipelineName": "",
          },
          "updater": Updater {
            "_callbacks": Array [],
            "_renderer": ReactShallowRenderer {
              "_context": Object {},
              "_element": <UploadPipelineDialog
                onClose={[MockFunction]}
                open={false}
              />,
              "_forcedUpdate": false,
              "_instance": [Circular],
              "_newState": null,
              "_rendered": <WithStyles(Dialog)
                classes={
                  Object {
                    "paper": "root",
                  }
                }
                id="uploadDialog"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)>
                  Upload and name your pipeline
                </WithStyles(DialogTitle)>
                <n
                  className=""
                  disableClick={true}
                  disablePreview={false}
                  disabled={false}
                  getDataTransferItems={[Function]}
                  id="dropZone"
                  inputProps={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  maxSize={Infinity}
                  minSize={0}
                  multiple={true}
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDrop={[Function]}
                  preventDropOnDocument={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <div
                    className=""
                  >
                    Choose a pipeline package file from your computer, and give the pipeline a unique name.
                    <br />
                    You can also drag and drop the file here.
                  </div>
                  <Unknown
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Button)
                            color="secondary"
                            onClick={[Function]}
                            style={
                              Object {
                                "margin": 0,
                                "padding": "3px 5px",
                              }
                            }
                          >
                            Choose file
                          </WithStyles(Button)>
                        </WithStyles(InputAdornment)>,
                        "readOnly": true,
                      }
                    }
                    field="fileName"
                    instance={[Circular]}
                    label="File"
                    required={true}
                  />
                  <Unknown
                    field="uploadPipelineName"
                    id="uploadFileName"
                    instance={[Circular]}
                    label="Pipeline name"
                    required={true}
                  />
                </n>
                <WithStyles(DialogActions)>
                  <BusyButton
                    busy={false}
                    disabled={true}
                    id="confirmUploadBtn"
                    onClick={[Function]}
                    title="Upload"
                  />
                  <WithStyles(Button)
                    id="cancelUploadBtn"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>,
              "_rendering": false,
              "_updater": [Circular],
            },
          },
          Symbol(enzyme.__setState__): [Function],
        }
      }
      label="Pipeline name"
      required={true}
    />
  </n>
  <WithStyles(DialogActions)>
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title="Upload"
    />
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    >
      Cancel
    </WithStyles(Button)>
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;

exports[`UploadPipelineDialog renders open 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle)>
    Upload and name your pipeline
  </WithStyles(DialogTitle)>
  <n
    className=""
    disableClick={true}
    disablePreview={false}
    disabled={false}
    getDataTransferItems={[Function]}
    id="dropZone"
    inputProps={
      Object {
        "tabIndex": -1,
      }
    }
    maxSize={Infinity}
    minSize={0}
    multiple={true}
    onDragEnter={[Function]}
    onDragLeave={[Function]}
    onDrop={[Function]}
    preventDropOnDocument={true}
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <div
      className=""
    >
      Choose a pipeline package file from your computer, and give the pipeline a unique name.
      <br />
      You can also drag and drop the file here.
    </div>
    <Component
      InputProps={
        Object {
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              Choose file
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      field="fileName"
      instance={
        UploadPipelineDialog {
          "_dropzoneRef": Object {
            "current": null,
          },
          "context": Object {},
          "handleChange": [Function],
          "props": Object {
            "onClose": [MockFunction],
            "open": false,
          },
          "refs": Object {},
          "setState": [Function],
          "state": Object {
            "busy": false,
            "dropzoneActive": false,
            "file": null,
            "fileName": "",
            "uploadPipelineDescription": "",
            "uploadPipelineName": "",
          },
          "updater": Updater {
            "_callbacks": Array [],
            "_renderer": ReactShallowRenderer {
              "_context": Object {},
              "_element": <UploadPipelineDialog
                onClose={[MockFunction]}
                open={false}
              />,
              "_forcedUpdate": false,
              "_instance": [Circular],
              "_newState": null,
              "_rendered": <WithStyles(Dialog)
                classes={
                  Object {
                    "paper": "root",
                  }
                }
                id="uploadDialog"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)>
                  Upload and name your pipeline
                </WithStyles(DialogTitle)>
                <n
                  className=""
                  disableClick={true}
                  disablePreview={false}
                  disabled={false}
                  getDataTransferItems={[Function]}
                  id="dropZone"
                  inputProps={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  maxSize={Infinity}
                  minSize={0}
                  multiple={true}
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDrop={[Function]}
                  preventDropOnDocument={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <div
                    className=""
                  >
                    Choose a pipeline package file from your computer, and give the pipeline a unique name.
                    <br />
                    You can also drag and drop the file here.
                  </div>
                  <Unknown
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Button)
                            color="secondary"
                            onClick={[Function]}
                            style={
                              Object {
                                "margin": 0,
                                "padding": "3px 5px",
                              }
                            }
                          >
                            Choose file
                          </WithStyles(Button)>
                        </WithStyles(InputAdornment)>,
                        "readOnly": true,
                      }
                    }
                    field="fileName"
                    instance={[Circular]}
                    label="File"
                    required={true}
                  />
                  <Unknown
                    field="uploadPipelineName"
                    id="uploadFileName"
                    instance={[Circular]}
                    label="Pipeline name"
                    required={true}
                  />
                </n>
                <WithStyles(DialogActions)>
                  <BusyButton
                    busy={false}
                    disabled={true}
                    id="confirmUploadBtn"
                    onClick={[Function]}
                    title="Upload"
                  />
                  <WithStyles(Button)
                    id="cancelUploadBtn"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>,
              "_rendering": false,
              "_updater": [Circular],
            },
          },
          Symbol(enzyme.__setState__): [Function],
        }
      }
      label="File"
      required={true}
    />
    <Component
      field="uploadPipelineName"
      id="uploadFileName"
      instance={
        UploadPipelineDialog {
          "_dropzoneRef": Object {
            "current": null,
          },
          "context": Object {},
          "handleChange": [Function],
          "props": Object {
            "onClose": [MockFunction],
            "open": false,
          },
          "refs": Object {},
          "setState": [Function],
          "state": Object {
            "busy": false,
            "dropzoneActive": false,
            "file": null,
            "fileName": "",
            "uploadPipelineDescription": "",
            "uploadPipelineName": "",
          },
          "updater": Updater {
            "_callbacks": Array [],
            "_renderer": ReactShallowRenderer {
              "_context": Object {},
              "_element": <UploadPipelineDialog
                onClose={[MockFunction]}
                open={false}
              />,
              "_forcedUpdate": false,
              "_instance": [Circular],
              "_newState": null,
              "_rendered": <WithStyles(Dialog)
                classes={
                  Object {
                    "paper": "root",
                  }
                }
                id="uploadDialog"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)>
                  Upload and name your pipeline
                </WithStyles(DialogTitle)>
                <n
                  className=""
                  disableClick={true}
                  disablePreview={false}
                  disabled={false}
                  getDataTransferItems={[Function]}
                  id="dropZone"
                  inputProps={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  maxSize={Infinity}
                  minSize={0}
                  multiple={true}
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDrop={[Function]}
                  preventDropOnDocument={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <div
                    className=""
                  >
                    Choose a pipeline package file from your computer, and give the pipeline a unique name.
                    <br />
                    You can also drag and drop the file here.
                  </div>
                  <Unknown
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Button)
                            color="secondary"
                            onClick={[Function]}
                            style={
                              Object {
                                "margin": 0,
                                "padding": "3px 5px",
                              }
                            }
                          >
                            Choose file
                          </WithStyles(Button)>
                        </WithStyles(InputAdornment)>,
                        "readOnly": true,
                      }
                    }
                    field="fileName"
                    instance={[Circular]}
                    label="File"
                    required={true}
                  />
                  <Unknown
                    field="uploadPipelineName"
                    id="uploadFileName"
                    instance={[Circular]}
                    label="Pipeline name"
                    required={true}
                  />
                </n>
                <WithStyles(DialogActions)>
                  <BusyButton
                    busy={false}
                    disabled={true}
                    id="confirmUploadBtn"
                    onClick={[Function]}
                    title="Upload"
                  />
                  <WithStyles(Button)
                    id="cancelUploadBtn"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>,
              "_rendering": false,
              "_updater": [Circular],
            },
          },
          Symbol(enzyme.__setState__): [Function],
        }
      }
      label="Pipeline name"
      required={true}
    />
  </n>
  <WithStyles(DialogActions)>
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title="Upload"
    />
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    >
      Cancel
    </WithStyles(Button)>
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;

exports[`UploadPipelineDialog renders with a selected file to upload 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle)>
    Upload and name your pipeline
  </WithStyles(DialogTitle)>
  <n
    className=""
    disableClick={true}
    disablePreview={false}
    disabled={false}
    getDataTransferItems={[Function]}
    id="dropZone"
    inputProps={
      Object {
        "tabIndex": -1,
      }
    }
    maxSize={Infinity}
    minSize={0}
    multiple={true}
    onDragEnter={[Function]}
    onDragLeave={[Function]}
    onDrop={[Function]}
    preventDropOnDocument={true}
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <div
      className=""
    >
      Choose a pipeline package file from your computer, and give the pipeline a unique name.
      <br />
      You can also drag and drop the file here.
    </div>
    <Component
      InputProps={
        Object {
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              Choose file
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      field="fileName"
      instance={
        UploadPipelineDialog {
          "_dropzoneRef": Object {
            "current": null,
          },
          "context": Object {},
          "handleChange": [Function],
          "props": Object {
            "onClose": [MockFunction],
            "open": false,
          },
          "refs": Object {},
          "setState": [Function],
          "state": Object {
            "busy": false,
            "dropzoneActive": false,
            "file": null,
            "fileName": "",
            "fileToUpload": true,
            "uploadPipelineDescription": "",
            "uploadPipelineName": "",
          },
          "updater": Updater {
            "_callbacks": Array [],
            "_renderer": ReactShallowRenderer {
              "_context": Object {},
              "_element": <UploadPipelineDialog
                onClose={[MockFunction]}
                open={false}
              />,
              "_forcedUpdate": false,
              "_instance": [Circular],
              "_newState": Object {
                "busy": false,
                "dropzoneActive": false,
                "file": null,
                "fileName": "",
                "fileToUpload": true,
                "uploadPipelineDescription": "",
                "uploadPipelineName": "",
              },
              "_rendered": <WithStyles(Dialog)
                classes={
                  Object {
                    "paper": "root",
                  }
                }
                id="uploadDialog"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)>
                  Upload and name your pipeline
                </WithStyles(DialogTitle)>
                <n
                  className=""
                  disableClick={true}
                  disablePreview={false}
                  disabled={false}
                  getDataTransferItems={[Function]}
                  id="dropZone"
                  inputProps={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  maxSize={Infinity}
                  minSize={0}
                  multiple={true}
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDrop={[Function]}
                  preventDropOnDocument={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <div
                    className=""
                  >
                    Choose a pipeline package file from your computer, and give the pipeline a unique name.
                    <br />
                    You can also drag and drop the file here.
                  </div>
                  <Unknown
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Button)
                            color="secondary"
                            onClick={[Function]}
                            style={
                              Object {
                                "margin": 0,
                                "padding": "3px 5px",
                              }
                            }
                          >
                            Choose file
                          </WithStyles(Button)>
                        </WithStyles(InputAdornment)>,
                        "readOnly": true,
                      }
                    }
                    field="fileName"
                    instance={[Circular]}
                    label="File"
                    required={true}
                  />
                  <Unknown
                    field="uploadPipelineName"
                    id="uploadFileName"
                    instance={[Circular]}
                    label="Pipeline name"
                    required={true}
                  />
                </n>
                <WithStyles(DialogActions)>
                  <BusyButton
                    busy={false}
                    disabled={true}
                    id="confirmUploadBtn"
                    onClick={[Function]}
                    title="Upload"
                  />
                  <WithStyles(Button)
                    id="cancelUploadBtn"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>,
              "_rendering": false,
              "_updater": [Circular],
            },
          },
          Symbol(enzyme.__setState__): [Function],
        }
      }
      label="File"
      required={true}
    />
    <Component
      field="uploadPipelineName"
      id="uploadFileName"
      instance={
        UploadPipelineDialog {
          "_dropzoneRef": Object {
            "current": null,
          },
          "context": Object {},
          "handleChange": [Function],
          "props": Object {
            "onClose": [MockFunction],
            "open": false,
          },
          "refs": Object {},
          "setState": [Function],
          "state": Object {
            "busy": false,
            "dropzoneActive": false,
            "file": null,
            "fileName": "",
            "fileToUpload": true,
            "uploadPipelineDescription": "",
            "uploadPipelineName": "",
          },
          "updater": Updater {
            "_callbacks": Array [],
            "_renderer": ReactShallowRenderer {
              "_context": Object {},
              "_element": <UploadPipelineDialog
                onClose={[MockFunction]}
                open={false}
              />,
              "_forcedUpdate": false,
              "_instance": [Circular],
              "_newState": Object {
                "busy": false,
                "dropzoneActive": false,
                "file": null,
                "fileName": "",
                "fileToUpload": true,
                "uploadPipelineDescription": "",
                "uploadPipelineName": "",
              },
              "_rendered": <WithStyles(Dialog)
                classes={
                  Object {
                    "paper": "root",
                  }
                }
                id="uploadDialog"
                onClose={[Function]}
                open={false}
              >
                <WithStyles(DialogTitle)>
                  Upload and name your pipeline
                </WithStyles(DialogTitle)>
                <n
                  className=""
                  disableClick={true}
                  disablePreview={false}
                  disabled={false}
                  getDataTransferItems={[Function]}
                  id="dropZone"
                  inputProps={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  maxSize={Infinity}
                  minSize={0}
                  multiple={true}
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDrop={[Function]}
                  preventDropOnDocument={true}
                  style={
                    Object {
                      "position": "relative",
                    }
                  }
                >
                  <div
                    className=""
                  >
                    Choose a pipeline package file from your computer, and give the pipeline a unique name.
                    <br />
                    You can also drag and drop the file here.
                  </div>
                  <Unknown
                    InputProps={
                      Object {
                        "endAdornment": <WithStyles(InputAdornment)
                          position="end"
                        >
                          <WithStyles(Button)
                            color="secondary"
                            onClick={[Function]}
                            style={
                              Object {
                                "margin": 0,
                                "padding": "3px 5px",
                              }
                            }
                          >
                            Choose file
                          </WithStyles(Button)>
                        </WithStyles(InputAdornment)>,
                        "readOnly": true,
                      }
                    }
                    field="fileName"
                    instance={[Circular]}
                    label="File"
                    required={true}
                  />
                  <Unknown
                    field="uploadPipelineName"
                    id="uploadFileName"
                    instance={[Circular]}
                    label="Pipeline name"
                    required={true}
                  />
                </n>
                <WithStyles(DialogActions)>
                  <BusyButton
                    busy={false}
                    disabled={true}
                    id="confirmUploadBtn"
                    onClick={[Function]}
                    title="Upload"
                  />
                  <WithStyles(Button)
                    id="cancelUploadBtn"
                    onClick={[Function]}
                  >
                    Cancel
                  </WithStyles(Button)>
                </WithStyles(DialogActions)>
              </WithStyles(Dialog)>,
              "_rendering": false,
              "_updater": [Circular],
            },
          },
          Symbol(enzyme.__setState__): [Function],
        }
      }
      label="Pipeline name"
      required={true}
    />
  </n>
  <WithStyles(DialogActions)>
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title="Upload"
    />
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    >
      Cancel
    </WithStyles(Button)>
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;
