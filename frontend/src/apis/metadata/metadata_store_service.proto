
/* Copyright 2019 Google LLC
 Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     https://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto2";

package ml_metadata;

import "src/apis/metadata/metadata_store.proto";

// An artifact and type pair. Part of an artifact struct.
message ArtifactAndType {
 optional Artifact artifact = 1;
 optional ArtifactType type = 2;
}

// A dictionary of artifact structs. Can represent a dictionary.
message ArtifactStructMap {
 // An artifact struct that is a dictionary.
 // Can be represented as a JSON dictionary of artifact structs.
 map<string, ArtifactStruct> properties = 1;
}

// An artifact struct that is a list.
message ArtifactStructList {
 // Can be represented as a JSON list of artifact structs.
 repeated ArtifactStruct elements = 1;
}

// An artifact struct represents the input or output of an Execution.
// See the more specific types referenced in the message for more details.
message ArtifactStruct {
 // Note: an artifact struct may be empty to indicate "None" or null.
 oneof value {
   ArtifactAndType artifact = 1;
   ArtifactStructMap map = 2;
   ArtifactStructList list = 3;
 }
}

message PutArtifactsRequest {
 repeated Artifact artifacts = 1;
}

message PutArtifactsResponse {
 // A list of artifact ids index-aligned with PutArtifactsRequest.
 repeated int64 artifact_ids = 1;
}

message PutArtifactTypeRequest {
 // The field is required in any request.
 optional ArtifactType artifact_type = 1;
 // if true, you can add fields with this operation. If false,
 // then if there are more fields in artifact_type than in the database,
 // the call fails.
 optional bool can_add_fields = 2;

  // if true, you can remove fields with this operation. If
 // false, then if there are more fields.
 optional bool can_delete_fields = 3;

  // if true, and an artifact type with the same name exists, then all
 // fields must match.
 optional bool all_fields_match = 4;
}

message PutArtifactTypeResponse {
 // The type ID of the artifact type.
 optional int64 type_id = 1;
}

message PutExecutionsRequest {
 repeated Execution executions = 1;
}

message PutExecutionsResponse {
 // A list of execution ids index-aligned with PutExecutionsRequest.
 repeated int64 execution_ids = 1;
}

message PutExecutionTypeRequest {
 // The field is required in any request.
 optional ExecutionType execution_type = 1;
 // if true, you can add fields with this operation. If false,
 // then if there are more fields in execution_type than in the database,
 // the call fails.
 optional bool can_add_fields = 2;

  // if true, you can remove fields with this operation. If
 // false, then if there are more fields.
 optional bool can_delete_fields = 3;

  // if true, and an artifact type with the same name exists, then all
 // fields must match.
 optional bool all_fields_match = 4;
}

message PutExecutionTypeResponse {
 // The type ID of the execution type.
 optional int64 type_id = 1;
}

message PutEventsRequest {
 repeated Event events = 1;
}

message PutEventsResponse {}

message PutExecutionRequest {
 // A pair of an artifact and an event used or generated by an execution, e.g.,
 // during the execution run, it uses none or many artifacts as input, and
 // generate none or many artifacts as output.
 message ArtifactAndEvent {
   // An activity must have an artifact. If no artifact.id, then it inserts
   // the artifact, otherwise it updates the artifact.
   optional Artifact artifact = 1;
   // An activity may have an event. Providing event.artifact_id or
   // event.execution_id is optional. If given, it must align with the
   // `artifact`.id / `execution`.id respectively.
   optional Event event = 2;
 }
 // The execution that produces many artifact and event pairs.
 optional Execution execution = 1;
 // The list of artifact and event pairs.
 repeated ArtifactAndEvent artifact_event_pairs = 2;
}

message PutExecutionResponse {
 // An execution id of the `execution` in PutExecutionRequest.
 optional int64 execution_id = 1;
 // A list of artifact ids index-aligned with `artifact_event_pairs` in the
 // PutExecutionRequest.
 repeated int64 artifact_ids = 2;
}

message PutTypesRequest {
 repeated ArtifactType artifact_types = 1;
 repeated ExecutionType execution_types = 2;
}

message PutTypesResponse {
 // The type ids of the artifact type.
 repeated int64 artifact_type_ids = 1;
 // The type ids of the execution type.
 repeated int64 execution_type_ids = 2;
}

message PutContextTypeRequest {
 // The field is required in any request.
 optional ContextType context_type = 1;
 // if true, you can add fields with this operation. If false, then if there
 // are more fields in context_type than in the database, the call fails.
 optional bool can_add_fields = 2;

  // if true, you can remove fields with this operation. If false, then if there
 // are less fields in context_type than in the database, the call fails.
 optional bool can_delete_fields = 3;

  // if true, and a context_type with the same name exists, then all fields
 // must match.
 optional bool all_fields_match = 4;
}

message PutContextTypeResponse {
 // The type ID of the context type.
 optional int64 type_id = 1;
}

message PutContextsRequest {
 repeated Context contexts = 1;
}

message PutContextsResponse {
 // A list of context ids index-aligned with PutContextsRequest.
 repeated int64 context_ids = 1;
}

message PutAttributionsAndAssociationsRequest {
 repeated Attribution attributions = 1;
 repeated Association associations = 2;
}

message PutAttributionsAndAssociationsResponse {}

message PutParentContextsRequest {
 repeated ParentContext parent_contexts = 1;
}

message PutParentContextsResponse {}

message GetArtifactsByTypeRequest {
 optional string type_name = 1;
}

message GetArtifactsByTypeResponse {
 repeated Artifact artifacts = 1;
}

message GetArtifactsByIDRequest {
 // A list of artifact ids to retrieve.
 repeated int64 artifact_ids = 1;
}

message GetArtifactsByIDResponse {
 // Artifacts with matching ids.
 // This is not index-aligned: if an id is not found, it is not
 repeated Artifact artifacts = 1;
}

message GetArtifactsRequest {
 // TODO(martinz): add query constraints here.
}

message GetArtifactsResponse {
 // All artifacts.
 repeated Artifact artifacts = 1;
}

message GetArtifactsByURIRequest {
 optional string uri = 1;
}

message GetArtifactsByURIResponse {
 repeated Artifact artifacts = 1;
}

message GetExecutionsRequest {
 // TODO(martinz): add query constraints here.
}

message GetExecutionsResponse {
 // All executions.
 repeated Execution executions = 1;
}

message GetArtifactTypeRequest {
 optional string type_name = 1;
}

message GetArtifactTypeResponse {
 // Gets an artifact type, or clear if it does not exist.
 optional ArtifactType artifact_type = 1;
}

message GetArtifactTypesRequest {}

message GetArtifactTypesResponse {
 repeated ArtifactType artifact_types = 1;
}

message GetExecutionTypesRequest {}

message GetExecutionTypesResponse {
 repeated ExecutionType execution_types = 1;
}

message GetExecutionsByTypeRequest {
 optional string type_name = 1;
}

message GetExecutionsByTypeResponse {
 repeated Execution executions = 1;
}

message GetExecutionsByIDRequest {
 // A list of execution ids to retrieve.
 repeated int64 execution_ids = 1;
}

message GetExecutionsByIDResponse {
 // The result is not index-aligned: if an id is not found, it is not
 // returned.
 repeated Execution executions = 1;
}

message GetExecutionTypeRequest {
 optional string type_name = 1;
}

message GetExecutionTypeResponse {
 // Gets an execution type, or clear if it does not exist.
 optional ExecutionType execution_type = 1;
}

// Gets all events with matching execution ids.
message GetEventsByExecutionIDsRequest {
 repeated int64 execution_ids = 1;
}

message GetEventsByExecutionIDsResponse {
 repeated Event events = 1;
}

message GetEventsByArtifactIDsRequest {
 repeated int64 artifact_ids = 1;
}

message GetEventsByArtifactIDsResponse {
 repeated Event events = 1;
}

message GetArtifactTypesByIDRequest {
 repeated int64 type_ids = 1;
}

message GetArtifactTypesByIDResponse {
 // The result is not index-aligned: if an id is not found, it is not
 // returned.
 repeated ArtifactType artifact_types = 1;
}

message GetExecutionTypesByIDRequest {
 repeated int64 type_ids = 1;
}

message GetExecutionTypesByIDResponse {
 // The result is not index-aligned: if an id is not found, it is not
 // returned.
 repeated ExecutionType execution_types = 1;
}

message GetContextTypeRequest {
 optional string type_name = 1;
}

message GetContextTypeResponse {
 // Gets a context type, or clear if it does not exist.
 optional ContextType context_type = 1;
}

message GetContextTypesByIDRequest {
 repeated int64 type_ids = 1;
}

message GetContextTypesByIDResponse {
 // The result is not index-aligned: if an id is not found, it is not
 // returned.
 repeated ContextType context_types = 1;
}

message GetContextsRequest {
 // TODO(martinz): add query constraints here.
}

message GetContextsResponse {
 // All contexts.
 repeated Context contexts = 1;
}

message GetContextsByTypeRequest {
 optional string type_name = 1;
}

message GetContextsByTypeResponse {
 repeated Context contexts = 1;
}

message GetContextsByIDRequest {
 // A list of context ids to retrieve.
 repeated int64 context_ids = 1;
}

message GetContextsByIDResponse {
 // The result is not index-aligned: if an id is not found, it is not
 // returned.
 repeated Context contexts = 1;
}

message GetContextsByArtifactRequest {
 optional int64 artifact_id = 1;
}

message GetContextsByArtifactResponse {
 repeated Context contexts = 1;
}

message GetContextsByExecutionRequest {
 optional int64 execution_id = 1;
}

message GetContextsByExecutionResponse {
 repeated Context contexts = 1;
}

message GetParentContextsByContextRequest {
 optional int64 context_id = 1;
}

message GetParentContextsByContextResponse {
 repeated Context contexts = 1;
}

message GetChildrenContextsByContextRequest {
 optional int64 context_id = 1;
}

message GetChildrenContextsByContextResponse {
 repeated Context contexts = 1;
}

message GetArtifactsByContextRequest {
 optional int64 context_id = 1;
}

message GetArtifactsByContextResponse {
 repeated Artifact artifacts = 1;
}

message GetExecutionsByContextRequest {
 optional int64 context_id = 1;
}

message GetExecutionsByContextResponse {
 repeated Execution executions = 1;
}

service MetadataStoreService {
 // Inserts or updates artifacts in the database.
 //
 // If an artifact_id is specified for an artifact, it is an update.
 // If an artifact_id is unspecified, it will insert a new artifact.
 // For new artifacts, type must be specified.
 // For old artifacts, type must be unchanged or unspecified.
 //
 // Args:
 //   artifacts: A list of artifacts to insert or update.
 //
 // Returns:
 //   A list of artifact ids index-aligned with the input.
 rpc PutArtifacts(PutArtifactsRequest) returns (PutArtifactsResponse) {}

  // Inserts or updates an artifact type.
 //
 // If no artifact type exists in the database with the given name, it creates
 // a new artifact type (and a database).
 //
 // If an artifact type with the same name already exists (let's call it
 // old_artifact_type), then the impact depends upon the other options.
 //
 // If artifact_type == old_artifact_type, then nothing happens.
 //
 // Otherwise, if there is a field where artifact_type and old_artifact_type
 // have different types, then it fails.
 //
 // Otherwise, if can_add_fields is False and artifact_type has a field
 // old_artifact_type is missing, then it fails.
 //
 // Otherwise, if all_fields_match is True and old_artifact_type has a field
 // artifact_type is missing, then it fails.
 //
 // Otherwise, if can_delete_fields is True and old_artifact_type has a field
 // artifact_type is missing, then it deletes that field.
 //
 // Otherwise, it does nothing.
 // Args:
 //   artifact_type: the type to add or update.
 //
 // Returns error if a constraint is violated.
 rpc PutArtifactType(PutArtifactTypeRequest)
     returns (PutArtifactTypeResponse) {}

  // Inserts or updates executions in the database.
 //
 // If an execution_id is specified for an execution, it is an update.
 // If an execution_id is unspecified, it will insert a new execution.
 // For new executions, type must be specified.
 // For old executions, type must be unchanged or unspecified.
 //
 // Args:
 //   executions: A list of executions to insert or update.
 //
 // Returns:
 //   A list of execution ids index-aligned with the input.
 //
 rpc PutExecutions(PutExecutionsRequest) returns (PutExecutionsResponse) {}

  // Inserts or updates an execution type.
 //
 // If no execution type exists in the database with the given name, it
 // creates a new execution type (and a database).
 //
 // If an execution type with the same name already exists (let's call it
 // old_execution_type), then the impact depends upon the other options.
 //
 // If execution_type == old_execution_type, then nothing happens.
 //
 // Otherwise, if there is a field where execution_type and old_execution_type
 // have different types, then it fails.
 //
 // Otherwise, if can_add_fields is False and execution_type has a field
 // old_execution_type is missing, then it fails.
 //
 // Otherwise, if all_fields_match is True and old_execution_type has a field
 // execution_type is missing, then it fails.
 //
 // Otherwise, if can_delete_fields is True and old_execution_type has a field
 // execution_type is missing, then it deletes that field.
 //
 // Otherwise, it does nothing.
 // Args:
 //   execution_type: the type to add or update.
 //   can_add_fields: if true, you can add fields with this operation. If
 // false, then if there are more fields in execution_type than in the
 // database,
 //     the call fails.
 //   can_delete_fields: if true, you can remove fields with this operation.
 // If false, then if there are more fields.
 //
 // Returns error if a constraint is violated.
 rpc PutExecutionType(PutExecutionTypeRequest)
     returns (PutExecutionTypeResponse) {}

  // Inserts events in the database.
 //
 // The execution_id and artifact_id must already exist.
 // Once created, events cannot be modified.
 //
 // Args:
 //   events: A list of events to insert or update.
 rpc PutEvents(PutEventsRequest) returns (PutEventsResponse) {}

  // Inserts or updates an Execution and its input and output artifacts
 // atomically. The artifact include the state changes of the Artifacts used
 // or generated by the Execution, as well as the input/output Event.
 //
 // If an execution_id or artifact_id is specified, it is an update, otherwise
 // it does an insertion. For insertion, type must be specified.
 //
 // Args:
 //   execution: An executions to insert or update.
 //   artifact_event_pairs: Artifacts to insert or update and events to insert.
 //
 // Returns:
 //   An execution id and a list of artifacts ids index-aligned with the input.
 rpc PutExecution(PutExecutionRequest) returns (PutExecutionResponse) {}

  // Bulk inserts types atomically.
 //
 // If no type exists in the database with the given name, it creates
 // a new type.
 //
 // If a type with the same name already exists (let's call it
 // old_type), then the impact depends upon the other options.
 //
 // If type == old_type, then nothing happens.
 //
 // Otherwise, if there is a field where type and old_type have different
 // types, then it fails.
 //
 // Args:
 //   artifact_type: the artifact type to add or update.
 //   execution_type: the execution type to add or update.
 //
 // Returns error if a constraint is violated.
 rpc PutTypes(PutTypesRequest) returns (PutTypesResponse) {}

  // Inserts or updates an ContextType.
 //
 // If no context type exists in the database with the given name, it
 // creates a new context type (and a database).
 //
 // If an context type with the same name already exists (let's call it
 // old_context_type), then the impact depends upon the other options.
 //
 // If context_type == old_context_type, nothing happens (its id is returned).
 //
 // Otherwise, when context_type and old_context_type have different types,
 // a) if all_fields_match is True: then it fails.
 // b) can_add_fields is True: it fails when old_context_type has additional
 // fields than context_type.
 //
 // Returns error if a constraint is violated.
 rpc PutContextType(PutContextTypeRequest) returns (PutContextTypeResponse) {}

  // Inserts or updates contexts in database and returns a list of context ids.
 //
 // If an context_id is specified for a context, it is an update.
 // If an context_id is unspecified, it will insert a new context.
 // For new contexts, type must be specified.
 // For old contexts, type must be unchanged or unspecified.
 //
 // Args:
 //   contexts: A list of contexts to insert or update.
 //
 // Returns:
 //   A list of context ids index-aligned with the input.
 rpc PutContexts(PutContextsRequest) returns (PutContextsResponse) {}

  // Inserts attribution and association relationships in the database.
 // The context_id, artifact_id, and execution_id must already exist.
 // If the relationship exists, this call does nothing. Once added, the
 // relationships cannot be modified.
 //
 // Args:
 //   attributions: A list of attributions to insert.
 //   associations: A list of associations to insert.
 rpc PutAttributionsAndAssociations(PutAttributionsAndAssociationsRequest)
     returns (PutAttributionsAndAssociationsResponse) {}

  // Inserts parental context relationships in the database.
 // The ParentContext relationship has direction. The call fails if cycles are
 // detected.
 //
 // Args:
 //   parent_contexts: A list of parent contexts to insert.
 rpc PutParentContexts(PutParentContextsRequest)
     returns (PutParentContextsResponse) {}

  // Gets an artifact type. Returns a NOT_FOUND error if the type does not
 // exist.
 rpc GetArtifactType(GetArtifactTypeRequest)
     returns (GetArtifactTypeResponse) {}

  // Gets a list of artifact types by ID.
 // If no artifact types with an ID exists, the artifact type is skipped.
 rpc GetArtifactTypesByID(GetArtifactTypesByIDRequest)
     returns (GetArtifactTypesByIDResponse) {}

  // Gets a list of all artifact types.
 rpc GetArtifactTypes(GetArtifactTypesRequest)
     returns (GetArtifactTypesResponse) {}

  // Gets an execution type, or None if it does not exist.
 rpc GetExecutionType(GetExecutionTypeRequest)
     returns (GetExecutionTypeResponse) {}

  // Gets a list of execution types by ID.
 // If no execution types with an ID exists, the execution type is skipped.
 rpc GetExecutionTypesByID(GetExecutionTypesByIDRequest)
     returns (GetExecutionTypesByIDResponse) {}

  // Gets a list of all execution types.
 rpc GetExecutionTypes(GetExecutionTypesRequest)
     returns (GetExecutionTypesResponse) {}

  // Gets a context type. Returns a NOT_FOUND error if the type does not exist.
 rpc GetContextType(GetContextTypeRequest) returns (GetContextTypeResponse) {}

  // Gets a list of context types by ID.
 // If no context types with an ID exists, the context type is skipped.
 rpc GetContextTypesByID(GetContextTypesByIDRequest)
     returns (GetContextTypesByIDResponse) {}

  // Gets all the artifacts.
 rpc GetArtifacts(GetArtifactsRequest) returns (GetArtifactsResponse) {}

  // Gets all the executions.
 rpc GetExecutions(GetExecutionsRequest) returns (GetExecutionsResponse) {}

  // Gets all the contexts.
 rpc GetContexts(GetContextsRequest) returns (GetContextsResponse) {}

  // Gets all artifacts with matching ids.
 //
 // The result is not index-aligned: if an id is not found, it is not returned.
 //
 // Args:
 //   artifact_ids: A list of artifact ids to retrieve.
 //
 // Returns:
 //   Artifacts with matching ids.
 rpc GetArtifactsByID(GetArtifactsByIDRequest)
     returns (GetArtifactsByIDResponse) {}

  // Gets all executions with matching ids.
 //
 // The result is not index-aligned: if an id is not found, it is not returned.
 //
 // Args:
 //   execution_ids: A list of execution ids to retrieve.
 rpc GetExecutionsByID(GetExecutionsByIDRequest)
     returns (GetExecutionsByIDResponse) {}

  // Gets all contexts with matching ids.
 //
 // The result is not index-aligned: if an id is not found, it is not returned.
 //
 // Args:
 //   context_ids: A list of context ids to retrieve.
 rpc GetContextsByID(GetContextsByIDRequest)
     returns (GetContextsByIDResponse) {}

  // Gets all the artifacts of a given type.
 rpc GetArtifactsByType(GetArtifactsByTypeRequest)
     returns (GetArtifactsByTypeResponse) {}

  // Gets all the executions of a given type.
 rpc GetExecutionsByType(GetExecutionsByTypeRequest)
     returns (GetExecutionsByTypeResponse) {}

  // Gets all the contexts of a given type.
 rpc GetContextsByType(GetContextsByTypeRequest)
     returns (GetContextsByTypeResponse) {}

  // Gets all the artifacts of a given uri.
 rpc GetArtifactsByURI(GetArtifactsByURIRequest)
     returns (GetArtifactsByURIResponse) {}

  // Gets all events with matching execution ids.
 rpc GetEventsByExecutionIDs(GetEventsByExecutionIDsRequest)
     returns (GetEventsByExecutionIDsResponse) {}

  // Gets all events with matching artifact ids.
 rpc GetEventsByArtifactIDs(GetEventsByArtifactIDsRequest)
     returns (GetEventsByArtifactIDsResponse) {}

  // Gets all context that an artifact is attributed to.
 rpc GetContextsByArtifact(GetContextsByArtifactRequest)
     returns (GetContextsByArtifactResponse) {}

  // Gets all context that an execution is associated with.
 rpc GetContextsByExecution(GetContextsByExecutionRequest)
     returns (GetContextsByExecutionResponse) {}

  // Gets all parent contexts that a context is related.
 rpc GetParentContextsByContext(GetParentContextsByContextRequest)
     returns (GetParentContextsByContextResponse) {}

  // Gets all children contexts that a context is related.
 rpc GetChildrenContextsByContext(GetChildrenContextsByContextRequest)
     returns (GetChildrenContextsByContextResponse) {}

  // Gets all direct artifacts that a context attributes to.
 rpc GetArtifactsByContext(GetArtifactsByContextRequest)
     returns (GetArtifactsByContextResponse) {}

  // Gets all direct executions that a context associates with.
 rpc GetExecutionsByContext(GetExecutionsByContextRequest)
     returns (GetExecutionsByContextResponse) {}
}
