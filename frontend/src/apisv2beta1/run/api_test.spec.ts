/**
 * backend/api/v2beta1/run.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from './api';
import { Configuration } from './configuration';

const config: Configuration = {};

describe('RunServiceApi', () => {
  let instance: api.RunServiceApi;
  beforeEach(function() {
    instance = new api.RunServiceApi(config);
  });

  test('archiveRun', () => {
    const run_id: string = 'run_id_example';
    const experiment_id: string = 'experiment_id_example';
    return expect(instance.archiveRun(run_id, experiment_id, {})).resolves.toBe(null);
  });
  test('createRun', () => {
    const body: api.V2beta1Run = undefined;
    const experiment_id: string = 'experiment_id_example';
    return expect(instance.createRun(body, experiment_id, {})).resolves.toBe(null);
  });
  test('deleteRun', () => {
    const run_id: string = 'run_id_example';
    const experiment_id: string = 'experiment_id_example';
    return expect(instance.deleteRun(run_id, experiment_id, {})).resolves.toBe(null);
  });
  test('getRun', () => {
    const run_id: string = 'run_id_example';
    const experiment_id: string = 'experiment_id_example';
    return expect(instance.getRun(run_id, experiment_id, {})).resolves.toBe(null);
  });
  test('listRuns', () => {
    const namespace: string = 'namespace_example';
    const experiment_id: string = 'experiment_id_example';
    const page_token: string = 'page_token_example';
    const page_size: number = 56;
    const sort_by: string = 'sort_by_example';
    const filter: string = 'filter_example';
    return expect(
      instance.listRuns(namespace, experiment_id, page_token, page_size, sort_by, filter, {}),
    ).resolves.toBe(null);
  });
  test('runServiceReadArtifact', () => {
    const run_id: string = 'run_id_example';
    const node_id: string = 'node_id_example';
    const artifact_name: string = 'artifact_name_example';
    const experiment_id: string = 'experiment_id_example';
    return expect(
      instance.runServiceReadArtifact(run_id, node_id, artifact_name, experiment_id, {}),
    ).resolves.toBe(null);
  });
  test('retryRun', () => {
    const run_id: string = 'run_id_example';
    const experiment_id: string = 'experiment_id_example';
    return expect(instance.retryRun(run_id, experiment_id, {})).resolves.toBe(null);
  });
  test('terminateRun', () => {
    const run_id: string = 'run_id_example';
    const experiment_id: string = 'experiment_id_example';
    return expect(instance.terminateRun(run_id, experiment_id, {})).resolves.toBe(null);
  });
  test('unarchiveRun', () => {
    const run_id: string = 'run_id_example';
    const experiment_id: string = 'experiment_id_example';
    return expect(instance.unarchiveRun(run_id, experiment_id, {})).resolves.toBe(null);
  });
});
