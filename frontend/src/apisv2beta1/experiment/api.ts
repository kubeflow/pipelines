/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * backend/api/v2beta1/experiment.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from 'url';
import * as portableFetch from 'portable-fetch';
import { Configuration } from './configuration';

const BASE_PATH = 'http://localhost'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: 'RequiredError';
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details.  You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 * @export
 * @interface GooglerpcStatus
 */
export interface GooglerpcStatus {
  /**
   * The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
   * @type {number}
   * @memberof GooglerpcStatus
   */
  code?: number;
  /**
   * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
   * @type {string}
   * @memberof GooglerpcStatus
   */
  message?: string;
  /**
   * A list of messages that carry the error details.  There is a common set of message types for APIs to use.
   * @type {Array<ProtobufAny>}
   * @memberof GooglerpcStatus
   */
  details?: Array<ProtobufAny>;
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }     // or ...     if (any.isSameTypeAs(Foo.getDefaultInstance())) {       foo = any.unpack(Foo.getDefaultInstance());     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".  JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
  [key: string]: any | any;

  /**
   * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
   * @type {string}
   * @memberof ProtobufAny
   */
  type?: string;
}

/**
 *
 * @export
 * @interface V2beta1Experiment
 */
export interface V2beta1Experiment {
  /**
   * Output. Unique experiment ID. Generated by API server.
   * @type {string}
   * @memberof V2beta1Experiment
   */
  experiment_id?: string;
  /**
   * Required input field. Unique experiment name provided by user.
   * @type {string}
   * @memberof V2beta1Experiment
   */
  display_name?: string;
  /**
   * Optional input field. Describes the purpose of the experiment.
   * @type {string}
   * @memberof V2beta1Experiment
   */
  description?: string;
  /**
   * Output. The time that the experiment was created.
   * @type {Date}
   * @memberof V2beta1Experiment
   */
  created_at?: Date;
  /**
   * Optional input field. Specify the namespace this experiment belongs to.
   * @type {string}
   * @memberof V2beta1Experiment
   */
  namespace?: string;
  /**
   * Output. Specifies whether this experiment is in archived or available state.
   * @type {V2beta1ExperimentStorageState}
   * @memberof V2beta1Experiment
   */
  storage_state?: V2beta1ExperimentStorageState;
  /**
   * Output. The creation time of the last run in this experiment.
   * @type {Date}
   * @memberof V2beta1Experiment
   */
  last_run_created_at?: Date;
}

/**
 * Describes whether an entity is available or archived.   - STORAGE_STATE_UNSPECIFIED: Default state. This state in not used  - AVAILABLE: Entity is available.  - ARCHIVED: Entity is archived.
 * @export
 * @enum {string}
 */
export enum V2beta1ExperimentStorageState {
  STORAGESTATEUNSPECIFIED = <any>'STORAGE_STATE_UNSPECIFIED',
  AVAILABLE = <any>'AVAILABLE',
  ARCHIVED = <any>'ARCHIVED',
}

/**
 *
 * @export
 * @interface V2beta1ListExperimentsResponse
 */
export interface V2beta1ListExperimentsResponse {
  /**
   * A list of experiments returned.
   * @type {Array<V2beta1Experiment>}
   * @memberof V2beta1ListExperimentsResponse
   */
  experiments?: Array<V2beta1Experiment>;
  /**
   * The number of experiments for the given query.
   * @type {number}
   * @memberof V2beta1ListExperimentsResponse
   */
  total_size?: number;
  /**
   * The token to list the next page of experiments.
   * @type {string}
   * @memberof V2beta1ListExperimentsResponse
   */
  next_page_token?: string;
}

/**
 * ExperimentServiceApi - fetch parameter creator
 * @export
 */
export const ExperimentServiceApiFetchParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Archives an experiment and the experiment's runs and recurring runs.
     * @param {string} experiment_id The ID of the experiment to be archived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceArchiveExperiment(experiment_id: string, options: any = {}): FetchArgs {
      // verify required parameter 'experiment_id' is not null or undefined
      if (experiment_id === null || experiment_id === undefined) {
        throw new RequiredError(
          'experiment_id',
          'Required parameter experiment_id was null or undefined when calling experimentServiceArchiveExperiment.',
        );
      }
      const localVarPath = `/apis/v2beta1/experiments/{experiment_id}:archive`.replace(
        `{${'experiment_id'}}`,
        encodeURIComponent(String(experiment_id)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      localVarUrlObj.search = undefined;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates a new experiment.
     * @param {V2beta1Experiment} experiment The experiment to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceCreateExperiment(experiment: V2beta1Experiment, options: any = {}): FetchArgs {
      // verify required parameter 'experiment' is not null or undefined
      if (experiment === null || experiment === undefined) {
        throw new RequiredError(
          'experiment',
          'Required parameter experiment was null or undefined when calling experimentServiceCreateExperiment.',
        );
      }
      const localVarPath = `/apis/v2beta1/experiments`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      localVarUrlObj.search = undefined;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        <any>'V2beta1Experiment' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization
        ? JSON.stringify(experiment || {})
        : experiment || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes an experiment without deleting the experiment's runs and recurring  runs. To avoid unexpected behaviors, delete an experiment's runs and recurring  runs before deleting the experiment.
     * @param {string} experiment_id The ID of the experiment to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceDeleteExperiment(experiment_id: string, options: any = {}): FetchArgs {
      // verify required parameter 'experiment_id' is not null or undefined
      if (experiment_id === null || experiment_id === undefined) {
        throw new RequiredError(
          'experiment_id',
          'Required parameter experiment_id was null or undefined when calling experimentServiceDeleteExperiment.',
        );
      }
      const localVarPath = `/apis/v2beta1/experiments/{experiment_id}`.replace(
        `{${'experiment_id'}}`,
        encodeURIComponent(String(experiment_id)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      localVarUrlObj.search = undefined;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Finds a specific experiment by ID.
     * @param {string} experiment_id The ID of the experiment to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceGetExperiment(experiment_id: string, options: any = {}): FetchArgs {
      // verify required parameter 'experiment_id' is not null or undefined
      if (experiment_id === null || experiment_id === undefined) {
        throw new RequiredError(
          'experiment_id',
          'Required parameter experiment_id was null or undefined when calling experimentServiceGetExperiment.',
        );
      }
      const localVarPath = `/apis/v2beta1/experiments/{experiment_id}`.replace(
        `{${'experiment_id'}}`,
        encodeURIComponent(String(experiment_id)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      localVarUrlObj.search = undefined;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Finds all experiments. Supports pagination, and sorting on certain fields.
     * @param {string} [page_token] A page token to request the next page of results. The token is acquried from the nextPageToken field of the response from the previous ListExperiments call or can be omitted when fetching the first page.
     * @param {number} [page_size] The number of experiments to be listed per page. If there are more experiments than this number, the response message will contain a nextPageToken field you can use to fetch the next page.
     * @param {string} [sort_by] Can be format of \&quot;field_name\&quot;, \&quot;field_name asc\&quot; or \&quot;field_name desc\&quot; Ascending by default.
     * @param {string} [filter] A url-encoded, JSON-serialized Filter protocol buffer (see [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v2beta1/api/filter.proto)).
     * @param {string} [namespace] Which namespace to filter the experiments on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceListExperiments(
      page_token?: string,
      page_size?: number,
      sort_by?: string,
      filter?: string,
      namespace?: string,
      options: any = {},
    ): FetchArgs {
      const localVarPath = `/apis/v2beta1/experiments`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page_token !== undefined) {
        localVarQueryParameter['page_token'] = page_token;
      }

      if (page_size !== undefined) {
        localVarQueryParameter['page_size'] = page_size;
      }

      if (sort_by !== undefined) {
        localVarQueryParameter['sort_by'] = sort_by;
      }

      if (filter !== undefined) {
        localVarQueryParameter['filter'] = filter;
      }

      if (namespace !== undefined) {
        localVarQueryParameter['namespace'] = namespace;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      localVarUrlObj.search = undefined;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Restores an archived experiment. The experiment's archived runs and recurring runs will stay archived.
     * @param {string} experiment_id The ID of the experiment to be restored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceUnarchiveExperiment(experiment_id: string, options: any = {}): FetchArgs {
      // verify required parameter 'experiment_id' is not null or undefined
      if (experiment_id === null || experiment_id === undefined) {
        throw new RequiredError(
          'experiment_id',
          'Required parameter experiment_id was null or undefined when calling experimentServiceUnarchiveExperiment.',
        );
      }
      const localVarPath = `/apis/v2beta1/experiments/{experiment_id}:unarchive`.replace(
        `{${'experiment_id'}}`,
        encodeURIComponent(String(experiment_id)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      localVarUrlObj.search = undefined;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ExperimentServiceApi - functional programming interface
 * @export
 */
export const ExperimentServiceApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @summary Archives an experiment and the experiment's runs and recurring runs.
     * @param {string} experiment_id The ID of the experiment to be archived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceArchiveExperiment(
      experiment_id: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = ExperimentServiceApiFetchParamCreator(
        configuration,
      ).experimentServiceArchiveExperiment(experiment_id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Creates a new experiment.
     * @param {V2beta1Experiment} experiment The experiment to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceCreateExperiment(
      experiment: V2beta1Experiment,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<V2beta1Experiment> {
      const localVarFetchArgs = ExperimentServiceApiFetchParamCreator(
        configuration,
      ).experimentServiceCreateExperiment(experiment, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Deletes an experiment without deleting the experiment's runs and recurring  runs. To avoid unexpected behaviors, delete an experiment's runs and recurring  runs before deleting the experiment.
     * @param {string} experiment_id The ID of the experiment to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceDeleteExperiment(
      experiment_id: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = ExperimentServiceApiFetchParamCreator(
        configuration,
      ).experimentServiceDeleteExperiment(experiment_id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Finds a specific experiment by ID.
     * @param {string} experiment_id The ID of the experiment to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceGetExperiment(
      experiment_id: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<V2beta1Experiment> {
      const localVarFetchArgs = ExperimentServiceApiFetchParamCreator(
        configuration,
      ).experimentServiceGetExperiment(experiment_id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Finds all experiments. Supports pagination, and sorting on certain fields.
     * @param {string} [page_token] A page token to request the next page of results. The token is acquried from the nextPageToken field of the response from the previous ListExperiments call or can be omitted when fetching the first page.
     * @param {number} [page_size] The number of experiments to be listed per page. If there are more experiments than this number, the response message will contain a nextPageToken field you can use to fetch the next page.
     * @param {string} [sort_by] Can be format of \&quot;field_name\&quot;, \&quot;field_name asc\&quot; or \&quot;field_name desc\&quot; Ascending by default.
     * @param {string} [filter] A url-encoded, JSON-serialized Filter protocol buffer (see [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v2beta1/api/filter.proto)).
     * @param {string} [namespace] Which namespace to filter the experiments on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceListExperiments(
      page_token?: string,
      page_size?: number,
      sort_by?: string,
      filter?: string,
      namespace?: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<V2beta1ListExperimentsResponse> {
      const localVarFetchArgs = ExperimentServiceApiFetchParamCreator(
        configuration,
      ).experimentServiceListExperiments(
        page_token,
        page_size,
        sort_by,
        filter,
        namespace,
        options,
      );
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     *
     * @summary Restores an archived experiment. The experiment's archived runs and recurring runs will stay archived.
     * @param {string} experiment_id The ID of the experiment to be restored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceUnarchiveExperiment(
      experiment_id: string,
      options?: any,
    ): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
      const localVarFetchArgs = ExperimentServiceApiFetchParamCreator(
        configuration,
      ).experimentServiceUnarchiveExperiment(experiment_id, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  };
};

/**
 * ExperimentServiceApi - factory interface
 * @export
 */
export const ExperimentServiceApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string,
) {
  return {
    /**
     *
     * @summary Archives an experiment and the experiment's runs and recurring runs.
     * @param {string} experiment_id The ID of the experiment to be archived.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceArchiveExperiment(experiment_id: string, options?: any) {
      return ExperimentServiceApiFp(configuration).experimentServiceArchiveExperiment(
        experiment_id,
        options,
      )(fetch, basePath);
    },
    /**
     *
     * @summary Creates a new experiment.
     * @param {V2beta1Experiment} experiment The experiment to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceCreateExperiment(experiment: V2beta1Experiment, options?: any) {
      return ExperimentServiceApiFp(configuration).experimentServiceCreateExperiment(
        experiment,
        options,
      )(fetch, basePath);
    },
    /**
     *
     * @summary Deletes an experiment without deleting the experiment's runs and recurring  runs. To avoid unexpected behaviors, delete an experiment's runs and recurring  runs before deleting the experiment.
     * @param {string} experiment_id The ID of the experiment to be deleted.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceDeleteExperiment(experiment_id: string, options?: any) {
      return ExperimentServiceApiFp(configuration).experimentServiceDeleteExperiment(
        experiment_id,
        options,
      )(fetch, basePath);
    },
    /**
     *
     * @summary Finds a specific experiment by ID.
     * @param {string} experiment_id The ID of the experiment to be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceGetExperiment(experiment_id: string, options?: any) {
      return ExperimentServiceApiFp(configuration).experimentServiceGetExperiment(
        experiment_id,
        options,
      )(fetch, basePath);
    },
    /**
     *
     * @summary Finds all experiments. Supports pagination, and sorting on certain fields.
     * @param {string} [page_token] A page token to request the next page of results. The token is acquried from the nextPageToken field of the response from the previous ListExperiments call or can be omitted when fetching the first page.
     * @param {number} [page_size] The number of experiments to be listed per page. If there are more experiments than this number, the response message will contain a nextPageToken field you can use to fetch the next page.
     * @param {string} [sort_by] Can be format of \&quot;field_name\&quot;, \&quot;field_name asc\&quot; or \&quot;field_name desc\&quot; Ascending by default.
     * @param {string} [filter] A url-encoded, JSON-serialized Filter protocol buffer (see [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v2beta1/api/filter.proto)).
     * @param {string} [namespace] Which namespace to filter the experiments on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceListExperiments(
      page_token?: string,
      page_size?: number,
      sort_by?: string,
      filter?: string,
      namespace?: string,
      options?: any,
    ) {
      return ExperimentServiceApiFp(configuration).experimentServiceListExperiments(
        page_token,
        page_size,
        sort_by,
        filter,
        namespace,
        options,
      )(fetch, basePath);
    },
    /**
     *
     * @summary Restores an archived experiment. The experiment's archived runs and recurring runs will stay archived.
     * @param {string} experiment_id The ID of the experiment to be restored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    experimentServiceUnarchiveExperiment(experiment_id: string, options?: any) {
      return ExperimentServiceApiFp(configuration).experimentServiceUnarchiveExperiment(
        experiment_id,
        options,
      )(fetch, basePath);
    },
  };
};

/**
 * ExperimentServiceApi - object-oriented interface
 * @export
 * @class ExperimentServiceApi
 * @extends {BaseAPI}
 */
export class ExperimentServiceApi extends BaseAPI {
  /**
   *
   * @summary Archives an experiment and the experiment's runs and recurring runs.
   * @param {string} experiment_id The ID of the experiment to be archived.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExperimentServiceApi
   */
  public experimentServiceArchiveExperiment(experiment_id: string, options?: any) {
    return ExperimentServiceApiFp(this.configuration).experimentServiceArchiveExperiment(
      experiment_id,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Creates a new experiment.
   * @param {V2beta1Experiment} experiment The experiment to be created.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExperimentServiceApi
   */
  public experimentServiceCreateExperiment(experiment: V2beta1Experiment, options?: any) {
    return ExperimentServiceApiFp(this.configuration).experimentServiceCreateExperiment(
      experiment,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Deletes an experiment without deleting the experiment's runs and recurring  runs. To avoid unexpected behaviors, delete an experiment's runs and recurring  runs before deleting the experiment.
   * @param {string} experiment_id The ID of the experiment to be deleted.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExperimentServiceApi
   */
  public experimentServiceDeleteExperiment(experiment_id: string, options?: any) {
    return ExperimentServiceApiFp(this.configuration).experimentServiceDeleteExperiment(
      experiment_id,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Finds a specific experiment by ID.
   * @param {string} experiment_id The ID of the experiment to be retrieved.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExperimentServiceApi
   */
  public experimentServiceGetExperiment(experiment_id: string, options?: any) {
    return ExperimentServiceApiFp(this.configuration).experimentServiceGetExperiment(
      experiment_id,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Finds all experiments. Supports pagination, and sorting on certain fields.
   * @param {string} [page_token] A page token to request the next page of results. The token is acquried from the nextPageToken field of the response from the previous ListExperiments call or can be omitted when fetching the first page.
   * @param {number} [page_size] The number of experiments to be listed per page. If there are more experiments than this number, the response message will contain a nextPageToken field you can use to fetch the next page.
   * @param {string} [sort_by] Can be format of \&quot;field_name\&quot;, \&quot;field_name asc\&quot; or \&quot;field_name desc\&quot; Ascending by default.
   * @param {string} [filter] A url-encoded, JSON-serialized Filter protocol buffer (see [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v2beta1/api/filter.proto)).
   * @param {string} [namespace] Which namespace to filter the experiments on.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExperimentServiceApi
   */
  public experimentServiceListExperiments(
    page_token?: string,
    page_size?: number,
    sort_by?: string,
    filter?: string,
    namespace?: string,
    options?: any,
  ) {
    return ExperimentServiceApiFp(this.configuration).experimentServiceListExperiments(
      page_token,
      page_size,
      sort_by,
      filter,
      namespace,
      options,
    )(this.fetch, this.basePath);
  }

  /**
   *
   * @summary Restores an archived experiment. The experiment's archived runs and recurring runs will stay archived.
   * @param {string} experiment_id The ID of the experiment to be restored.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExperimentServiceApi
   */
  public experimentServiceUnarchiveExperiment(experiment_id: string, options?: any) {
    return ExperimentServiceApiFp(this.configuration).experimentServiceUnarchiveExperiment(
      experiment_id,
      options,
    )(this.fetch, this.basePath);
  }
}
