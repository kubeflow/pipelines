/**
 * backend/api/v2beta1/pipeline.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from './api';
import { Configuration } from './configuration';

const config: Configuration = {};

describe('PipelineServiceApi', () => {
  let instance: api.PipelineServiceApi;
  beforeEach(function() {
    instance = new api.PipelineServiceApi(config);
  });

  test('createPipeline', () => {
    const body: api.V2beta1Pipeline = undefined;
    return expect(instance.createPipeline(body, {})).resolves.toBe(null);
  });
  test('pipelineServiceCreatePipelineAndVersion', () => {
    const body: api.V2beta1CreatePipelineAndVersionRequest = undefined;
    return expect(instance.pipelineServiceCreatePipelineAndVersion(body, {})).resolves.toBe(null);
  });
  test('createPipelineVersion', () => {
    const body: api.V2beta1PipelineVersion = undefined;
    const pipeline_id: string = 'pipeline_id_example';
    return expect(instance.createPipelineVersion(body, pipeline_id, {})).resolves.toBe(null);
  });
  test('deletePipeline', () => {
    const pipeline_id: string = 'pipeline_id_example';
    const cascade: boolean = true;
    return expect(instance.deletePipeline(pipeline_id, cascade, {})).resolves.toBe(null);
  });
  test('deletePipelineVersion', () => {
    const pipeline_id: string = 'pipeline_id_example';
    const pipeline_version_id: string = 'pipeline_version_id_example';
    return expect(
      instance.deletePipelineVersion(pipeline_id, pipeline_version_id, {}),
    ).resolves.toBe(null);
  });
  test('getPipeline', () => {
    const pipeline_id: string = 'pipeline_id_example';
    return expect(instance.getPipeline(pipeline_id, {})).resolves.toBe(null);
  });
  test('pipelineServiceGetPipelineByName', () => {
    const name: string = 'name_example';
    const namespace: string = 'namespace_example';
    return expect(instance.pipelineServiceGetPipelineByName(name, namespace, {})).resolves.toBe(
      null,
    );
  });
  test('getPipelineVersion', () => {
    const pipeline_id: string = 'pipeline_id_example';
    const pipeline_version_id: string = 'pipeline_version_id_example';
    return expect(instance.getPipelineVersion(pipeline_id, pipeline_version_id, {})).resolves.toBe(
      null,
    );
  });
  test('listPipelineVersions', () => {
    const pipeline_id: string = 'pipeline_id_example';
    const page_token: string = 'page_token_example';
    const page_size: number = 56;
    const sort_by: string = 'sort_by_example';
    const filter: string = 'filter_example';
    return expect(
      instance.listPipelineVersions(pipeline_id, page_token, page_size, sort_by, filter, {}),
    ).resolves.toBe(null);
  });
  test('listPipelines', () => {
    const namespace: string = 'namespace_example';
    const page_token: string = 'page_token_example';
    const page_size: number = 56;
    const sort_by: string = 'sort_by_example';
    const filter: string = 'filter_example';
    return expect(
      instance.listPipelines(namespace, page_token, page_size, sort_by, filter, {}),
    ).resolves.toBe(null);
  });
});
