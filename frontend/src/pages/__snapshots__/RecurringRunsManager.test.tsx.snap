// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RecurringRunsManager calls API to load recurring runs 1`] = `
<Fragment>
  <Toolbar
    actions={Object {}}
    breadcrumbs={Array []}
    pageTitle="Recurring runs"
  />
  <CustomTable
    columns={
      Array [
        Object {
          "customRenderer": [Function],
          "flex": 2,
          "label": "Run name",
          "sortKey": "name",
        },
        Object {
          "flex": 2,
          "label": "Created at",
          "sortKey": "created_at",
        },
        Object {
          "customRenderer": [Function],
          "flex": 1,
          "label": "",
        },
      ]
    }
    disableSelection={true}
    emptyMessage="No recurring runs found in this experiment."
    filterLabel="Filter recurring runs"
    initialSortColumn="created_at"
    reload={[Function]}
    rows={
      Array [
        Object {
          "error": undefined,
          "id": "job1",
          "otherFields": Array [
            "test recurring run name",
            "11/9/2018, 8:07:06 AM",
            true,
          ],
        },
        Object {
          "error": undefined,
          "id": "job2",
          "otherFields": Array [
            "test recurring run name2",
            "11/9/2018, 8:07:06 AM",
            false,
          ],
        },
        Object {
          "error": undefined,
          "id": "job3",
          "otherFields": Array [
            "test recurring run name3",
            "11/9/2018, 8:07:06 AM",
            undefined,
          ],
        },
      ]
    }
    selectedIds={Array []}
    updateSelection={[Function]}
  />
</Fragment>
`;

exports[`RecurringRunsManager reloads the list of runs after enable/disabling 1`] = `
<Button
  className="root"
  classes={
    Object {
      "colorInherit": "MuiButton-colorInherit-841",
      "contained": "MuiButton-contained-831",
      "containedPrimary": "MuiButton-containedPrimary-832",
      "containedSecondary": "MuiButton-containedSecondary-833",
      "disabled": "MuiButton-disabled-840",
      "extendedFab": "MuiButton-extendedFab-838",
      "fab": "MuiButton-fab-837",
      "flat": "MuiButton-flat-825",
      "flatPrimary": "MuiButton-flatPrimary-826",
      "flatSecondary": "MuiButton-flatSecondary-827",
      "focusVisible": "MuiButton-focusVisible-839",
      "fullWidth": "MuiButton-fullWidth-845",
      "label": "MuiButton-label-821",
      "mini": "MuiButton-mini-842",
      "outlined": "MuiButton-outlined-828",
      "outlinedPrimary": "MuiButton-outlinedPrimary-829",
      "outlinedSecondary": "MuiButton-outlinedSecondary-830",
      "raised": "MuiButton-raised-834",
      "raisedPrimary": "MuiButton-raisedPrimary-835",
      "raisedSecondary": "MuiButton-raisedSecondary-836",
      "root": "MuiButton-root-820",
      "sizeLarge": "MuiButton-sizeLarge-844",
      "sizeSmall": "MuiButton-sizeSmall-843",
      "text": "MuiButton-text-822",
      "textPrimary": "MuiButton-textPrimary-823",
      "textSecondary": "MuiButton-textSecondary-824",
    }
  }
  color="primary"
  component="button"
  disableFocusRipple={false}
  disabled={false}
  fullWidth={false}
  mini={false}
  onClick={[Function]}
  size="medium"
  type="button"
  variant="text"
>
  <WithStyles(ButtonBase)
    className="MuiButton-root-820 MuiButton-text-822 MuiButton-textPrimary-823 MuiButton-flat-825 MuiButton-flatPrimary-826 root"
    component="button"
    disabled={false}
    focusRipple={true}
    focusVisibleClassName="MuiButton-focusVisible-839"
    onClick={[Function]}
    type="button"
  >
    <ButtonBase
      centerRipple={false}
      className="MuiButton-root-820 MuiButton-text-822 MuiButton-textPrimary-823 MuiButton-flat-825 MuiButton-flatPrimary-826 root"
      classes={
        Object {
          "disabled": "MuiButtonBase-disabled-771",
          "focusVisible": "MuiButtonBase-focusVisible-772",
          "root": "MuiButtonBase-root-770",
        }
      }
      component="button"
      disableRipple={false}
      disableTouchRipple={false}
      disabled={false}
      focusRipple={true}
      focusVisibleClassName="MuiButton-focusVisible-839"
      onClick={[Function]}
      tabIndex="0"
      type="button"
    >
      <button
        className="MuiButtonBase-root-770 MuiButton-root-820 MuiButton-text-822 MuiButton-textPrimary-823 MuiButton-flat-825 MuiButton-flatPrimary-826 root"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onContextMenu={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex="0"
        type="button"
      >
        <span
          className="MuiButton-label-821"
        >
          <span>
            Enabled
          </span>
        </span>
        <NoSsr
          defer={false}
          fallback={null}
        >
          <WithStyles(TouchRipple)
            center={false}
            innerRef={[Function]}
          >
            <TouchRipple
              center={false}
              classes={
                Object {
                  "child": "MuiTouchRipple-child-817",
                  "childLeaving": "MuiTouchRipple-childLeaving-818",
                  "childPulsate": "MuiTouchRipple-childPulsate-819",
                  "ripple": "MuiTouchRipple-ripple-814",
                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-816",
                  "rippleVisible": "MuiTouchRipple-rippleVisible-815",
                  "root": "MuiTouchRipple-root-813",
                }
              }
            >
              <TransitionGroup
                childFactory={[Function]}
                className="MuiTouchRipple-root-813"
                component="span"
                enter={true}
                exit={true}
              >
                <span
                  className="MuiTouchRipple-root-813"
                />
              </TransitionGroup>
            </TouchRipple>
          </WithStyles(TouchRipple)>
        </NoSsr>
      </button>
    </ButtonBase>
  </WithStyles(ButtonBase)>
</Button>
`;

exports[`RecurringRunsManager renders a disable button if the run is enabled, clicking the button calls disable API 1`] = `
<Button
  className="root"
  classes={
    Object {
      "colorInherit": "MuiButton-colorInherit-310",
      "contained": "MuiButton-contained-300",
      "containedPrimary": "MuiButton-containedPrimary-301",
      "containedSecondary": "MuiButton-containedSecondary-302",
      "disabled": "MuiButton-disabled-309",
      "extendedFab": "MuiButton-extendedFab-307",
      "fab": "MuiButton-fab-306",
      "flat": "MuiButton-flat-294",
      "flatPrimary": "MuiButton-flatPrimary-295",
      "flatSecondary": "MuiButton-flatSecondary-296",
      "focusVisible": "MuiButton-focusVisible-308",
      "fullWidth": "MuiButton-fullWidth-314",
      "label": "MuiButton-label-290",
      "mini": "MuiButton-mini-311",
      "outlined": "MuiButton-outlined-297",
      "outlinedPrimary": "MuiButton-outlinedPrimary-298",
      "outlinedSecondary": "MuiButton-outlinedSecondary-299",
      "raised": "MuiButton-raised-303",
      "raisedPrimary": "MuiButton-raisedPrimary-304",
      "raisedSecondary": "MuiButton-raisedSecondary-305",
      "root": "MuiButton-root-289",
      "sizeLarge": "MuiButton-sizeLarge-313",
      "sizeSmall": "MuiButton-sizeSmall-312",
      "text": "MuiButton-text-291",
      "textPrimary": "MuiButton-textPrimary-292",
      "textSecondary": "MuiButton-textSecondary-293",
    }
  }
  color="primary"
  component="button"
  disableFocusRipple={false}
  disabled={false}
  fullWidth={false}
  mini={false}
  onClick={[Function]}
  size="medium"
  type="button"
  variant="text"
>
  <WithStyles(ButtonBase)
    className="MuiButton-root-289 MuiButton-text-291 MuiButton-textPrimary-292 MuiButton-flat-294 MuiButton-flatPrimary-295 root"
    component="button"
    disabled={false}
    focusRipple={true}
    focusVisibleClassName="MuiButton-focusVisible-308"
    onClick={[Function]}
    type="button"
  >
    <ButtonBase
      centerRipple={false}
      className="MuiButton-root-289 MuiButton-text-291 MuiButton-textPrimary-292 MuiButton-flat-294 MuiButton-flatPrimary-295 root"
      classes={
        Object {
          "disabled": "MuiButtonBase-disabled-240",
          "focusVisible": "MuiButtonBase-focusVisible-241",
          "root": "MuiButtonBase-root-239",
        }
      }
      component="button"
      disableRipple={false}
      disableTouchRipple={false}
      disabled={false}
      focusRipple={true}
      focusVisibleClassName="MuiButton-focusVisible-308"
      onClick={[Function]}
      tabIndex="0"
      type="button"
    >
      <button
        className="MuiButtonBase-root-239 MuiButton-root-289 MuiButton-text-291 MuiButton-textPrimary-292 MuiButton-flat-294 MuiButton-flatPrimary-295 root"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onContextMenu={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex="0"
        type="button"
      >
        <span
          className="MuiButton-label-290"
        >
          <span>
            Enabled
          </span>
        </span>
        <NoSsr
          defer={false}
          fallback={null}
        >
          <WithStyles(TouchRipple)
            center={false}
            innerRef={[Function]}
          >
            <TouchRipple
              center={false}
              classes={
                Object {
                  "child": "MuiTouchRipple-child-286",
                  "childLeaving": "MuiTouchRipple-childLeaving-287",
                  "childPulsate": "MuiTouchRipple-childPulsate-288",
                  "ripple": "MuiTouchRipple-ripple-283",
                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-285",
                  "rippleVisible": "MuiTouchRipple-rippleVisible-284",
                  "root": "MuiTouchRipple-root-282",
                }
              }
            >
              <TransitionGroup
                childFactory={[Function]}
                className="MuiTouchRipple-root-282"
                component="span"
                enter={true}
                exit={true}
              >
                <span
                  className="MuiTouchRipple-root-282"
                />
              </TransitionGroup>
            </TouchRipple>
          </WithStyles(TouchRipple)>
        </NoSsr>
      </button>
    </ButtonBase>
  </WithStyles(ButtonBase)>
</Button>
`;

exports[`RecurringRunsManager renders an enable button if the run is disabled, clicking the button calls enable API 1`] = `
<Button
  className="root"
  classes={
    Object {
      "colorInherit": "MuiButton-colorInherit-487",
      "contained": "MuiButton-contained-477",
      "containedPrimary": "MuiButton-containedPrimary-478",
      "containedSecondary": "MuiButton-containedSecondary-479",
      "disabled": "MuiButton-disabled-486",
      "extendedFab": "MuiButton-extendedFab-484",
      "fab": "MuiButton-fab-483",
      "flat": "MuiButton-flat-471",
      "flatPrimary": "MuiButton-flatPrimary-472",
      "flatSecondary": "MuiButton-flatSecondary-473",
      "focusVisible": "MuiButton-focusVisible-485",
      "fullWidth": "MuiButton-fullWidth-491",
      "label": "MuiButton-label-467",
      "mini": "MuiButton-mini-488",
      "outlined": "MuiButton-outlined-474",
      "outlinedPrimary": "MuiButton-outlinedPrimary-475",
      "outlinedSecondary": "MuiButton-outlinedSecondary-476",
      "raised": "MuiButton-raised-480",
      "raisedPrimary": "MuiButton-raisedPrimary-481",
      "raisedSecondary": "MuiButton-raisedSecondary-482",
      "root": "MuiButton-root-466",
      "sizeLarge": "MuiButton-sizeLarge-490",
      "sizeSmall": "MuiButton-sizeSmall-489",
      "text": "MuiButton-text-468",
      "textPrimary": "MuiButton-textPrimary-469",
      "textSecondary": "MuiButton-textSecondary-470",
    }
  }
  color="secondary"
  component="button"
  disableFocusRipple={false}
  disabled={false}
  fullWidth={false}
  mini={false}
  onClick={[Function]}
  size="medium"
  type="button"
  variant="text"
>
  <WithStyles(ButtonBase)
    className="MuiButton-root-466 MuiButton-text-468 MuiButton-textSecondary-470 MuiButton-flat-471 MuiButton-flatSecondary-473 root"
    component="button"
    disabled={false}
    focusRipple={true}
    focusVisibleClassName="MuiButton-focusVisible-485"
    onClick={[Function]}
    type="button"
  >
    <ButtonBase
      centerRipple={false}
      className="MuiButton-root-466 MuiButton-text-468 MuiButton-textSecondary-470 MuiButton-flat-471 MuiButton-flatSecondary-473 root"
      classes={
        Object {
          "disabled": "MuiButtonBase-disabled-417",
          "focusVisible": "MuiButtonBase-focusVisible-418",
          "root": "MuiButtonBase-root-416",
        }
      }
      component="button"
      disableRipple={false}
      disableTouchRipple={false}
      disabled={false}
      focusRipple={true}
      focusVisibleClassName="MuiButton-focusVisible-485"
      onClick={[Function]}
      tabIndex="0"
      type="button"
    >
      <button
        className="MuiButtonBase-root-416 MuiButton-root-466 MuiButton-text-468 MuiButton-textSecondary-470 MuiButton-flat-471 MuiButton-flatSecondary-473 root"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onContextMenu={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex="0"
        type="button"
      >
        <span
          className="MuiButton-label-467"
        >
          <span>
            Disabled
          </span>
        </span>
        <NoSsr
          defer={false}
          fallback={null}
        >
          <WithStyles(TouchRipple)
            center={false}
            innerRef={[Function]}
          >
            <TouchRipple
              center={false}
              classes={
                Object {
                  "child": "MuiTouchRipple-child-463",
                  "childLeaving": "MuiTouchRipple-childLeaving-464",
                  "childPulsate": "MuiTouchRipple-childPulsate-465",
                  "ripple": "MuiTouchRipple-ripple-460",
                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-462",
                  "rippleVisible": "MuiTouchRipple-rippleVisible-461",
                  "root": "MuiTouchRipple-root-459",
                }
              }
            >
              <TransitionGroup
                childFactory={[Function]}
                className="MuiTouchRipple-root-459"
                component="span"
                enter={true}
                exit={true}
              >
                <span
                  className="MuiTouchRipple-root-459"
                />
              </TransitionGroup>
            </TouchRipple>
          </WithStyles(TouchRipple)>
        </NoSsr>
      </button>
    </ButtonBase>
  </WithStyles(ButtonBase)>
</Button>
`;

exports[`RecurringRunsManager renders an enable button if the run's enabled field is undefined, clicking the button calls enable API 1`] = `
<Button
  className="root"
  classes={
    Object {
      "colorInherit": "MuiButton-colorInherit-664",
      "contained": "MuiButton-contained-654",
      "containedPrimary": "MuiButton-containedPrimary-655",
      "containedSecondary": "MuiButton-containedSecondary-656",
      "disabled": "MuiButton-disabled-663",
      "extendedFab": "MuiButton-extendedFab-661",
      "fab": "MuiButton-fab-660",
      "flat": "MuiButton-flat-648",
      "flatPrimary": "MuiButton-flatPrimary-649",
      "flatSecondary": "MuiButton-flatSecondary-650",
      "focusVisible": "MuiButton-focusVisible-662",
      "fullWidth": "MuiButton-fullWidth-668",
      "label": "MuiButton-label-644",
      "mini": "MuiButton-mini-665",
      "outlined": "MuiButton-outlined-651",
      "outlinedPrimary": "MuiButton-outlinedPrimary-652",
      "outlinedSecondary": "MuiButton-outlinedSecondary-653",
      "raised": "MuiButton-raised-657",
      "raisedPrimary": "MuiButton-raisedPrimary-658",
      "raisedSecondary": "MuiButton-raisedSecondary-659",
      "root": "MuiButton-root-643",
      "sizeLarge": "MuiButton-sizeLarge-667",
      "sizeSmall": "MuiButton-sizeSmall-666",
      "text": "MuiButton-text-645",
      "textPrimary": "MuiButton-textPrimary-646",
      "textSecondary": "MuiButton-textSecondary-647",
    }
  }
  color="secondary"
  component="button"
  disableFocusRipple={false}
  disabled={false}
  fullWidth={false}
  mini={false}
  onClick={[Function]}
  size="medium"
  type="button"
  variant="text"
>
  <WithStyles(ButtonBase)
    className="MuiButton-root-643 MuiButton-text-645 MuiButton-textSecondary-647 MuiButton-flat-648 MuiButton-flatSecondary-650 root"
    component="button"
    disabled={false}
    focusRipple={true}
    focusVisibleClassName="MuiButton-focusVisible-662"
    onClick={[Function]}
    type="button"
  >
    <ButtonBase
      centerRipple={false}
      className="MuiButton-root-643 MuiButton-text-645 MuiButton-textSecondary-647 MuiButton-flat-648 MuiButton-flatSecondary-650 root"
      classes={
        Object {
          "disabled": "MuiButtonBase-disabled-594",
          "focusVisible": "MuiButtonBase-focusVisible-595",
          "root": "MuiButtonBase-root-593",
        }
      }
      component="button"
      disableRipple={false}
      disableTouchRipple={false}
      disabled={false}
      focusRipple={true}
      focusVisibleClassName="MuiButton-focusVisible-662"
      onClick={[Function]}
      tabIndex="0"
      type="button"
    >
      <button
        className="MuiButtonBase-root-593 MuiButton-root-643 MuiButton-text-645 MuiButton-textSecondary-647 MuiButton-flat-648 MuiButton-flatSecondary-650 root"
        disabled={false}
        onBlur={[Function]}
        onClick={[Function]}
        onContextMenu={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex="0"
        type="button"
      >
        <span
          className="MuiButton-label-644"
        >
          <span>
            Disabled
          </span>
        </span>
        <NoSsr
          defer={false}
          fallback={null}
        >
          <WithStyles(TouchRipple)
            center={false}
            innerRef={[Function]}
          >
            <TouchRipple
              center={false}
              classes={
                Object {
                  "child": "MuiTouchRipple-child-640",
                  "childLeaving": "MuiTouchRipple-childLeaving-641",
                  "childPulsate": "MuiTouchRipple-childPulsate-642",
                  "ripple": "MuiTouchRipple-ripple-637",
                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-639",
                  "rippleVisible": "MuiTouchRipple-rippleVisible-638",
                  "root": "MuiTouchRipple-root-636",
                }
              }
            >
              <TransitionGroup
                childFactory={[Function]}
                className="MuiTouchRipple-root-636"
                component="span"
                enter={true}
                exit={true}
              >
                <span
                  className="MuiTouchRipple-root-636"
                />
              </TransitionGroup>
            </TouchRipple>
          </WithStyles(TouchRipple)>
        </NoSsr>
      </button>
    </ButtonBase>
  </WithStyles(ButtonBase)>
</Button>
`;

exports[`RecurringRunsManager renders run name as link to its details page 1`] = `
<Link
  className="link"
  replace={false}
  to="/recurringrun/details/run-id"
>
  test-run
</Link>
`;
