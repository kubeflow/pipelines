// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExperimentDetails fetches this experiment's recurring runs 1`] = `
<div
  className="page"
>
  <div
    className="page"
  >
    <div
      className="cardRow"
    >
      <WithStyles(Paper)
        className="card recurringRunsCard cardActive"
        elevation={0}
        id="recurringRunsCard"
      >
        <div>
          <div
            className="cardTitle"
          >
            Recurring run configs
          </div>
          <div
            className="cardContent recurringRunsActive"
          >
            1 active
          </div>
          <WithStyles(Button)
            className="cardBtn"
            disableRipple={true}
            id="manageExperimentRecurringRunsBtn"
            onClick={[Function]}
          >
            Manage
          </WithStyles(Button)>
        </div>
      </WithStyles(Paper)>
      <WithStyles(Paper)
        className="card runStatsCard"
        elevation={0}
        id="experimentDescriptionCard"
      >
        <div
          className="cardTitle"
        >
          <span>
            Experiment description
          </span>
          <WithStyles(Button)
            className="popOutIcon popOutButton"
            id="expandExperimentDescriptionBtn"
            onClick={[Function]}
          >
            <WithStyles(Tooltip)
              title="Read more"
            >
              <pure(LaunchIcon)
                style={
                  Object {
                    "fontSize": 18,
                  }
                }
              />
            </WithStyles(Tooltip)>
          </WithStyles(Button)>
        </div>
        <div
          key="0"
          style={
            Object {
              "overflow": "hidden",
              "textOverflow": "ellipsis",
              "whiteSpace": "nowrap",
            }
          }
        >
          mock experiment description
        </div>
      </WithStyles(Paper)>
    </div>
    <Toolbar
      actions={
        Object {
          "archive": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select at least one resource to archive",
            "id": "archiveBtn",
            "title": "Archive",
            "tooltip": "Archive",
          },
          "cloneRun": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select a run to clone",
            "id": "cloneBtn",
            "style": Object {
              "minWidth": 100,
            },
            "title": "Clone run",
            "tooltip": "Create a copy from this runs initial state",
          },
          "compare": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select multiple runs to compare",
            "id": "compareBtn",
            "style": Object {
              "minWidth": 125,
            },
            "title": "Compare runs",
            "tooltip": "Compare up to 10 selected runs",
          },
          "newRecurringRun": Object {
            "action": [Function],
            "icon": [Function],
            "id": "createNewRecurringRunBtn",
            "outlined": true,
            "style": Object {
              "minWidth": 195,
            },
            "title": "Create recurring run",
            "tooltip": "Create a new recurring run",
          },
          "newRun": Object {
            "action": [Function],
            "icon": [Function],
            "id": "createNewRunBtn",
            "outlined": true,
            "primary": true,
            "style": Object {
              "minWidth": 130,
            },
            "title": "Create run",
            "tooltip": "Create a new run",
          },
        }
      }
      breadcrumbs={Array []}
      pageTitle="Runs"
      topLevelToolbar={false}
    />
    <RunList
      experimentIdMask="some-mock-experiment-id"
      hideExperimentColumn={true}
      history={
        Object {
          "push": [MockFunction],
        }
      }
      location={Object {}}
      match={
        Object {
          "params": Object {
            "eid": "some-mock-experiment-id",
          },
        }
      }
      onError={[Function]}
      onSelectionChange={[Function]}
      selectedIds={Array []}
      storageState="STORAGESTATE_AVAILABLE"
      toolbarProps={
        Object {
          "actions": Object {
            "refresh": Object {
              "action": [Function],
              "id": "refreshBtn",
              "title": "Refresh",
              "tooltip": "Refresh the list",
            },
          },
          "breadcrumbs": Array [
            Object {
              "displayName": "Experiments",
              "href": "/experiments",
            },
          ],
          "pageTitle": "some-mock-experiment-id",
        }
      }
      updateBanner={[MockFunction]}
      updateDialog={[MockFunction]}
      updateSnackbar={[MockFunction]}
      updateToolbar={[MockFunction]}
    />
    <WithStyles(Dialog)
      classes={
        Object {
          "paper": "recurringRunsDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <RecurringRunsManager
          experimentId="some-mock-experiment-id"
          history={
            Object {
              "push": [MockFunction],
            }
          }
          location={Object {}}
          match={
            Object {
              "params": Object {
                "eid": "some-mock-experiment-id",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {
                "refresh": Object {
                  "action": [Function],
                  "id": "refreshBtn",
                  "title": "Refresh",
                  "tooltip": "Refresh the list",
                },
              },
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "some-mock-experiment-id",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="closeExperimentRecurringRunManagerBtn"
          onClick={[Function]}
        >
          Close
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
  </div>
</div>
`;

exports[`ExperimentDetails removes all description text after second newline and replaces with an ellipsis 1`] = `
<div
  className="page"
>
  <div
    className="page"
  >
    <div
      className="cardRow"
    >
      <WithStyles(Paper)
        className="card recurringRunsCard"
        elevation={0}
        id="recurringRunsCard"
      >
        <div>
          <div
            className="cardTitle"
          >
            Recurring run configs
          </div>
          <div
            className="cardContent"
          >
            0 active
          </div>
          <WithStyles(Button)
            className="cardBtn"
            disableRipple={true}
            id="manageExperimentRecurringRunsBtn"
            onClick={[Function]}
          >
            Manage
          </WithStyles(Button)>
        </div>
      </WithStyles(Paper)>
      <WithStyles(Paper)
        className="card runStatsCard"
        elevation={0}
        id="experimentDescriptionCard"
      >
        <div
          className="cardTitle"
        >
          <span>
            Experiment description
          </span>
          <WithStyles(Button)
            className="popOutIcon popOutButton"
            id="expandExperimentDescriptionBtn"
            onClick={[Function]}
          >
            <WithStyles(Tooltip)
              title="Read more"
            >
              <pure(LaunchIcon)
                style={
                  Object {
                    "fontSize": 18,
                  }
                }
              />
            </WithStyles(Tooltip)>
          </WithStyles(Button)>
        </div>
        <div
          key="0"
          style={
            Object {
              "overflow": "hidden",
              "textOverflow": "ellipsis",
              "whiteSpace": "nowrap",
            }
          }
        >
          Line 1
        </div>
        <div
          key="1"
          style={
            Object {
              "overflow": "hidden",
              "textOverflow": "ellipsis",
              "whiteSpace": "nowrap",
            }
          }
        >
          Line 2
        </div>
        ...
      </WithStyles(Paper)>
    </div>
    <Toolbar
      actions={
        Object {
          "archive": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select at least one resource to archive",
            "id": "archiveBtn",
            "title": "Archive",
            "tooltip": "Archive",
          },
          "cloneRun": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select a run to clone",
            "id": "cloneBtn",
            "style": Object {
              "minWidth": 100,
            },
            "title": "Clone run",
            "tooltip": "Create a copy from this runs initial state",
          },
          "compare": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select multiple runs to compare",
            "id": "compareBtn",
            "style": Object {
              "minWidth": 125,
            },
            "title": "Compare runs",
            "tooltip": "Compare up to 10 selected runs",
          },
          "newRecurringRun": Object {
            "action": [Function],
            "icon": [Function],
            "id": "createNewRecurringRunBtn",
            "outlined": true,
            "style": Object {
              "minWidth": 195,
            },
            "title": "Create recurring run",
            "tooltip": "Create a new recurring run",
          },
          "newRun": Object {
            "action": [Function],
            "icon": [Function],
            "id": "createNewRunBtn",
            "outlined": true,
            "primary": true,
            "style": Object {
              "minWidth": 130,
            },
            "title": "Create run",
            "tooltip": "Create a new run",
          },
        }
      }
      breadcrumbs={Array []}
      pageTitle="Runs"
      topLevelToolbar={false}
    />
    <RunList
      experimentIdMask="some-mock-experiment-id"
      hideExperimentColumn={true}
      history={
        Object {
          "push": [MockFunction],
        }
      }
      location={Object {}}
      match={
        Object {
          "params": Object {
            "eid": "some-mock-experiment-id",
          },
        }
      }
      onError={[Function]}
      onSelectionChange={[Function]}
      selectedIds={Array []}
      storageState="STORAGESTATE_AVAILABLE"
      toolbarProps={
        Object {
          "actions": Object {
            "refresh": Object {
              "action": [Function],
              "id": "refreshBtn",
              "title": "Refresh",
              "tooltip": "Refresh the list",
            },
          },
          "breadcrumbs": Array [
            Object {
              "displayName": "Experiments",
              "href": "/experiments",
            },
          ],
          "pageTitle": "some-mock-experiment-id",
        }
      }
      updateBanner={[MockFunction]}
      updateDialog={[MockFunction]}
      updateSnackbar={[MockFunction]}
      updateToolbar={[MockFunction]}
    />
    <WithStyles(Dialog)
      classes={
        Object {
          "paper": "recurringRunsDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <RecurringRunsManager
          experimentId="some-mock-experiment-id"
          history={
            Object {
              "push": [MockFunction],
            }
          }
          location={Object {}}
          match={
            Object {
              "params": Object {
                "eid": "some-mock-experiment-id",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {
                "refresh": Object {
                  "action": [Function],
                  "id": "refreshBtn",
                  "title": "Refresh",
                  "tooltip": "Refresh the list",
                },
              },
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "some-mock-experiment-id",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="closeExperimentRecurringRunManagerBtn"
          onClick={[Function]}
        >
          Close
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
  </div>
</div>
`;

exports[`ExperimentDetails renders a page with no runs or recurring runs 1`] = `
<div
  className="page"
>
  <div
    className="page"
  >
    <div
      className="cardRow"
    >
      <WithStyles(Paper)
        className="card recurringRunsCard"
        elevation={0}
        id="recurringRunsCard"
      >
        <div>
          <div
            className="cardTitle"
          >
            Recurring run configs
          </div>
          <div
            className="cardContent"
          >
            0 active
          </div>
          <WithStyles(Button)
            className="cardBtn"
            disableRipple={true}
            id="manageExperimentRecurringRunsBtn"
            onClick={[Function]}
          >
            Manage
          </WithStyles(Button)>
        </div>
      </WithStyles(Paper)>
      <WithStyles(Paper)
        className="card runStatsCard"
        elevation={0}
        id="experimentDescriptionCard"
      >
        <div
          className="cardTitle"
        >
          <span>
            Experiment description
          </span>
          <WithStyles(Button)
            className="popOutIcon popOutButton"
            id="expandExperimentDescriptionBtn"
            onClick={[Function]}
          >
            <WithStyles(Tooltip)
              title="Read more"
            >
              <pure(LaunchIcon)
                style={
                  Object {
                    "fontSize": 18,
                  }
                }
              />
            </WithStyles(Tooltip)>
          </WithStyles(Button)>
        </div>
        <div
          key="0"
          style={
            Object {
              "overflow": "hidden",
              "textOverflow": "ellipsis",
              "whiteSpace": "nowrap",
            }
          }
        >
          mock experiment description
        </div>
      </WithStyles(Paper)>
    </div>
    <Toolbar
      actions={
        Object {
          "archive": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select at least one resource to archive",
            "id": "archiveBtn",
            "title": "Archive",
            "tooltip": "Archive",
          },
          "cloneRun": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select a run to clone",
            "id": "cloneBtn",
            "style": Object {
              "minWidth": 100,
            },
            "title": "Clone run",
            "tooltip": "Create a copy from this runs initial state",
          },
          "compare": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select multiple runs to compare",
            "id": "compareBtn",
            "style": Object {
              "minWidth": 125,
            },
            "title": "Compare runs",
            "tooltip": "Compare up to 10 selected runs",
          },
          "newRecurringRun": Object {
            "action": [Function],
            "icon": [Function],
            "id": "createNewRecurringRunBtn",
            "outlined": true,
            "style": Object {
              "minWidth": 195,
            },
            "title": "Create recurring run",
            "tooltip": "Create a new recurring run",
          },
          "newRun": Object {
            "action": [Function],
            "icon": [Function],
            "id": "createNewRunBtn",
            "outlined": true,
            "primary": true,
            "style": Object {
              "minWidth": 130,
            },
            "title": "Create run",
            "tooltip": "Create a new run",
          },
        }
      }
      breadcrumbs={Array []}
      pageTitle="Runs"
      topLevelToolbar={false}
    />
    <RunList
      experimentIdMask="some-mock-experiment-id"
      hideExperimentColumn={true}
      history={
        Object {
          "push": [MockFunction],
        }
      }
      location={Object {}}
      match={
        Object {
          "params": Object {
            "eid": "some-mock-experiment-id",
          },
        }
      }
      onError={[Function]}
      onSelectionChange={[Function]}
      selectedIds={Array []}
      storageState="STORAGESTATE_AVAILABLE"
      toolbarProps={
        Object {
          "actions": Object {
            "refresh": Object {
              "action": [Function],
              "id": "refreshBtn",
              "title": "Refresh",
              "tooltip": "Refresh the list",
            },
          },
          "breadcrumbs": Array [
            Object {
              "displayName": "Experiments",
              "href": "/experiments",
            },
          ],
          "pageTitle": "some-mock-experiment-id",
        }
      }
      updateBanner={[MockFunction]}
      updateDialog={[MockFunction]}
      updateSnackbar={[MockFunction]}
      updateToolbar={[MockFunction]}
    />
    <WithStyles(Dialog)
      classes={
        Object {
          "paper": "recurringRunsDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <RecurringRunsManager
          experimentId="some-mock-experiment-id"
          history={
            Object {
              "push": [MockFunction],
            }
          }
          location={Object {}}
          match={
            Object {
              "params": Object {
                "eid": "some-mock-experiment-id",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {
                "refresh": Object {
                  "action": [Function],
                  "id": "refreshBtn",
                  "title": "Refresh",
                  "tooltip": "Refresh the list",
                },
              },
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "some-mock-experiment-id",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="closeExperimentRecurringRunManagerBtn"
          onClick={[Function]}
        >
          Close
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
  </div>
</div>
`;

exports[`ExperimentDetails uses an empty string if the experiment has no description 1`] = `
<div
  className="page"
>
  <div
    className="page"
  >
    <div
      className="cardRow"
    >
      <WithStyles(Paper)
        className="card recurringRunsCard"
        elevation={0}
        id="recurringRunsCard"
      >
        <div>
          <div
            className="cardTitle"
          >
            Recurring run configs
          </div>
          <div
            className="cardContent"
          >
            0 active
          </div>
          <WithStyles(Button)
            className="cardBtn"
            disableRipple={true}
            id="manageExperimentRecurringRunsBtn"
            onClick={[Function]}
          >
            Manage
          </WithStyles(Button)>
        </div>
      </WithStyles(Paper)>
      <WithStyles(Paper)
        className="card runStatsCard"
        elevation={0}
        id="experimentDescriptionCard"
      >
        <div
          className="cardTitle"
        >
          <span>
            Experiment description
          </span>
          <WithStyles(Button)
            className="popOutIcon popOutButton"
            id="expandExperimentDescriptionBtn"
            onClick={[Function]}
          >
            <WithStyles(Tooltip)
              title="Read more"
            >
              <pure(LaunchIcon)
                style={
                  Object {
                    "fontSize": 18,
                  }
                }
              />
            </WithStyles(Tooltip)>
          </WithStyles(Button)>
        </div>
        <div
          key="0"
          style={
            Object {
              "overflow": "hidden",
              "textOverflow": "ellipsis",
              "whiteSpace": "nowrap",
            }
          }
        />
      </WithStyles(Paper)>
    </div>
    <Toolbar
      actions={
        Object {
          "archive": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select at least one resource to archive",
            "id": "archiveBtn",
            "title": "Archive",
            "tooltip": "Archive",
          },
          "cloneRun": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select a run to clone",
            "id": "cloneBtn",
            "style": Object {
              "minWidth": 100,
            },
            "title": "Clone run",
            "tooltip": "Create a copy from this runs initial state",
          },
          "compare": Object {
            "action": [Function],
            "disabled": true,
            "disabledTitle": "Select multiple runs to compare",
            "id": "compareBtn",
            "style": Object {
              "minWidth": 125,
            },
            "title": "Compare runs",
            "tooltip": "Compare up to 10 selected runs",
          },
          "newRecurringRun": Object {
            "action": [Function],
            "icon": [Function],
            "id": "createNewRecurringRunBtn",
            "outlined": true,
            "style": Object {
              "minWidth": 195,
            },
            "title": "Create recurring run",
            "tooltip": "Create a new recurring run",
          },
          "newRun": Object {
            "action": [Function],
            "icon": [Function],
            "id": "createNewRunBtn",
            "outlined": true,
            "primary": true,
            "style": Object {
              "minWidth": 130,
            },
            "title": "Create run",
            "tooltip": "Create a new run",
          },
        }
      }
      breadcrumbs={Array []}
      pageTitle="Runs"
      topLevelToolbar={false}
    />
    <RunList
      experimentIdMask="some-mock-experiment-id"
      hideExperimentColumn={true}
      history={
        Object {
          "push": [MockFunction],
        }
      }
      location={Object {}}
      match={
        Object {
          "params": Object {
            "eid": "some-mock-experiment-id",
          },
        }
      }
      onError={[Function]}
      onSelectionChange={[Function]}
      selectedIds={Array []}
      storageState="STORAGESTATE_AVAILABLE"
      toolbarProps={
        Object {
          "actions": Object {
            "refresh": Object {
              "action": [Function],
              "id": "refreshBtn",
              "title": "Refresh",
              "tooltip": "Refresh the list",
            },
          },
          "breadcrumbs": Array [
            Object {
              "displayName": "Experiments",
              "href": "/experiments",
            },
          ],
          "pageTitle": "some-mock-experiment-id",
        }
      }
      updateBanner={[MockFunction]}
      updateDialog={[MockFunction]}
      updateSnackbar={[MockFunction]}
      updateToolbar={[MockFunction]}
    />
    <WithStyles(Dialog)
      classes={
        Object {
          "paper": "recurringRunsDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <RecurringRunsManager
          experimentId="some-mock-experiment-id"
          history={
            Object {
              "push": [MockFunction],
            }
          }
          location={Object {}}
          match={
            Object {
              "params": Object {
                "eid": "some-mock-experiment-id",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {
                "refresh": Object {
                  "action": [Function],
                  "id": "refreshBtn",
                  "title": "Refresh",
                  "tooltip": "Refresh the list",
                },
              },
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "some-mock-experiment-id",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="closeExperimentRecurringRunManagerBtn"
          onClick={[Function]}
        >
          Close
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
  </div>
</div>
`;
