// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package component

import (
	"encoding/json"

	pb "github.com/kubeflow/pipelines/v2/third_party/ml_metadata"
)

type inputParameter struct {
	ParameterType  string
	ParameterValue string
}

type inputArtifact struct {
	// Where to read MLMD artifact. File is passed using Argo artifacts.
	// TODO(neuromage): Rename this to MetadataInputPath.
	FileInputPath string

	// The MLMD artifact.
	Artifact *pb.Artifact `json:"-"`

	// Generated by launcher.
	// /tmp/launcher_component_inputs/<name>/data
	// TODO(neuromage): Rename this to PayloadPath
	LocalArtifactFilePath string `json:"-"`
}

type outputParameter struct {
	// ParameterType should be one of "INT", "STRING" or "DOUBLE".
	ParameterType  string
	FileOutputPath string
}

type outputArtifact struct {
	// TODO(neuromage): Rename this to just Schema.
	ArtifactSchema string
	// Where to write MLMD artifact.
	// TODO(neuromage): Rename this to MetadataOutputPath.
	FileOutputPath string

	// Generated by launcher. E.g.
	// /tmp/launcher_component_outputs/<name>/data
	// TODO(neuromage): Rename this to PayloadPath.
	LocalArtifactFilePath string `json:"-"`
	// Final location of file. E.g.
	// <pipeline_root>/<pipelineName>/<pipelineRunID>/<pipelineTaskID>/data
	// TODO(neuromage): Rename this to PayloadURI.
	URIOutputPath string `json:"-"`
}

// runtimeInfo represents JSON object present in all ML components compiled
// under the V2-compatible flag in KFP.
type runtimeInfo struct {
	InputParameters  map[string]*inputParameter
	InputArtifacts   map[string]*inputArtifact
	OutputParameters map[string]*outputParameter
	OutputArtifacts  map[string]*outputArtifact
}

func parseRuntimeInfo(jsonEncoded string) (*runtimeInfo, error) {
	r := &runtimeInfo{
		InputParameters:  make(map[string]*inputParameter),
		InputArtifacts:   make(map[string]*inputArtifact),
		OutputParameters: make(map[string]*outputParameter),
		OutputArtifacts:  make(map[string]*outputArtifact),
	}

	if err := json.Unmarshal([]byte(jsonEncoded), r); err != nil {
		return nil, err
	}

	return r, nil
}
