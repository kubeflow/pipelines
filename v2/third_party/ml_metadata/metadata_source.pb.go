// Copyright 2019 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// The returned results from a MetadataSource.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: metadata_source.proto

package ml_metadata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Contains supported metadata sources types in MetadataAccessObject.
type MetadataSourceType int32

const (
	MetadataSourceType_UNKNOWN_METADATA_SOURCE MetadataSourceType = 0
	// a fake in memory metadata_source for testing
	// DEPRECATED -- use SQLITE_METADATA_SOURCE instead.
	MetadataSourceType_FAKE_METADATA_SOURCE MetadataSourceType = 1
	// a MYSQL metadata source.
	MetadataSourceType_MYSQL_METADATA_SOURCE MetadataSourceType = 2
	// A Sqlite metadata source.
	MetadataSourceType_SQLITE_METADATA_SOURCE MetadataSourceType = 3
)

// Enum value maps for MetadataSourceType.
var (
	MetadataSourceType_name = map[int32]string{
		0: "UNKNOWN_METADATA_SOURCE",
		1: "FAKE_METADATA_SOURCE",
		2: "MYSQL_METADATA_SOURCE",
		3: "SQLITE_METADATA_SOURCE",
	}
	MetadataSourceType_value = map[string]int32{
		"UNKNOWN_METADATA_SOURCE": 0,
		"FAKE_METADATA_SOURCE":    1,
		"MYSQL_METADATA_SOURCE":   2,
		"SQLITE_METADATA_SOURCE":  3,
	}
)

func (x MetadataSourceType) Enum() *MetadataSourceType {
	p := new(MetadataSourceType)
	*p = x
	return p
}

func (x MetadataSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_source_proto_enumTypes[0].Descriptor()
}

func (MetadataSourceType) Type() protoreflect.EnumType {
	return &file_metadata_source_proto_enumTypes[0]
}

func (x MetadataSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataSourceType.Descriptor instead.
func (MetadataSourceType) EnumDescriptor() ([]byte, []int) {
	return file_metadata_source_proto_rawDescGZIP(), []int{0}
}

// A collection of returned records.
type RecordSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index-aligned column names for all records
	ColumnNames []string `protobuf:"bytes,1,rep,name=column_names,json=columnNames,proto3" json:"column_names,omitempty"`
	// a list of records returned by a query
	Records []*RecordSet_Record `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *RecordSet) Reset() {
	*x = RecordSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSet) ProtoMessage() {}

func (x *RecordSet) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSet.ProtoReflect.Descriptor instead.
func (*RecordSet) Descriptor() ([]byte, []int) {
	return file_metadata_source_proto_rawDescGZIP(), []int{0}
}

func (x *RecordSet) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *RecordSet) GetRecords() []*RecordSet_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

// A config includes a set of SQL queries and the type of metadata source.
// It is used by MetadataAccessObject to init backend and issue queries.
// Next ID: 111
type MetadataSourceQueryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the type of the metadata source
	MetadataSourceType MetadataSourceType `protobuf:"varint,1,opt,name=metadata_source_type,json=metadataSourceType,proto3,enum=ml_metadata.MetadataSourceType" json:"metadata_source_type,omitempty"`
	// Drops the Type table.
	DropTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,3,opt,name=drop_type_table,json=dropTypeTable,proto3" json:"drop_type_table,omitempty"`
	// Creates the Type table.
	CreateTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,4,opt,name=create_type_table,json=createTypeTable,proto3" json:"create_type_table,omitempty"`
	// Checks the existence of the Type table.
	CheckTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,44,opt,name=check_type_table,json=checkTypeTable,proto3" json:"check_type_table,omitempty"`
	// Inserts an artifact type into the Type table. It has 1 parameter.
	// $0 is the type name
	InsertArtifactType *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,54,opt,name=insert_artifact_type,json=insertArtifactType,proto3" json:"insert_artifact_type,omitempty"`
	// Inserts an execution type into the Type table. It has 3 parameters.
	// $0 is the type name
	// $1 is the input_type serialized as JSON or null.
	// $2 is the output_type serialized as JSON or null.
	InsertExecutionType *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,55,opt,name=insert_execution_type,json=insertExecutionType,proto3" json:"insert_execution_type,omitempty"`
	// Inserts a context type into the Type table. It has 1 parameter.
	// $0 is the type name
	InsertContextType *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,58,opt,name=insert_context_type,json=insertContextType,proto3" json:"insert_context_type,omitempty"`
	// Queries a type by its type id. It has 2 parameter.
	// $0 is the type id
	// $1 is the is_artifact_type
	SelectTypeById *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,6,opt,name=select_type_by_id,json=selectTypeById,proto3" json:"select_type_by_id,omitempty"`
	// Queries a type by its type name. It has 2 parameter.
	// $0 is the type name
	// $1 is the is_artifact_type
	SelectTypeByName *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,20,opt,name=select_type_by_name,json=selectTypeByName,proto3" json:"select_type_by_name,omitempty"`
	// Queries for all type instances. It has 1 parameter.
	// $0 is the is_artifact_type
	SelectAllTypes *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,57,opt,name=select_all_types,json=selectAllTypes,proto3" json:"select_all_types,omitempty"`
	// Drops the ParentType table.
	DropParentTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,99,opt,name=drop_parent_type_table,json=dropParentTypeTable,proto3" json:"drop_parent_type_table,omitempty"`
	// Creates the ParentType table.
	CreateParentTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,100,opt,name=create_parent_type_table,json=createParentTypeTable,proto3" json:"create_parent_type_table,omitempty"`
	// Checks the existence of the ParentType table.
	CheckParentTypeTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,101,opt,name=check_parent_type_table,json=checkParentTypeTable,proto3" json:"check_parent_type_table,omitempty"`
	// Inserts a parent type into the ParentType table. It has 2 parameters:
	// $0 is the type_id
	// $1 is the parent_type_id
	InsertParentType *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,109,opt,name=insert_parent_type,json=insertParentType,proto3" json:"insert_parent_type,omitempty"`
	// Queries parent types from the ParentType table by type_id.
	// It has 1 parameter.
	// $0 is the type_id
	SelectParentTypeByTypeId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,110,opt,name=select_parent_type_by_type_id,json=selectParentTypeByTypeId,proto3" json:"select_parent_type_by_type_id,omitempty"`
	// Drops the TypeProperty table.
	DropTypePropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,7,opt,name=drop_type_property_table,json=dropTypePropertyTable,proto3" json:"drop_type_property_table,omitempty"`
	// Creates the TypeProperty table.
	CreateTypePropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,8,opt,name=create_type_property_table,json=createTypePropertyTable,proto3" json:"create_type_property_table,omitempty"`
	// Checks the existence of the TypeProperty table.
	CheckTypePropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,45,opt,name=check_type_property_table,json=checkTypePropertyTable,proto3" json:"check_type_property_table,omitempty"`
	// Inserts a property of a type into the TypeProperty table. It has 3
	// parameters.
	// $0 is the type_id
	// $1 is the name of the property
	// $2 is the data_type of the property
	InsertTypeProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,9,opt,name=insert_type_property,json=insertTypeProperty,proto3" json:"insert_type_property,omitempty"`
	// Queries properties of a type from the TypeProperty table by the type_id
	// Returns a list of properties (name, data_type). It has 1 parameter.
	// $0 is the type_id
	SelectPropertyByTypeId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,10,opt,name=select_property_by_type_id,json=selectPropertyByTypeId,proto3" json:"select_property_by_type_id,omitempty"`
	// Queries the last inserted id.
	SelectLastInsertId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,11,opt,name=select_last_insert_id,json=selectLastInsertId,proto3" json:"select_last_insert_id,omitempty"`
	// Drops the Artifact table.
	DropArtifactTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,12,opt,name=drop_artifact_table,json=dropArtifactTable,proto3" json:"drop_artifact_table,omitempty"`
	// Creates the Artifact table.
	CreateArtifactTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,13,opt,name=create_artifact_table,json=createArtifactTable,proto3" json:"create_artifact_table,omitempty"`
	// Checks the existence of the Artifact table.
	CheckArtifactTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,46,opt,name=check_artifact_table,json=checkArtifactTable,proto3" json:"check_artifact_table,omitempty"`
	// Inserts an artifact into the Artifact table. It has 5 parameters.
	// $0 is the type_id
	// $1 is the uri of the Artifact
	// $2 is the name of the Artifact
	// $3 is the create_time_since_epoch of the Artifact
	// $4 is the last_update_time_since_epoch of the Artifact
	InsertArtifact *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,14,opt,name=insert_artifact,json=insertArtifact,proto3" json:"insert_artifact,omitempty"`
	// Queries an artifact from the Artifact table by its id. It has 1 parameter.
	// $0 is the artifact_id
	SelectArtifactById *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,15,opt,name=select_artifact_by_id,json=selectArtifactById,proto3" json:"select_artifact_by_id,omitempty"`
	// Queries an artifact from the Artifact table by its name and type id.
	// It has 2 parameter.
	// $0 is the type_id
	// $1 is the name of the Artifact
	SelectArtifactByTypeIdAndName *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,94,opt,name=select_artifact_by_type_id_and_name,json=selectArtifactByTypeIdAndName,proto3" json:"select_artifact_by_type_id_and_name,omitempty"`
	// Queries an artifact from the Artifact table by its type_id. It has 1
	// parameter.
	// $0 is the artifact_type_id
	SelectArtifactsByTypeId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,52,opt,name=select_artifacts_by_type_id,json=selectArtifactsByTypeId,proto3" json:"select_artifacts_by_type_id,omitempty"`
	// Queries an artifact from the Artifact table by its uri. It has 1 parameter.
	// $0 is the uri
	SelectArtifactsByUri *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,56,opt,name=select_artifacts_by_uri,json=selectArtifactsByUri,proto3" json:"select_artifacts_by_uri,omitempty"`
	// Updates an artifact in the Artifact table. It has 4 parameters.
	// $0 is the existing artifact id
	// $1 is the type_id
	// $2 is the uri of the Artifact
	// $3 is the last_update_time_since_epoch of the Artifact
	UpdateArtifact *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,21,opt,name=update_artifact,json=updateArtifact,proto3" json:"update_artifact,omitempty"`
	// Drops the ArtifactProperty table.
	DropArtifactPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,16,opt,name=drop_artifact_property_table,json=dropArtifactPropertyTable,proto3" json:"drop_artifact_property_table,omitempty"`
	// Creates the ArtifactProperty table.
	CreateArtifactPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,17,opt,name=create_artifact_property_table,json=createArtifactPropertyTable,proto3" json:"create_artifact_property_table,omitempty"`
	// Checks the existence of the ArtifactProperty table.
	CheckArtifactPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,47,opt,name=check_artifact_property_table,json=checkArtifactPropertyTable,proto3" json:"check_artifact_property_table,omitempty"`
	// Insert a property of an artifact from the ArtifactProperty table. It has 5
	// parameters.
	// $0 is the property data type
	// $1 is the artifact_id
	// $2 is the name of the artifact property
	// $3 is the flag to indicate whether it is a custom property
	// $4 is the value of the property
	InsertArtifactProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,18,opt,name=insert_artifact_property,json=insertArtifactProperty,proto3" json:"insert_artifact_property,omitempty"`
	// Queries properties of an artifact from the ArtifactProperty table by the
	// artifact id. It has 1 parameter.
	// $0 is the artifact_id
	SelectArtifactPropertyByArtifactId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,19,opt,name=select_artifact_property_by_artifact_id,json=selectArtifactPropertyByArtifactId,proto3" json:"select_artifact_property_by_artifact_id,omitempty"`
	// Updates a property of an artifact in the ArtifactProperty table. It has 4
	// parameters.
	// $0 is the property data type
	// $1 is the value of the property
	// $2 is the artifact_id
	// $3 is the name of the artifact property
	UpdateArtifactProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,22,opt,name=update_artifact_property,json=updateArtifactProperty,proto3" json:"update_artifact_property,omitempty"`
	// Deletes a property of an artifact. It has 2 parameters.
	// $0 is the artifact_id
	// $1 is the name of the artifact property
	DeleteArtifactProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,23,opt,name=delete_artifact_property,json=deleteArtifactProperty,proto3" json:"delete_artifact_property,omitempty"`
	// Drops the Execution table.
	DropExecutionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,24,opt,name=drop_execution_table,json=dropExecutionTable,proto3" json:"drop_execution_table,omitempty"`
	// Creates the Execution table.
	CreateExecutionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,25,opt,name=create_execution_table,json=createExecutionTable,proto3" json:"create_execution_table,omitempty"`
	// Checks the existence of the Execution table.
	CheckExecutionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,48,opt,name=check_execution_table,json=checkExecutionTable,proto3" json:"check_execution_table,omitempty"`
	// Inserts an execution into the Execution table. It has 4 parameter.
	// $0 is the type_id
	// $1 is the name of the execution
	// $2 is the create_time_since_epoch of the execution
	// $3 is the last_update_time_since_epoch of the execution
	InsertExecution *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,28,opt,name=insert_execution,json=insertExecution,proto3" json:"insert_execution,omitempty"`
	// Queries an execution from the Execution table by its id. It has 1
	// parameter.
	// $0 is the execution_id
	SelectExecutionById *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,29,opt,name=select_execution_by_id,json=selectExecutionById,proto3" json:"select_execution_by_id,omitempty"`
	// Queries an execution from the Execution table by its name and type id.
	// It has 2 parameters.
	// $0 is the type_id
	// $1 is the name
	SelectExecutionByTypeIdAndName *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,95,opt,name=select_execution_by_type_id_and_name,json=selectExecutionByTypeIdAndName,proto3" json:"select_execution_by_type_id_and_name,omitempty"`
	// Queries an execution from the Execution table by its type_id. It has 1
	// parameter.
	// $0 is the execution_type_id
	SelectExecutionsByTypeId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,53,opt,name=select_executions_by_type_id,json=selectExecutionsByTypeId,proto3" json:"select_executions_by_type_id,omitempty"`
	// Updates an execution in the Execution table. It has 3 parameters.
	// $0 is the existing execution id
	// $1 is the type_id
	// $2 is the last_update_time_since_epoch of the execution
	UpdateExecution *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,34,opt,name=update_execution,json=updateExecution,proto3" json:"update_execution,omitempty"`
	// Drops the ExecutionProperty table.
	DropExecutionPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,26,opt,name=drop_execution_property_table,json=dropExecutionPropertyTable,proto3" json:"drop_execution_property_table,omitempty"`
	// Creates the ExecutionProperty table.
	CreateExecutionPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,27,opt,name=create_execution_property_table,json=createExecutionPropertyTable,proto3" json:"create_execution_property_table,omitempty"`
	// Checks the existence of the ExecutionProperty table.
	CheckExecutionPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,49,opt,name=check_execution_property_table,json=checkExecutionPropertyTable,proto3" json:"check_execution_property_table,omitempty"`
	// Insert a property of an execution from the ExecutionProperty table. It has
	// 5 parameters.
	// $0 is the property data type
	// $1 is the execution_id
	// $2 is the name of the execution property
	// $3 is the flag to indicate whether it is a custom property
	// $4 is the value of the property
	InsertExecutionProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,30,opt,name=insert_execution_property,json=insertExecutionProperty,proto3" json:"insert_execution_property,omitempty"`
	// Queries properties of an execution from the ExecutionProperty table by the
	// execution id. It has 1 parameter.
	// $0 is the execution_id
	SelectExecutionPropertyByExecutionId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,31,opt,name=select_execution_property_by_execution_id,json=selectExecutionPropertyByExecutionId,proto3" json:"select_execution_property_by_execution_id,omitempty"`
	// Updates a property of an execution in the ExecutionProperty table. It has 4
	// parameters.
	// $0 is the property data type
	// $1 is the value of the property
	// $2 is the execution_id
	// $3 is the name of the execution property
	UpdateExecutionProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,32,opt,name=update_execution_property,json=updateExecutionProperty,proto3" json:"update_execution_property,omitempty"`
	// Deletes a property of an execution. It has 2 parameters.
	// $0 is the execution_id
	// $1 is the name of the execution property
	DeleteExecutionProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,33,opt,name=delete_execution_property,json=deleteExecutionProperty,proto3" json:"delete_execution_property,omitempty"`
	// Drops the Context table.
	DropContextTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,67,opt,name=drop_context_table,json=dropContextTable,proto3" json:"drop_context_table,omitempty"`
	// Creates the Context table.
	CreateContextTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,68,opt,name=create_context_table,json=createContextTable,proto3" json:"create_context_table,omitempty"`
	// Checks the existence of the Context table.
	CheckContextTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,69,opt,name=check_context_table,json=checkContextTable,proto3" json:"check_context_table,omitempty"`
	// Inserts a context into the Context table. It has 4 parameters.
	// $0 is the type_id
	// $1 is the name of the Context
	// $2 is the create_time_since_epoch of the Context
	// $3 is the last_update_time_since_epoch of the Context
	InsertContext *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,70,opt,name=insert_context,json=insertContext,proto3" json:"insert_context,omitempty"`
	// Queries a context from the Context table by its id. It has 1 parameter.
	// $0 is the context_id
	SelectContextById *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,71,opt,name=select_context_by_id,json=selectContextById,proto3" json:"select_context_by_id,omitempty"`
	// Queries a context from the Context table by its type_id. It has 1
	// parameter.
	// $0 is the context_type_id
	SelectContextsByTypeId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,72,opt,name=select_contexts_by_type_id,json=selectContextsByTypeId,proto3" json:"select_contexts_by_type_id,omitempty"`
	// Queries a context from the Context table by its type_id and name. It has 2
	// parameters.
	// $0 is the context_type_id
	// $1 is the context_name
	SelectContextByTypeIdAndName *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,93,opt,name=select_context_by_type_id_and_name,json=selectContextByTypeIdAndName,proto3" json:"select_context_by_type_id_and_name,omitempty"`
	// Updates a context in the Context table. It has 4 parameters.
	// $0 is the existing context id
	// $1 is the type_id
	// $2 is the name of the Context
	// $3 is the last_update_time_since_epoch of the Context
	UpdateContext *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,73,opt,name=update_context,json=updateContext,proto3" json:"update_context,omitempty"`
	// Drops the ContextProperty table.
	DropContextPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,74,opt,name=drop_context_property_table,json=dropContextPropertyTable,proto3" json:"drop_context_property_table,omitempty"`
	// Creates the ContextProperty table.
	CreateContextPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,75,opt,name=create_context_property_table,json=createContextPropertyTable,proto3" json:"create_context_property_table,omitempty"`
	// Checks the existence of the ContextProperty table.
	CheckContextPropertyTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,76,opt,name=check_context_property_table,json=checkContextPropertyTable,proto3" json:"check_context_property_table,omitempty"`
	// Insert a property of a context from the ContextProperty table. It has 5
	// parameters.
	// $0 is the property data type
	// $1 is the context_id
	// $2 is the name of the context property
	// $3 is the flag to indicate whether it is a custom property
	// $4 is the value of the property
	InsertContextProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,77,opt,name=insert_context_property,json=insertContextProperty,proto3" json:"insert_context_property,omitempty"`
	// Queries properties of a context from the ContextProperty table by the
	// context id. It has 1 parameter.
	// $0 is the context_id
	SelectContextPropertyByContextId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,78,opt,name=select_context_property_by_context_id,json=selectContextPropertyByContextId,proto3" json:"select_context_property_by_context_id,omitempty"`
	// Updates a property of a context in the ContextProperty table. It has 4
	// parameters.
	// $0 is the property data type
	// $1 is the value of the property
	// $2 is the context_id
	// $3 is the name of the context property
	UpdateContextProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,79,opt,name=update_context_property,json=updateContextProperty,proto3" json:"update_context_property,omitempty"`
	// Deletes a property of a context. It has 2 parameters.
	// $0 is the context_id
	// $1 is the name of the context property
	DeleteContextProperty *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,80,opt,name=delete_context_property,json=deleteContextProperty,proto3" json:"delete_context_property,omitempty"`
	// Drops the ParentContext table.
	DropParentContextTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,102,opt,name=drop_parent_context_table,json=dropParentContextTable,proto3" json:"drop_parent_context_table,omitempty"`
	// Creates the ParentContext table.
	CreateParentContextTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,103,opt,name=create_parent_context_table,json=createParentContextTable,proto3" json:"create_parent_context_table,omitempty"`
	// Checks the existence of the ParentContext table.
	CheckParentContextTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,104,opt,name=check_parent_context_table,json=checkParentContextTable,proto3" json:"check_parent_context_table,omitempty"`
	// Inserts a parent context into the ParentContext table. It has 2 parameters:
	// $0 is the context_id
	// $1 is the parent_context_id
	InsertParentContext *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,106,opt,name=insert_parent_context,json=insertParentContext,proto3" json:"insert_parent_context,omitempty"`
	// Queries parent contexts from the ParentContext table by context_id.
	// It has 1 parameter.
	// $0 is the context_id
	SelectParentContextByContextId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,107,opt,name=select_parent_context_by_context_id,json=selectParentContextByContextId,proto3" json:"select_parent_context_by_context_id,omitempty"`
	// Queries parent contexts from the ParentContext table by parent_context_id.
	// It has 1 parameter.
	// $0 is the parent_context_id
	SelectParentContextByParentContextId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,108,opt,name=select_parent_context_by_parent_context_id,json=selectParentContextByParentContextId,proto3" json:"select_parent_context_by_parent_context_id,omitempty"`
	// Drops the Event table.
	DropEventTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,35,opt,name=drop_event_table,json=dropEventTable,proto3" json:"drop_event_table,omitempty"`
	// Creates the Event table.
	CreateEventTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,36,opt,name=create_event_table,json=createEventTable,proto3" json:"create_event_table,omitempty"`
	// Checks the existence of the Event table.
	CheckEventTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,50,opt,name=check_event_table,json=checkEventTable,proto3" json:"check_event_table,omitempty"`
	// Inserts an event into the Event table. It has 4 parameters.
	// $0 is the artifact_id
	// $1 is the execution_id
	// $2 is the event type
	// $3 is the event time
	InsertEvent *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,37,opt,name=insert_event,json=insertEvent,proto3" json:"insert_event,omitempty"`
	// Queries events from the Event table by a collection of artifact ids. It has
	// 1 parameter.
	// $0 is the collection string of artifact ids joined by ", ".
	SelectEventByArtifactIds *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,96,opt,name=select_event_by_artifact_ids,json=selectEventByArtifactIds,proto3" json:"select_event_by_artifact_ids,omitempty"`
	// Queries events from the Event table by a collection of execution ids. It
	// has 1 parameter.
	// $0 is the collection string of execution ids joined by ", ".
	SelectEventByExecutionIds *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,97,opt,name=select_event_by_execution_ids,json=selectEventByExecutionIds,proto3" json:"select_event_by_execution_ids,omitempty"`
	// Drops the EventPath table.
	DropEventPathTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,40,opt,name=drop_event_path_table,json=dropEventPathTable,proto3" json:"drop_event_path_table,omitempty"`
	// Creates the EventPath table.
	CreateEventPathTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,41,opt,name=create_event_path_table,json=createEventPathTable,proto3" json:"create_event_path_table,omitempty"`
	// Checks the existence of the EventPath table.
	CheckEventPathTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,51,opt,name=check_event_path_table,json=checkEventPathTable,proto3" json:"check_event_path_table,omitempty"`
	// Inserts a path into the EventPath table. It has 4 parameters
	// $0 is the event_id
	// $1 is the step value case, either index or key
	// $2 is the is_index_step indicates the step value case
	// $3 is the value of the step
	InsertEventPath *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,42,opt,name=insert_event_path,json=insertEventPath,proto3" json:"insert_event_path,omitempty"`
	// Queries paths from the EventPath table by a collection of event ids. It has
	// 1 parameter.
	// $0 is the collection string of event ids joined by ", ".
	SelectEventPathByEventIds *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,98,opt,name=select_event_path_by_event_ids,json=selectEventPathByEventIds,proto3" json:"select_event_path_by_event_ids,omitempty"`
	// Drops the Association table.
	DropAssociationTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,81,opt,name=drop_association_table,json=dropAssociationTable,proto3" json:"drop_association_table,omitempty"`
	// Creates the Association table.
	CreateAssociationTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,82,opt,name=create_association_table,json=createAssociationTable,proto3" json:"create_association_table,omitempty"`
	// Checks the existence of the Association table.
	CheckAssociationTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,83,opt,name=check_association_table,json=checkAssociationTable,proto3" json:"check_association_table,omitempty"`
	// Inserts an association into the Association table. It has 2 parameters.
	// $0 is the context_id
	// $1 is the execution_id
	InsertAssociation *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,84,opt,name=insert_association,json=insertAssociation,proto3" json:"insert_association,omitempty"`
	// Queries association from the Association table by its context id.
	// It has 1 parameter.
	// $0 is the context_id
	SelectAssociationByContextId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,85,opt,name=select_association_by_context_id,json=selectAssociationByContextId,proto3" json:"select_association_by_context_id,omitempty"`
	// Queries association from the Association table by its execution id.
	// It has 1 parameter.
	// $0 is the execution_id
	SelectAssociationByExecutionId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,86,opt,name=select_association_by_execution_id,json=selectAssociationByExecutionId,proto3" json:"select_association_by_execution_id,omitempty"`
	// Drops the Attribution table.
	DropAttributionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,87,opt,name=drop_attribution_table,json=dropAttributionTable,proto3" json:"drop_attribution_table,omitempty"`
	// Creates the Attribution table.
	CreateAttributionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,88,opt,name=create_attribution_table,json=createAttributionTable,proto3" json:"create_attribution_table,omitempty"`
	// Checks the existence of the Attribution table.
	CheckAttributionTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,89,opt,name=check_attribution_table,json=checkAttributionTable,proto3" json:"check_attribution_table,omitempty"`
	// Inserts an attribution into the Attribution table. It has 2 parameters.
	// $0 is the context_id
	// $1 is the artifact_id
	InsertAttribution *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,90,opt,name=insert_attribution,json=insertAttribution,proto3" json:"insert_attribution,omitempty"`
	// Queries attribution from the Attribution table by its context id.
	// It has 1 parameter.
	// $0 is the context_id
	SelectAttributionByContextId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,91,opt,name=select_attribution_by_context_id,json=selectAttributionByContextId,proto3" json:"select_attribution_by_context_id,omitempty"`
	// Queries attribution from the Attribution table by its artifact id.
	// It has 1 parameter.
	// $0 is the artifact_id
	SelectAttributionByArtifactId *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,92,opt,name=select_attribution_by_artifact_id,json=selectAttributionByArtifactId,proto3" json:"select_attribution_by_artifact_id,omitempty"`
	// Drops the MLMDEnv table.
	DropMlmdEnvTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,60,opt,name=drop_mlmd_env_table,json=dropMlmdEnvTable,proto3" json:"drop_mlmd_env_table,omitempty"`
	// Creates the MLMDEnv table.
	CreateMlmdEnvTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,61,opt,name=create_mlmd_env_table,json=createMlmdEnvTable,proto3" json:"create_mlmd_env_table,omitempty"`
	// The version of the current query config. Increase the version by 1 in any
	// CL that includes physical schema changes and provides a migration function
	// that uses a list migration queries. The database stores it to indicate the
	// current database version. When metadata source creates, it compares the
	// given `schema_version` in query config with the `schema_version` stored in
	// the database, and migrate the database if needed.
	SchemaVersion int64 `protobuf:"varint,59,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	// Checks the MLMDEnv table and query the schema version.
	// At MLMD release v0.13.2, by default it is v0.
	CheckMlmdEnvTable *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,63,opt,name=check_mlmd_env_table,json=checkMlmdEnvTable,proto3" json:"check_mlmd_env_table,omitempty"`
	// Insert schema_version.
	// $0 is the schema_version
	InsertSchemaVersion *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,66,opt,name=insert_schema_version,json=insertSchemaVersion,proto3" json:"insert_schema_version,omitempty"`
	// Update schema_version
	// $0 is the schema_version
	UpdateSchemaVersion *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,64,opt,name=update_schema_version,json=updateSchemaVersion,proto3" json:"update_schema_version,omitempty"`
	// Check the database is a valid database produced by 0.13.2 MLMD release.
	// The schema version and migration are introduced after that release.
	CheckTablesInV0_13_2 *MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,65,opt,name=check_tables_in_v0_13_2,json=checkTablesInV0132,proto3" json:"check_tables_in_v0_13_2,omitempty"`
	// A list of secondary indices to be applied on the current schema. This is
	// intended for indices that cover multiple columns or which cannot be
	// created as part of table DDL statements.
	SecondaryIndices []*MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,105,rep,name=secondary_indices,json=secondaryIndices,proto3" json:"secondary_indices,omitempty"`
	// Each metadata source should provides migration schemes, each of which
	// defines the schema change details for a particular `schema_version` (sv_i).
	// When a migration procedure wants to upgrade to sv_i, it looks for the
	// MigrationScheme with sv_i as map key.
	MigrationSchemes map[int64]*MetadataSourceQueryConfig_MigrationScheme `protobuf:"bytes,62,rep,name=migration_schemes,json=migrationSchemes,proto3" json:"migration_schemes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetadataSourceQueryConfig) Reset() {
	*x = MetadataSourceQueryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_source_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataSourceQueryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSourceQueryConfig) ProtoMessage() {}

func (x *MetadataSourceQueryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_source_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSourceQueryConfig.ProtoReflect.Descriptor instead.
func (*MetadataSourceQueryConfig) Descriptor() ([]byte, []int) {
	return file_metadata_source_proto_rawDescGZIP(), []int{1}
}

func (x *MetadataSourceQueryConfig) GetMetadataSourceType() MetadataSourceType {
	if x != nil {
		return x.MetadataSourceType
	}
	return MetadataSourceType_UNKNOWN_METADATA_SOURCE
}

func (x *MetadataSourceQueryConfig) GetDropTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropTypeTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateTypeTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckTypeTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertArtifactType() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertArtifactType
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertExecutionType() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertExecutionType
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertContextType() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertContextType
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectTypeById() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectTypeById
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectTypeByName() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectTypeByName
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectAllTypes() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectAllTypes
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropParentTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropParentTypeTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateParentTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateParentTypeTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckParentTypeTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckParentTypeTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertParentType() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertParentType
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectParentTypeByTypeId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectParentTypeByTypeId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropTypePropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropTypePropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateTypePropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateTypePropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckTypePropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckTypePropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertTypeProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertTypeProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectPropertyByTypeId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectPropertyByTypeId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectLastInsertId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectLastInsertId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropArtifactTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropArtifactTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateArtifactTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateArtifactTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckArtifactTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckArtifactTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertArtifact() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertArtifact
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectArtifactById() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectArtifactById
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectArtifactByTypeIdAndName() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectArtifactByTypeIdAndName
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectArtifactsByTypeId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectArtifactsByTypeId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectArtifactsByUri() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectArtifactsByUri
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetUpdateArtifact() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.UpdateArtifact
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropArtifactPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropArtifactPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateArtifactPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateArtifactPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckArtifactPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckArtifactPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertArtifactProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertArtifactProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectArtifactPropertyByArtifactId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectArtifactPropertyByArtifactId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetUpdateArtifactProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.UpdateArtifactProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDeleteArtifactProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DeleteArtifactProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropExecutionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropExecutionTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateExecutionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateExecutionTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckExecutionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckExecutionTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertExecution() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertExecution
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectExecutionById() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectExecutionById
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectExecutionByTypeIdAndName() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectExecutionByTypeIdAndName
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectExecutionsByTypeId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectExecutionsByTypeId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetUpdateExecution() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.UpdateExecution
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropExecutionPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropExecutionPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateExecutionPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateExecutionPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckExecutionPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckExecutionPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertExecutionProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertExecutionProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectExecutionPropertyByExecutionId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectExecutionPropertyByExecutionId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetUpdateExecutionProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.UpdateExecutionProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDeleteExecutionProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DeleteExecutionProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropContextTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropContextTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateContextTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateContextTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckContextTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckContextTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertContext() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertContext
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectContextById() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectContextById
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectContextsByTypeId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectContextsByTypeId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectContextByTypeIdAndName() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectContextByTypeIdAndName
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetUpdateContext() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.UpdateContext
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropContextPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropContextPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateContextPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateContextPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckContextPropertyTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckContextPropertyTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertContextProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertContextProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectContextPropertyByContextId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectContextPropertyByContextId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetUpdateContextProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.UpdateContextProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDeleteContextProperty() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DeleteContextProperty
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropParentContextTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropParentContextTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateParentContextTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateParentContextTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckParentContextTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckParentContextTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertParentContext() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertParentContext
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectParentContextByContextId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectParentContextByContextId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectParentContextByParentContextId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectParentContextByParentContextId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropEventTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropEventTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateEventTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateEventTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckEventTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckEventTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertEvent() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertEvent
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectEventByArtifactIds() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectEventByArtifactIds
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectEventByExecutionIds() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectEventByExecutionIds
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropEventPathTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropEventPathTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateEventPathTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateEventPathTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckEventPathTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckEventPathTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertEventPath() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertEventPath
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectEventPathByEventIds() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectEventPathByEventIds
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropAssociationTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropAssociationTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateAssociationTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateAssociationTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckAssociationTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckAssociationTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertAssociation() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertAssociation
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectAssociationByContextId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectAssociationByContextId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectAssociationByExecutionId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectAssociationByExecutionId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropAttributionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropAttributionTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateAttributionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateAttributionTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckAttributionTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckAttributionTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertAttribution() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertAttribution
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectAttributionByContextId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectAttributionByContextId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSelectAttributionByArtifactId() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SelectAttributionByArtifactId
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetDropMlmdEnvTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DropMlmdEnvTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCreateMlmdEnvTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CreateMlmdEnvTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSchemaVersion() int64 {
	if x != nil {
		return x.SchemaVersion
	}
	return 0
}

func (x *MetadataSourceQueryConfig) GetCheckMlmdEnvTable() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckMlmdEnvTable
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetInsertSchemaVersion() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.InsertSchemaVersion
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetUpdateSchemaVersion() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.UpdateSchemaVersion
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetCheckTablesInV0_13_2() *MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.CheckTablesInV0_13_2
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetSecondaryIndices() []*MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.SecondaryIndices
	}
	return nil
}

func (x *MetadataSourceQueryConfig) GetMigrationSchemes() map[int64]*MetadataSourceQueryConfig_MigrationScheme {
	if x != nil {
		return x.MigrationSchemes
	}
	return nil
}

// An individual record (e.g., row) returned by a MetadataSource.
// The record does not address the type conversion.
type RecordSet_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RecordSet_Record) Reset() {
	*x = RecordSet_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_source_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSet_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSet_Record) ProtoMessage() {}

func (x *RecordSet_Record) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_source_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSet_Record.ProtoReflect.Descriptor instead.
func (*RecordSet_Record) Descriptor() ([]byte, []int) {
	return file_metadata_source_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RecordSet_Record) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// Template of a SQL query, which can contain parameterized variables using
// $0, $1, ... $9.
// For instance:
//    query: "select * from foo where bar = $0"
//    parameter_num: 1
type MetadataSourceQueryConfig_TemplateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	ParameterNum int32  `protobuf:"varint,2,opt,name=parameter_num,json=parameterNum,proto3" json:"parameter_num,omitempty"`
}

func (x *MetadataSourceQueryConfig_TemplateQuery) Reset() {
	*x = MetadataSourceQueryConfig_TemplateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_source_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataSourceQueryConfig_TemplateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSourceQueryConfig_TemplateQuery) ProtoMessage() {}

func (x *MetadataSourceQueryConfig_TemplateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_source_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSourceQueryConfig_TemplateQuery.ProtoReflect.Descriptor instead.
func (*MetadataSourceQueryConfig_TemplateQuery) Descriptor() ([]byte, []int) {
	return file_metadata_source_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MetadataSourceQueryConfig_TemplateQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MetadataSourceQueryConfig_TemplateQuery) GetParameterNum() int32 {
	if x != nil {
		return x.ParameterNum
	}
	return 0
}

// A migration scheme that is used by a migration function to transit a
// database at a schema_version to schema_version + 1.
// DDL is often metadata source specific, if provided, each metadata source
// should have its own setting.
type MetadataSourceQueryConfig_MigrationScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence of queries to increase the schema version by 1.
	UpgradeQueries []*MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,1,rep,name=upgrade_queries,json=upgradeQueries,proto3" json:"upgrade_queries,omitempty"`
	// Sequence of queries to decrease the schema version by 1.
	DowngradeQueries []*MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,3,rep,name=downgrade_queries,json=downgradeQueries,proto3" json:"downgrade_queries,omitempty"`
	// Details of verifying the correctness of upgrade_queries.
	UpgradeVerification *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme `protobuf:"bytes,2,opt,name=upgrade_verification,json=upgradeVerification,proto3" json:"upgrade_verification,omitempty"`
	// Details of verifying the correctness of downgrade_queries.
	DowngradeVerification *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme `protobuf:"bytes,4,opt,name=downgrade_verification,json=downgradeVerification,proto3" json:"downgrade_verification,omitempty"`
}

func (x *MetadataSourceQueryConfig_MigrationScheme) Reset() {
	*x = MetadataSourceQueryConfig_MigrationScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_source_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataSourceQueryConfig_MigrationScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSourceQueryConfig_MigrationScheme) ProtoMessage() {}

func (x *MetadataSourceQueryConfig_MigrationScheme) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_source_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSourceQueryConfig_MigrationScheme.ProtoReflect.Descriptor instead.
func (*MetadataSourceQueryConfig_MigrationScheme) Descriptor() ([]byte, []int) {
	return file_metadata_source_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MetadataSourceQueryConfig_MigrationScheme) GetUpgradeQueries() []*MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.UpgradeQueries
	}
	return nil
}

func (x *MetadataSourceQueryConfig_MigrationScheme) GetDowngradeQueries() []*MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.DowngradeQueries
	}
	return nil
}

func (x *MetadataSourceQueryConfig_MigrationScheme) GetUpgradeVerification() *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme {
	if x != nil {
		return x.UpgradeVerification
	}
	return nil
}

func (x *MetadataSourceQueryConfig_MigrationScheme) GetDowngradeVerification() *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme {
	if x != nil {
		return x.DowngradeVerification
	}
	return nil
}

// For test purposes, it defines the setup query and post condition
// invariants of a migration scheme.
type MetadataSourceQueryConfig_MigrationScheme_VerificationScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This optional field defines the additional details of recreating:
	// a) the schema of previous version, as the DDL queries will not be
	//    available in newer library versions.
	// b) and/or the records of related tables which have schema changes.
	// Note the setup queries is used in a sequence along with other migration
	// schemes of previous version in order to test upgrading from all
	// known previous versions to the library version.
	PreviousVersionSetupQueries []*MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,1,rep,name=previous_version_setup_queries,json=previousVersionSetupQueries,proto3" json:"previous_version_setup_queries,omitempty"`
	// This optional field defines the verification queries, each of which
	// returns only True/False in the select to assert the state transition
	// invariant is the same, e.g.,
	// * conditions on number of rows
	// * conditions on data model entities (e.g., type, artifact, property).
	PostMigrationVerificationQueries []*MetadataSourceQueryConfig_TemplateQuery `protobuf:"bytes,2,rep,name=post_migration_verification_queries,json=postMigrationVerificationQueries,proto3" json:"post_migration_verification_queries,omitempty"`
}

func (x *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme) Reset() {
	*x = MetadataSourceQueryConfig_MigrationScheme_VerificationScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_source_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataSourceQueryConfig_MigrationScheme_VerificationScheme) ProtoMessage() {}

func (x *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_source_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataSourceQueryConfig_MigrationScheme_VerificationScheme.ProtoReflect.Descriptor instead.
func (*MetadataSourceQueryConfig_MigrationScheme_VerificationScheme) Descriptor() ([]byte, []int) {
	return file_metadata_source_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme) GetPreviousVersionSetupQueries() []*MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.PreviousVersionSetupQueries
	}
	return nil
}

func (x *MetadataSourceQueryConfig_MigrationScheme_VerificationScheme) GetPostMigrationVerificationQueries() []*MetadataSourceQueryConfig_TemplateQuery {
	if x != nil {
		return x.PostMigrationVerificationQueries
	}
	return nil
}

var File_metadata_source_proto protoreflect.FileDescriptor

var file_metadata_source_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x20,
	0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xd8, 0x61, 0x0a, 0x19, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51,
	0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x60, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x5e, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x66, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x13,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x10, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x5e, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x69, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6b, 0x0a, 0x17, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x1d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x6d, 0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x71, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x6f, 0x0a, 0x19, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x16, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x1a,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x67,
	0x0a, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x12, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x5d, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x67,
	0x0a, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x23, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x1b, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x6b,
	0x0a, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x72, 0x69, 0x12, 0x5d, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x75, 0x0a, 0x1c, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x79, 0x0a, 0x1e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x1d,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x16, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x27, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x22, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x6e, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x6e, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x66, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x16, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x13, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x5f, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x24,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x1e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x74, 0x0a, 0x1c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x18, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x1d, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x1a, 0x64, 0x72, 0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x7b, 0x0a, 0x1f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x1c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x79, 0x0a,
	0x1e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1b, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x29, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x24, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x79, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x19, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x19,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x62,
	0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x66, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x5b, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a,
	0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x1a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x16,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x22, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x73, 0x0a, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x18,
	0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x75, 0x0a, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x19, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x15, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x25, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x6c,
	0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x17,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x6f, 0x0a, 0x19, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x1b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x71, 0x0a, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x17, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x81, 0x01,
	0x0a, 0x23, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x1e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x64, 0x12, 0x8e, 0x01, 0x0a, 0x2a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x24, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x12, 0x5e, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x74, 0x0a, 0x1c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x18, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x76, 0x0a, 0x1d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x67, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6b, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x13, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x60, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x77, 0x0a, 0x1e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x6a, 0x0a, 0x16, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x15,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x55,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x22, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x16, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x15,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x20, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x21, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x5c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x6d, 0x6c, 0x6d, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x10, 0x64, 0x72, 0x6f,
	0x70, 0x4d, 0x6c, 0x6d, 0x64, 0x45, 0x6e, 0x76, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x67, 0x0a,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6c, 0x6d, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6c, 0x6d, 0x64, 0x45, 0x6e,
	0x76, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a,
	0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x6c, 0x6d, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6c, 0x6d, 0x64, 0x45, 0x6e, 0x76, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68,
	0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x17, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x30, 0x5f, 0x31,
	0x33, 0x5f, 0x32, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x56, 0x30,
	0x31, 0x33, 0x32, 0x12, 0x61, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x11, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x1a, 0x4a, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x1a, 0xec, 0x05,
	0x0a, 0x0f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x61, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x13, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x15, 0x64,
	0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x95, 0x02, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x1e, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x23, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x20, 0x70, 0x6f, 0x73, 0x74,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x7b, 0x0a, 0x15,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x26, 0x10, 0x27, 0x4a,
	0x04, 0x08, 0x27, 0x10, 0x28, 0x4a, 0x04, 0x08, 0x2b, 0x10, 0x2c, 0x2a, 0x82, 0x01, 0x0a, 0x12,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x41, 0x4b, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x59, 0x53,
	0x51, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x51, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03,
	0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e,
	0x65, 0x75, 0x72, 0x6f, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6b, 0x66, 0x70, 0x2d, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2f, 0x6d, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metadata_source_proto_rawDescOnce sync.Once
	file_metadata_source_proto_rawDescData = file_metadata_source_proto_rawDesc
)

func file_metadata_source_proto_rawDescGZIP() []byte {
	file_metadata_source_proto_rawDescOnce.Do(func() {
		file_metadata_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_metadata_source_proto_rawDescData)
	})
	return file_metadata_source_proto_rawDescData
}

var file_metadata_source_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_metadata_source_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_metadata_source_proto_goTypes = []interface{}{
	(MetadataSourceType)(0),                           // 0: ml_metadata.MetadataSourceType
	(*RecordSet)(nil),                                 // 1: ml_metadata.RecordSet
	(*MetadataSourceQueryConfig)(nil),                 // 2: ml_metadata.MetadataSourceQueryConfig
	(*RecordSet_Record)(nil),                          // 3: ml_metadata.RecordSet.Record
	(*MetadataSourceQueryConfig_TemplateQuery)(nil),   // 4: ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	(*MetadataSourceQueryConfig_MigrationScheme)(nil), // 5: ml_metadata.MetadataSourceQueryConfig.MigrationScheme
	nil, // 6: ml_metadata.MetadataSourceQueryConfig.MigrationSchemesEntry
	(*MetadataSourceQueryConfig_MigrationScheme_VerificationScheme)(nil), // 7: ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme
}
var file_metadata_source_proto_depIdxs = []int32{
	3,   // 0: ml_metadata.RecordSet.records:type_name -> ml_metadata.RecordSet.Record
	0,   // 1: ml_metadata.MetadataSourceQueryConfig.metadata_source_type:type_name -> ml_metadata.MetadataSourceType
	4,   // 2: ml_metadata.MetadataSourceQueryConfig.drop_type_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 3: ml_metadata.MetadataSourceQueryConfig.create_type_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 4: ml_metadata.MetadataSourceQueryConfig.check_type_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 5: ml_metadata.MetadataSourceQueryConfig.insert_artifact_type:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 6: ml_metadata.MetadataSourceQueryConfig.insert_execution_type:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 7: ml_metadata.MetadataSourceQueryConfig.insert_context_type:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 8: ml_metadata.MetadataSourceQueryConfig.select_type_by_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 9: ml_metadata.MetadataSourceQueryConfig.select_type_by_name:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 10: ml_metadata.MetadataSourceQueryConfig.select_all_types:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 11: ml_metadata.MetadataSourceQueryConfig.drop_parent_type_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 12: ml_metadata.MetadataSourceQueryConfig.create_parent_type_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 13: ml_metadata.MetadataSourceQueryConfig.check_parent_type_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 14: ml_metadata.MetadataSourceQueryConfig.insert_parent_type:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 15: ml_metadata.MetadataSourceQueryConfig.select_parent_type_by_type_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 16: ml_metadata.MetadataSourceQueryConfig.drop_type_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 17: ml_metadata.MetadataSourceQueryConfig.create_type_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 18: ml_metadata.MetadataSourceQueryConfig.check_type_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 19: ml_metadata.MetadataSourceQueryConfig.insert_type_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 20: ml_metadata.MetadataSourceQueryConfig.select_property_by_type_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 21: ml_metadata.MetadataSourceQueryConfig.select_last_insert_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 22: ml_metadata.MetadataSourceQueryConfig.drop_artifact_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 23: ml_metadata.MetadataSourceQueryConfig.create_artifact_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 24: ml_metadata.MetadataSourceQueryConfig.check_artifact_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 25: ml_metadata.MetadataSourceQueryConfig.insert_artifact:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 26: ml_metadata.MetadataSourceQueryConfig.select_artifact_by_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 27: ml_metadata.MetadataSourceQueryConfig.select_artifact_by_type_id_and_name:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 28: ml_metadata.MetadataSourceQueryConfig.select_artifacts_by_type_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 29: ml_metadata.MetadataSourceQueryConfig.select_artifacts_by_uri:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 30: ml_metadata.MetadataSourceQueryConfig.update_artifact:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 31: ml_metadata.MetadataSourceQueryConfig.drop_artifact_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 32: ml_metadata.MetadataSourceQueryConfig.create_artifact_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 33: ml_metadata.MetadataSourceQueryConfig.check_artifact_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 34: ml_metadata.MetadataSourceQueryConfig.insert_artifact_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 35: ml_metadata.MetadataSourceQueryConfig.select_artifact_property_by_artifact_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 36: ml_metadata.MetadataSourceQueryConfig.update_artifact_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 37: ml_metadata.MetadataSourceQueryConfig.delete_artifact_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 38: ml_metadata.MetadataSourceQueryConfig.drop_execution_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 39: ml_metadata.MetadataSourceQueryConfig.create_execution_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 40: ml_metadata.MetadataSourceQueryConfig.check_execution_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 41: ml_metadata.MetadataSourceQueryConfig.insert_execution:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 42: ml_metadata.MetadataSourceQueryConfig.select_execution_by_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 43: ml_metadata.MetadataSourceQueryConfig.select_execution_by_type_id_and_name:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 44: ml_metadata.MetadataSourceQueryConfig.select_executions_by_type_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 45: ml_metadata.MetadataSourceQueryConfig.update_execution:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 46: ml_metadata.MetadataSourceQueryConfig.drop_execution_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 47: ml_metadata.MetadataSourceQueryConfig.create_execution_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 48: ml_metadata.MetadataSourceQueryConfig.check_execution_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 49: ml_metadata.MetadataSourceQueryConfig.insert_execution_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 50: ml_metadata.MetadataSourceQueryConfig.select_execution_property_by_execution_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 51: ml_metadata.MetadataSourceQueryConfig.update_execution_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 52: ml_metadata.MetadataSourceQueryConfig.delete_execution_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 53: ml_metadata.MetadataSourceQueryConfig.drop_context_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 54: ml_metadata.MetadataSourceQueryConfig.create_context_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 55: ml_metadata.MetadataSourceQueryConfig.check_context_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 56: ml_metadata.MetadataSourceQueryConfig.insert_context:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 57: ml_metadata.MetadataSourceQueryConfig.select_context_by_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 58: ml_metadata.MetadataSourceQueryConfig.select_contexts_by_type_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 59: ml_metadata.MetadataSourceQueryConfig.select_context_by_type_id_and_name:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 60: ml_metadata.MetadataSourceQueryConfig.update_context:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 61: ml_metadata.MetadataSourceQueryConfig.drop_context_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 62: ml_metadata.MetadataSourceQueryConfig.create_context_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 63: ml_metadata.MetadataSourceQueryConfig.check_context_property_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 64: ml_metadata.MetadataSourceQueryConfig.insert_context_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 65: ml_metadata.MetadataSourceQueryConfig.select_context_property_by_context_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 66: ml_metadata.MetadataSourceQueryConfig.update_context_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 67: ml_metadata.MetadataSourceQueryConfig.delete_context_property:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 68: ml_metadata.MetadataSourceQueryConfig.drop_parent_context_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 69: ml_metadata.MetadataSourceQueryConfig.create_parent_context_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 70: ml_metadata.MetadataSourceQueryConfig.check_parent_context_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 71: ml_metadata.MetadataSourceQueryConfig.insert_parent_context:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 72: ml_metadata.MetadataSourceQueryConfig.select_parent_context_by_context_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 73: ml_metadata.MetadataSourceQueryConfig.select_parent_context_by_parent_context_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 74: ml_metadata.MetadataSourceQueryConfig.drop_event_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 75: ml_metadata.MetadataSourceQueryConfig.create_event_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 76: ml_metadata.MetadataSourceQueryConfig.check_event_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 77: ml_metadata.MetadataSourceQueryConfig.insert_event:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 78: ml_metadata.MetadataSourceQueryConfig.select_event_by_artifact_ids:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 79: ml_metadata.MetadataSourceQueryConfig.select_event_by_execution_ids:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 80: ml_metadata.MetadataSourceQueryConfig.drop_event_path_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 81: ml_metadata.MetadataSourceQueryConfig.create_event_path_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 82: ml_metadata.MetadataSourceQueryConfig.check_event_path_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 83: ml_metadata.MetadataSourceQueryConfig.insert_event_path:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 84: ml_metadata.MetadataSourceQueryConfig.select_event_path_by_event_ids:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 85: ml_metadata.MetadataSourceQueryConfig.drop_association_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 86: ml_metadata.MetadataSourceQueryConfig.create_association_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 87: ml_metadata.MetadataSourceQueryConfig.check_association_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 88: ml_metadata.MetadataSourceQueryConfig.insert_association:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 89: ml_metadata.MetadataSourceQueryConfig.select_association_by_context_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 90: ml_metadata.MetadataSourceQueryConfig.select_association_by_execution_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 91: ml_metadata.MetadataSourceQueryConfig.drop_attribution_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 92: ml_metadata.MetadataSourceQueryConfig.create_attribution_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 93: ml_metadata.MetadataSourceQueryConfig.check_attribution_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 94: ml_metadata.MetadataSourceQueryConfig.insert_attribution:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 95: ml_metadata.MetadataSourceQueryConfig.select_attribution_by_context_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 96: ml_metadata.MetadataSourceQueryConfig.select_attribution_by_artifact_id:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 97: ml_metadata.MetadataSourceQueryConfig.drop_mlmd_env_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 98: ml_metadata.MetadataSourceQueryConfig.create_mlmd_env_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 99: ml_metadata.MetadataSourceQueryConfig.check_mlmd_env_table:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 100: ml_metadata.MetadataSourceQueryConfig.insert_schema_version:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 101: ml_metadata.MetadataSourceQueryConfig.update_schema_version:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 102: ml_metadata.MetadataSourceQueryConfig.check_tables_in_v0_13_2:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 103: ml_metadata.MetadataSourceQueryConfig.secondary_indices:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	6,   // 104: ml_metadata.MetadataSourceQueryConfig.migration_schemes:type_name -> ml_metadata.MetadataSourceQueryConfig.MigrationSchemesEntry
	4,   // 105: ml_metadata.MetadataSourceQueryConfig.MigrationScheme.upgrade_queries:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 106: ml_metadata.MetadataSourceQueryConfig.MigrationScheme.downgrade_queries:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	7,   // 107: ml_metadata.MetadataSourceQueryConfig.MigrationScheme.upgrade_verification:type_name -> ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme
	7,   // 108: ml_metadata.MetadataSourceQueryConfig.MigrationScheme.downgrade_verification:type_name -> ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme
	5,   // 109: ml_metadata.MetadataSourceQueryConfig.MigrationSchemesEntry.value:type_name -> ml_metadata.MetadataSourceQueryConfig.MigrationScheme
	4,   // 110: ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme.previous_version_setup_queries:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	4,   // 111: ml_metadata.MetadataSourceQueryConfig.MigrationScheme.VerificationScheme.post_migration_verification_queries:type_name -> ml_metadata.MetadataSourceQueryConfig.TemplateQuery
	112, // [112:112] is the sub-list for method output_type
	112, // [112:112] is the sub-list for method input_type
	112, // [112:112] is the sub-list for extension type_name
	112, // [112:112] is the sub-list for extension extendee
	0,   // [0:112] is the sub-list for field type_name
}

func init() { file_metadata_source_proto_init() }
func file_metadata_source_proto_init() {
	if File_metadata_source_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metadata_source_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_source_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataSourceQueryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_source_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSet_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_source_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataSourceQueryConfig_TemplateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_source_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataSourceQueryConfig_MigrationScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_source_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataSourceQueryConfig_MigrationScheme_VerificationScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metadata_source_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metadata_source_proto_goTypes,
		DependencyIndexes: file_metadata_source_proto_depIdxs,
		EnumInfos:         file_metadata_source_proto_enumTypes,
		MessageInfos:      file_metadata_source_proto_msgTypes,
	}.Build()
	File_metadata_source_proto = out.File
	file_metadata_source_proto_rawDesc = nil
	file_metadata_source_proto_goTypes = nil
	file_metadata_source_proto_depIdxs = nil
}
