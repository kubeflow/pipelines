# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: integration-test-
spec:
  entrypoint: integration-test
  arguments:
    parameters:
    - name: commit-sha
      value: master
    - name: test-results-gcs-dir
    - name: cleanup
      value: true
    - name: bootstrapper-image-suffix
      value: bootstrapper
    - name: api-image-suffix
      value: api
    - name: frontend-image-suffix
      value: frontend
    - name: scheduledworkflow-image-suffix
      value: scheduledworkflow
    - name: persistenceagent-image-suffix
      value: persistenceagent
    - name: api-integration-test-image-suffix
      value: api_integration_test
    - name: e2e-tests-image-suffix
      value: e2e-tests
  templates:
  - name: integration-test
    inputs:
      parameters:
      - name: commit-sha
      - name: test-results-gcs-dir
      - name: bootstrapper-image-suffix
      - name: api-image-suffix
      - name: frontend-image-suffix
      - name: scheduledworkflow-image-suffix
      - name: persistenceagent-image-suffix
      - name: api-integration-test-image-suffix
      - name: e2e-tests-image-suffix
    steps:
    - - name: get-project
        template: get-project
    - - name: build-bootstrapper-image
        template: build-image
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: docker-path
            value: ml-pipeline
          - name: image-suffix
            value: "{{inputs.parameters.bootstrapper-image-suffix}}"
      - name: build-api-server-image
        template: build-image
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: docker-path
            value: .
          - name: image-suffix
            value: "{{inputs.parameters.api-image-suffix}}"
          - name: docker-file
            value: backend/Dockerfile
      - name: build-frontend-image
        template: build-image
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: docker-path
            value: .
          - name: docker-file
            value: frontend/Dockerfile
          - name: image-suffix
            value: "{{inputs.parameters.frontend-image-suffix}}"
      - name: build-scheduledworkflow-image
        template: build-image
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: docker-path
            value: .
          - name: image-suffix
            value: "{{inputs.parameters.scheduledworkflow-image-suffix}}"
          - name: docker-file
            value: backend/Dockerfile.scheduledworkflow
      - name: build-persistenceagent-image
        template: build-image
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: docker-path
            value: .
          - name: image-suffix
            value: "{{inputs.parameters.persistenceagent-image-suffix}}"
          - name: docker-file
            value: backend/Dockerfile.persistenceagent
      - name: build-api-integration-test-image
        template: build-image
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: docker-path
            value: test/api-integration-test
          - name: image-suffix
            value: "{{inputs.parameters.api-integration-test-image-suffix}}"
      - name: build-e2e-tests-image
        template: build-image
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: docker-path
            value: test/e2e
          - name: image-suffix
            value: "{{inputs.parameters.e2e-tests-image-suffix}}"
    - - name: deploy-ml-pipeline
        template: deploy-ml-pipeline
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: bootstrapper-image-suffix
            value: "{{inputs.parameters.bootstrapper-image-suffix}}"
          - name: api-image-suffix
            value: "{{inputs.parameters.api-image-suffix}}"
          - name: frontend-image-suffix
            value: "{{inputs.parameters.frontend-image-suffix}}"
          - name: scheduledworkflow-image-suffix
            value: "{{inputs.parameters.scheduledworkflow-image-suffix}}"
          - name: persistenceagent-image-suffix
            value: "{{inputs.parameters.persistenceagent-image-suffix}}"
    - - name: run-api-integration-tests
        template: run-api-integration-tests
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: test-results-gcs-dir
            value: "{{inputs.parameters.test-results-gcs-dir}}"
          - name: api-integration-test-image-suffix
            value: "{{inputs.parameters.api-integration-test-image-suffix}}"
    - - name: run-e2e-tests
        template: run-e2e-tests
        arguments:
          parameters:
          - name: project
            value: "{{steps.get-project.outputs.result}}"
          - name: commit-sha
            value: "{{inputs.parameters.commit-sha}}"
          - name: test-results-gcs-dir
            value: "{{inputs.parameters.test-results-gcs-dir}}"
          - name: e2e-tests-image-suffix
            value: "{{inputs.parameters.e2e-tests-image-suffix}}"

  - name: get-project
    script:
      image: google/cloud-sdk
      command: [bash]
      source: |
        gcloud config config-helper --format "value(configuration.properties.core.project)"

  # Build image and upload to GCR in the specified project
  - name: build-image
    inputs:
      parameters:
      # The project that image deployed to
      - name: project
      # The github commit-sha to pull code from
      - name: commit-sha
      # The relative code path to the Dockerfile
      - name: docker-path
      # Name of the Docker file to use. "Dockerfile" by default
      - name: docker-file
        value: Dockerfile
      - name: image-suffix
    container:
      image: gcr.io/ml-pipeline/image-builder:v20180724-0.0.10-60-g2d7875a-e3b0c4
      imagePullPolicy: 'Always'
      args: [
        "--commit_sha", "{{inputs.parameters.commit-sha}}",
        "--docker_path", "{{inputs.parameters.docker-path}}",
        "--docker_file", "{{inputs.parameters.docker-file}}",
        "--image_name", "gcr.io/{{inputs.parameters.project}}/{{inputs.parameters.commit-sha}}/{{inputs.parameters.image-suffix}}",
      ]
      volumeMounts:
      - name: secret-volume
        mountPath: "/root/.ssh/github"
      env:
      - name: DOCKER_HOST
        value: 127.0.0.1
    sidecars:
    - name: dind
      image: docker:17.10-dind
      securityContext:
        privileged: true
      mirrorVolumeMounts: true

  # Use the newly built bootstrapper image to deploy
  - name: deploy-ml-pipeline
    inputs:
      parameters:
      - name: project
      - name: commit-sha
      - name: bootstrapper-image-suffix
      - name: api-image-suffix
      - name: frontend-image-suffix
      - name: scheduledworkflow-image-suffix
      - name: persistenceagent-image-suffix
    container:
      image: gcr.io/{{inputs.parameters.project}}/{{inputs.parameters.commit-sha}}/{{inputs.parameters.bootstrapper-image-suffix}}
      args: [
        "--api_image", "gcr.io/{{inputs.parameters.project}}/{{inputs.parameters.commit-sha}}/{{inputs.parameters.api-image-suffix}}",
        "--ui_image", "gcr.io/{{inputs.parameters.project}}/{{inputs.parameters.commit-sha}}/{{inputs.parameters.frontend-image-suffix}}",
        "--scheduled_workflow_image", "gcr.io/{{inputs.parameters.project}}/{{inputs.parameters.commit-sha}}/{{inputs.parameters.scheduledworkflow-image-suffix}}",
        "--persistence_agent_image", "gcr.io/{{inputs.parameters.project}}/{{inputs.parameters.commit-sha}}/{{inputs.parameters.persistenceagent-image-suffix}}",
        "--deploy_argo", "false" # Argo is already installed in the cluster. No need to install again.
      ]

  - name: run-api-integration-tests
    inputs:
      parameters:
      - name: project
      - name: commit-sha
      - name: test-results-gcs-dir
      - name: api-integration-test-image-suffix
    container:
      image: gcr.io/{{inputs.parameters.project}}/{{inputs.parameters.commit-sha}}/{{inputs.parameters.api-integration-test-image-suffix}}
      args: [
        "--commit_sha", "{{inputs.parameters.commit-sha}}",
        "--results-gcs-dir", "{{inputs.parameters.test-results-gcs-dir}}",
      ]
      volumeMounts:
      - name: secret-volume
        mountPath: "/root/.ssh/github"

  - name: run-e2e-tests
    inputs:
      parameters:
      - name: project
      - name: commit-sha
      - name: test-results-gcs-dir
      - name: e2e-tests-image-suffix
    container:
      image: gcr.io/{{inputs.parameters.project}}/{{inputs.parameters.commit-sha}}/{{inputs.parameters.e2e-tests-image-suffix}}
      args: [
        "--commit_sha", "{{inputs.parameters.commit-sha}}",
        "--results-gcs-dir", "{{inputs.parameters.test-results-gcs-dir}}",
      ]

  volumes:
  - name: secret-volume
    secret:
      defaultMode: 256
      secretName: ssh-key-secret
