############## Install Argo ##############
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: workflows.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: Workflow
    plural: workflows
    shortNames:
    - wf
  scope: Namespaced
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: argo-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-cluster-role
subjects:
- kind: ServiceAccount
  name: argo
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: argo
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: argo-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - get
  - list
  - watch
  - update
  - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: argo-ui
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: argo-ui-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: argo-ui-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-ui-cluster-role
subjects:
- kind: ServiceAccount
  name: argo-ui
  namespace: kube-system
---
apiVersion: v1
data:
  config: |
    artifactRepository: {}
    executorImage: argoproj/argoexec:v2.0.0
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: workflow-controller-configmap
  namespace: kube-system
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  creationTimestamp: null
  name: workflow-controller
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: workflow-controller
  strategy: {}
  template:
    metadata:
      labels:
        app: workflow-controller
    spec:
      containers:
      - args:
        - --configmap
        - workflow-controller-configmap
        command:
        - workflow-controller
        env:
        - name: ARGO_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: argoproj/workflow-controller:v2.0.0
        name: workflow-controller
        resources: {}
      serviceAccountName: argo
status: {}
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  creationTimestamp: null
  name: argo-ui
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: argo-ui
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: argo-ui
    spec:
      containers:
      - env:
        - name: ARGO_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: IN_CLUSTER
          value: "true"
        - name: ENABLE_WEB_CONSOLE
          value: "false"
        - name: BASE_HREF
          value: /
        image: argoproj/argoui:v2.0.0
        name: argo-ui
        resources: {}
      serviceAccountName: argo-ui
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  name: argo-ui
  namespace: kube-system
spec:
  ports:
  - port: 80
    targetPort: 8001
  selector:
    app: argo-ui
status:
  loadBalancer: {}

############## Install Minio ##############
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # This name uniquely identifies the PVC. This is used in deployment.
  name: minio-pv-claim
spec:
  # Read more about access modes here: http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes
  accessModes:
    # The volume is mounted as read-write by a single node
    - ReadWriteOnce
  resources:
    # This is the request for storage. Should be available in the cluster.
    requests:
      storage: 10Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio
spec:
  strategy:
    # Specifies the strategy used to replace old Pods by new ones
    # Refer: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    type: Recreate
  template:
    metadata:
      labels:
        # This label is used as a selector in Service definition
        app: minio
    spec:
      # Volumes used by this deployment
      volumes:
      - name: data
        # This volume is based on PVC
        persistentVolumeClaim:
          # Name of the PVC created earlier
          claimName: minio-pv-claim
      containers:
      - name: minio
        # Volume mounts for this container
        volumeMounts:
        # Volume 'data' is mounted to path '/data'
        - name: data
          mountPath: "/data"
        # Pulls the lastest Minio image from Docker Hub
        image: minio/minio:RELEASE.2018-02-09T22-40-05Z
        args:
        - server
        - /data
        env:
        # Minio access key and secret key
        - name: MINIO_ACCESS_KEY
          value: "minio"
        - name: MINIO_SECRET_KEY
          value: "minio123"
        ports:
        - containerPort: 9000
          hostPort: 9000
---
apiVersion: v1
kind: Service
metadata:
  # This name uniquely identifies the service
  name: minio-service
spec:
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    # Looks for labels `app:minio` in the namespace and applies the spec
    app: minio
status:
  loadBalancer: {}

############## Install pipeline manager API server ##############
---
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: ml-pipeline-manager
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  name: ml-pipeline-manager-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ml-pipeline-manager
subjects:
- kind: ServiceAccount
  name: ml-pipeline-manager
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: ml-pipeline-manager
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
---
apiVersion: v1
kind: Service
metadata:
  name: ml-pipeline-manager
  labels:
    app: ml-pipeline-manager
spec:
  ports:
  - port: 8888
    targetPort: 8888
    protocol: TCP
    name: http
  selector:
    app: ml-pipeline-manager
status:
  loadBalancer: {}
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: ml-pipeline-manager
  labels:
    app: ml-pipeline-manager
spec:
  selector:
    matchLabels:
      app: ml-pipeline-manager
  template:
    metadata:
      labels:
        app: ml-pipeline-manager
    spec:
      containers:
      - name: ml-pipeline-api-server
        image: gcr.io/ml-pipeline/api-server
        ports:
          - containerPort: 8888
      serviceAccountName: ml-pipeline-manager
---
apiVersion: v1
kind: Service
metadata:
  name: ml-pipeline-frontend
  labels:
    app: ml-pipeline-frontend
spec:
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: ml-pipeline-frontend
status:
  loadBalancer: {}
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: ml-pipeline-frontend
  labels:
    app: ml-pipeline-frontend
spec:
  selector:
    matchLabels:
      app: ml-pipeline-frontend
  template:
    metadata:
      labels:
        app: ml-pipeline-frontend
    spec:
      containers:
      - name: ml-pipeline-frontend
        image: gcr.io/ml-pipeline/frontend:0.0.1
        imagePullPolicy: Always
        ports:
          - containerPort: 3000
