import kfp
from kfp import dsl
from kfp.components import func_to_container_op

@func_to_container_op
def show_results( bagging : float) -> None:
    # Given the outputs from decision_tree and logistic regression components
    # the results are shown.

    print(f"bagging (accuracy): {bagging}")
def add_resource_constraints(op: dsl.ContainerOp):
    return op.set_cpu_request("1").set_cpu_limit("2")


@dsl.pipeline(name='Three Pipeline', description='bagging')
def first_pipeline():

    # Loads the yaml manifest for each component
    download = kfp.components.load_component_from_file('download_data/download_data.yaml')
    random_forest = kfp.components.load_component_from_file('bagging/bagging.yaml')

    # Run download_data task
    download_task = add_resource_constraints(download())

    # Run tasks "decison_tree" and "logistic_regression" given
    # the output generated by "download_task".
    random_forest_task = add_resource_constraints(random_forest(download_task.output))
    # Given the outputs from "decision_tree" and "logistic_regression"
    # the component "show_results" is called to print the results.
    add_resource_constraints(show_results(random_forest_task.output))



if __name__ == '__main__':
    kfp.compiler.Compiler().compile(first_pipeline, 'bagging_pipelines.yaml')
    # kfp.Client().create_run_from_pipeline_func(basic_pipeline, arguments={})