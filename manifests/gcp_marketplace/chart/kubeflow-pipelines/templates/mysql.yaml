apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
spec:
  ports:
    - port: 3306
  selector:
    {{ if .Values.managedstorage.enabled }}
    app: cloudsqlproxy
    {{ else }}
    app: mysql
    {{ end }}
    app.kubernetes.io/name: {{ .Release.Name }}
---
{{ if .Values.managedstorage.enabled }}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: cloudsqlproxy
  labels:
    app: cloudsqlproxy
    app.kubernetes.io/name: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: cloudsqlproxy
      app.kubernetes.io/name: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: cloudsqlproxy
        app.kubernetes.io/name: {{ .Release.Name }}
    spec:
      containers:
        - image: {{ .Values.images.cloudsqlproxy}}
          name: cloudsqlproxy
          env:
          command: ["/cloud_sql_proxy",
                    "-dir=/cloudsql",
            # Replace with your own CloudSQL instance ID
                    "-instances={{ .Values.managedstorage.cloudsqlInstanceConnectionName }}=tcp:0.0.0.0:3306",
            # System workload uses GCE default service account or Workload Identity's service account
            #       "-credential_file=/credentials/application_default_credentials.json",
                    "term_timeout=10s"]
          # set term_timeout if require graceful handling of shutdown
          # NOTE: proxy will stop accepting new connections; only wait on existing connections
          lifecycle:
            preStop:
              exec:
                # (optional) add a preStop hook so that termination is delayed
                # this is required if your server still require new connections (e.g., connection pools)
                command: ['sleep', '10']
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - mountPath: /cloudsql
              name: cloudsql
            - mountPath: /credentials
              name: gcp-sa-token
      volumes:
        - name: cloudsql
          emptyDir:
        - name: gcp-sa-token
          secret:
            secretName: {{ .Values.gcpSecretName }}
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-credential
  labels:
    app: mysql-credential
    app.kubernetes.io/name: {{ .Release.Name }}
type: Opaque
data:
  username: {{ .Values.managedstorage.dbUsername | b64enc | quote}}
  password: {{ .Values.managedstorage.dbPassword | b64enc | quote}}
{{ else }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: mysql
      app.kubernetes.io/name: {{ .Release.Name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
        app.kubernetes.io/name: {{ .Release.Name }}
    spec:
      containers:
        - env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "true"
          image: {{ .Values.images.mysql }}
          name: mysql
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
{{ end }}
