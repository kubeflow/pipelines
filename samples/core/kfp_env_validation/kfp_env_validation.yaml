"apiVersion": |-
  argoproj.io/v1alpha1
"kind": |-
  Workflow
"metadata":
  "annotations":
    "pipelines.kubeflow.org/pipeline_spec": |-
      {"description": "Verfies if the specified APIs are enabled in the project. To learn more about available APIs go to https://pantheon.corp.google.com/apis/library/.", "inputs": [{"default": "stackdriver.googleapis.com, storage-api.googleapis.com, bigquery.googleapis.com, dataflow.googleapis.com", "name": "target_apis"}], "name": "Check GCP APIs"}
  "generateName": |-
    check-gcp-apis-
"spec":
  "arguments":
    "parameters":
    - "name": |-
        target_apis
      "value": |-
        stackdriver.googleapis.com, storage-api.googleapis.com, bigquery.googleapis.com, dataflow.googleapis.com
  "entrypoint": |-
    check-gcp-apis
  "serviceAccountName": |-
    pipeline-runner
  "templates":
  - "dag":
      "tasks":
      - "arguments":
          "parameters":
          - "name": |-
              target_apis
            "value": |-
              {{inputs.parameters.target_apis}}
        "name": |-
          verfiy-gcp-apis
        "template": |-
          verfiy-gcp-apis
    "inputs":
      "parameters":
      - "name": |-
          target_apis
    "name": |-
      check-gcp-apis
  - "container":
      "args":
      - |-
        --target-apis
      - |-
        {{inputs.parameters.target_apis}}
      - |-
        ----output-paths
      - |-
        /tmp/outputs/Output/data
      "command":
      - |-
        python3
      - |-
        -u
      - |-
        -c
      - "def verfiy_gcp_apis(target_apis:str)-> bool:\n\n    # Install pip3 and kfp\
        \ on this image \n    import subprocess\n    subprocess.run(['curl','https://bootstrap.pypa.io/get-pip.py','-o','get-pip.py'],\
        \ capture_output=True)\n    subprocess.run(['apt-get', 'install', 'python3-distutils','--yes'],\
        \ capture_output=True)\n    subprocess.run(['python3', 'get-pip.py'], capture_output=True)\n\
        \    subprocess.run(['python3', '-m','pip','install','kfp', '--quiet'], capture_output=True)\n\
        \n    import sys\n    from typing import List, Text \n    import os\n    from\
        \ kfp.cli.diagnose_me import gcp\n\n    # Get the project ID to construct\
        \ an API enable link if needed\n    project_config = gcp.get_gcp_configuration(gcp.Commands.GET_GCLOUD_DEFAULT,human_readable=False)\n\
        \    project_id = ''   \n    if not project_config.has_error:\n        project_id\
        \ = project_config.parsed_output['core']['project']\n        print('Verifying\
        \ APIs in project %s ...' % (project_id))\n    else: \n        project_id\
        \ = '<YOUR-GCP-PROJECT-ID>'\n        raise RuntimeError('Could not retrieve\
        \ project ID with error  %s' % (project_config.stderr))\n\n    # Get the status\
        \ of GCP APIs and add the results to a dictionary\n    api_config_results\
        \ = gcp.get_gcp_configuration(\n        gcp.Commands.GET_APIS)\n\n    api_status\
        \ = {}\n\n    if api_config_results.has_error:\n        raise RuntimeError('could\
        \ not retrieve API status with error: %s' %(api_config_results.stderr))\n\n\
        \    for item in api_config_results.parsed_output:\n        api_status[item['config']['name']]\
        \ =  item['state']\n        # printing the results in stdout for logging purposes\
        \ \n        print('%s %s' % (item['config']['name'], item['state']))\n\n \
        \   # Check if target apis are enabled \n    api_check_results = True\n  \
        \  error_list = []\n    for api in target_apis.replace(' ','').split(','):\
        \ \n        if 'ENABLED'!= api_status.get(api, 'DISABLED'):\n            api_check_results\
        \ = False\n            error_list.append('API \\\"%s\\\" is not enabled. To\
        \ enable this api go to https://pantheon.corp.google.com/apis/library/%s?project=%s'\
        \ %(api,api,project_id))\n\n    if api_check_results:\n        return True\n\
        \    else:\n        raise RuntimeError('Required APIs are not enabled:\\n'+\
        \ '\\n'.join(error_list))\n\ndef _serialize_bool(bool_value: bool) -> str:\n\
        \    if isinstance(bool_value, str):\n        return bool_value\n    if not\
        \ isinstance(bool_value, bool):\n        raise TypeError('Value \"{}\" has\
        \ type \"{}\" instead of bool.'.format(str(bool_value), str(type(bool_value))))\n\
        \    return str(bool_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Verfiy\
        \ gcp apis', description='')\n_parser.add_argument(\"--target-apis\", dest=\"\
        target_apis\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
        ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
        \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
        , [])\n\n_outputs = verfiy_gcp_apis(**_parsed_args)\n\nif not hasattr(_outputs,\
        \ '__getitem__') or isinstance(_outputs, str):\n    _outputs = [_outputs]\n\
        \n_output_serializers = [\n    _serialize_bool,\n\n]\n\nimport os\nfor idx,\
        \ output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n\
        \    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n\
        \        f.write(_output_serializers[idx](_outputs[idx]))\n"
      "env":
      - "name": |-
          GOOGLE_APPLICATION_CREDENTIALS
        "value": |-
          /secret/gcp-credentials/user-gcp-sa.json
      - "name": |-
          CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
        "value": |-
          /secret/gcp-credentials/user-gcp-sa.json
      "image": |-
        google/cloud-sdk:latest
      "volumeMounts":
      - "mountPath": |-
          /secret/gcp-credentials
        "name": |-
          gcp-credentials-user-gcp-sa
    "inputs":
      "parameters":
      - "name": |-
          target_apis
    "metadata":
      "annotations":
        "pipelines.kubeflow.org/component_spec": |-
          {"inputs": [{"name": "target_apis", "type": "String"}], "name": "Verfiy gcp apis", "outputs": [{"name": "Output", "type": "Boolean"}]}
    "name": |-
      verfiy-gcp-apis
    "outputs":
      "artifacts":
      - "name": |-
          verfiy-gcp-apis-output
        "path": |-
          /tmp/outputs/Output/data
    "volumes":
    - "name": |-
        gcp-credentials-user-gcp-sa
      "secret":
        "secretName": |-
          user-gcp-sa
