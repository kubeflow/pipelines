# Copyright 2021 The Kubeflow Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: tabnet_trainer
description: |
  Launch a TabNet custom training job using Vertex CustomJob API.

    Args:
        project (str):
            Required. The GCP project that runs the pipeline components.
        location (str):
            Required. The GCP region that runs the pipeline components.
        root_dir (str):
            Required. The root GCS directory for the pipeline components.
        target_column (str):
            Required. The target column name.
        prediction_type (str):
            Required. The type of prediction the model is to produce.
            "classification" or "regression".
        weight_column (Optional[str]):
            The weight column name.
        max_steps (Optional[int]):
            Number of steps to run the trainer for.
        max_train_secs (Optional[int]):
            Amount of time in seconds to run the trainer for.
        learning_rate (float):
            The learning rate used by the linear optimizer.
        large_category_dim (Optional[int]):
            Embedding dimension for categorical feature with large number of categories.
        large_category_thresh (Optional[int]):
            Threshold for number of categories to apply large_category_dim embedding dimension to.
        yeo_johnson_transform (Optional[bool]):
            Enables trainable Yeo-Johnson power transform.
        feature_dim (Optional[int]):
            Dimensionality of the hidden representation in feature transformation block.
        feature_dim_ratio (Optional[float]):
            The ratio of output dimension (dimensionality of the
            outputs of each decision step) to feature dimension.
        num_decision_steps (Optional[int]):
            Number of sequential decision steps.
        relaxation_factor (Optional[float]):
            Relaxation factor that promotes the reuse of each feature
            at different decision steps. When it is 1, a feature is enforced to be
            used only at one decision step and as it increases, more flexibility is provided to use
            a feature at multiple decision steps.
        decay_every (Optional[float]):
            Number of iterations for periodically applying learning rate decaying.
        decay_rate (Optional[float]):
            Learning rate decaying.
        gradient_thresh (Optional[float]):
            Threshold for the norm of gradients for clipping.
        sparsity_loss_weight (Optional[float]):
            Weight of the loss for sparsity regularization
            (increasing it will yield more sparse feature selection).
        batch_momentum (Optional[float]):
            Momentum in ghost batch normalization.
        batch_size_ratio (Optional[float]):
            The ratio of virtual batch size (size of the ghost batch normalization) to batch size.
        num_transformer_layers (Optional[int]):
            The number of transformer layers for each decision step.
            used only at one decision step and as it increases, more flexibility is provided to use
            a feature at multiple decision steps.
        num_transformer_layers_ratio (Optional[float]):
            The ratio of shared transformer layer to transformer layers.
        class_weight (Optional[float]):
            The class weight is used to computes a weighted cross
            entropy which is helpful in classify imbalanced dataset. Only used for classification.
        loss_function_type (Optional[str]):
            Loss function type. Loss function in classification
            [cross_entropy, weighted_cross_entropy, focal_loss], default is cross_entropy.
            Loss function in regression: [rmse, mae, mse], default is mse.
        alpha_focal_loss (Optional[float]):
            Alpha value (balancing factor) in focal_loss function. Only used for classification.
        gamma_focal_loss (Optional[float]):
            Gamma value (modulating factor) for focal loss for focal loss. Only used for classification.
        enable_profiler (Optional[bool]):
            Enables profiling and saves a trace during evaluation.
        cache_data (Optional[str]):
            Whether to cache data or not. If set to 'auto', caching is
            determined based on the dataset size.
        seed (Optional[int]):
            Seed to be used for this run.
        eval_steps (Optional[int]):
            Number of steps to run evaluation for. If not
            specified or negative, it means run evaluation on the whole validation
            dataset. If set to 0, it means run evaluation for a fixed number of samples.
        batch_size (Optional[int]):
            Batch size for training.
        measurement_selection_type (Optional[str]):
            Which measurement to use if/when the service automatically
            selects the final measurement from previously
            reported intermediate measurements. One of "BEST_MEASUREMENT" or
            "LAST_MEASUREMENT".
        optimization_metric (Optional[str]):
            Optimization metric used for `measurement_selection_type`.
            Default is "rmse" for regression and "auc" for classification.
        eval_frequency_secs (Optional[int]):
            Frequency at which evaluation and checkpointing will take place.
        training_machine_spec (Optional[Dict[str, Any]]):
            The training machine spec. See https://cloud.google.com/compute/docs/machine-types for options.
        training_disk_spec (Optional[Dict[str, Any]]):
            The training disk spec.
        instance_baseline (AutoMLTabularInstanceBaseline):
            The path to a JSON file for baseline values.
        metadata (TabularExampleGenMetadata):
            Amount of time in seconds to run the trainer for.
        materialized_train_split (MaterializedSplit):
            The path to the materialized train split.
        materialized_eval_split (MaterializedSplit):
            The path to the materialized validation split.
        transform_output (TransformOutput):
            The path to transform output.
        training_schema_uri (TrainingSchema):
            The path to the training schema.
        encryption_spec_key_name (Optional[str]):
            The KMS key name.

    Returns:
        gcp_resources (str):
            Serialized gcp_resources proto tracking the custom training job.
        unmanaged_container_model (google.UnmanagedContainerModel):
            The UnmanagedContainerModel artifact.

# LINT.IfChange
inputs:
  - { name: project, type: String }
  - { name: location, type: String }
  - { name: root_dir, type: String }
  - { name: target_column, type: String }
  - { name: prediction_type, type: String }
  - { name: weight_column, type: String, default: "" }
  - { name: max_steps, type: Integer, default: -1 }
  - { name: max_train_secs, type: Integer, default: -1 }
  - { name: learning_rate, type: Float }
  - { name: large_category_dim, type: Integer, default: 1 }
  - { name: large_category_thresh, type: Integer, default: 300 }
  - { name: yeo_johnson_transform, type: Boolean, default: "true" }
  - { name: feature_dim, type: Integer, default: 64 }
  - { name: feature_dim_ratio, type: Float, default: 0.5 }
  - { name: num_decision_steps, type: Integer, default: 6 }
  - { name: relaxation_factor, type: Float, default: 1.5 }
  - { name: decay_every, type: Float, default: 100}
  - { name: decay_rate, type: Float, default: 0.95}
  - { name: gradient_thresh, type: Float, default: 2000 }
  - { name: sparsity_loss_weight, type: Float, default: 0.00001 }
  - { name: batch_momentum, type: Float, default: 0.95 }
  - { name: batch_size_ratio, type: Float, default: 0.25 }
  - { name: num_transformer_layers, type: Integer, default: 4 }
  - { name: num_transformer_layers_ratio, type: Float, default: 0.25 }
  - { name: class_weight, type: Float, default: 1.0 }
  - { name: loss_function_type, type: String, default: 'default' }
  - { name: alpha_focal_loss, type: Float, default: 0.25 }
  - { name: gamma_focal_loss, type: Float, default: 2.0 }
  - { name: enable_profiler, type: Boolean, default: "false" }
  - { name: cache_data, type: String, default: "auto" }
  - { name: seed, type: Integer, default: 1 }
  - { name: eval_steps, type: Integer, default: 0 }
  - { name: batch_size, type: Integer, default: 100 }
  - { name: measurement_selection_type, type: String, default: "BEST_MEASUREMENT" }
  - { name: optimization_metric, type: String, default: "" }
  - { name: eval_frequency_secs, type: Integer, default: 600 }
  - { name: training_machine_spec, type: JsonObject, default: '{"machine_type": "c2-standard-16"}' }
  - { name: training_disk_spec, type: JsonObject, default: '{"boot_disk_type": "pd-ssd", "boot_disk_size_gb": 100}' }
  - { name: instance_baseline, type: AutoMLTabularInstanceBaseline }
  - { name: metadata, type: TabularExampleGenMetadata }
  - { name: materialized_train_split, type: MaterializedSplit }
  - { name: materialized_eval_split, type: MaterializedSplit }
  - { name: transform_output, type: TransformOutput }
  - { name: training_schema_uri, type: DatasetSchema }
  - { name: encryption_spec_key_name, type: String, default: "" }

outputs:
  - { name: gcp_resources, type: String }
  - { name: unmanaged_container_model, type: google.UnmanagedContainerModel }
# LINT.ThenChange(//depot/google3/java/com/google/cloud/ai/platform/boq/shared/tasks/pipelinejob/tabularusagemetricshelper/TabNetTrainerComponentMetricsHelper.java)

implementation:
  container:
    image: gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.32
    command: [python3, -u, -m, google_cloud_pipeline_components.container.v1.custom_job.launcher]
    args: [
      --type, CustomJob,
      --project, { inputValue: project },
      --location, { inputValue: location },
      --gcp_resources, { outputPath: gcp_resources },
      --payload,
      concat: [
          '{"display_name": "tabnet-trainer-{{$.pipeline_job_uuid}}-{{$.pipeline_task_uuid}}", "encryption_spec": {"kms_key_name":"',
          { inputValue: encryption_spec_key_name },
          '"}, "job_spec": {"worker_pool_specs": [{"replica_count":"',
          '1',
          '", "machine_spec": ',
          { inputValue: training_machine_spec },
          ', "disk_spec": ',
          { inputValue: training_disk_spec },
          ', "container_spec": {"image_uri":"',
          'us-docker.pkg.dev/vertex-ai-restricted/automl-tabular/tabnet-training:20230424_1325',
          '", "args": ["--target_column=',
          { inputValue: target_column },
          '", "--weight_column=',
          { inputValue: weight_column },
          '", "--model_type=',
          { inputValue: prediction_type },
          '", "--prediction_docker_uri=',
          'us-docker.pkg.dev/vertex-ai/automl-tabular/prediction-server:20230424_1325',
          '", "--baseline_path=',
          { inputUri: instance_baseline },
          '", "--metadata_path=',
          { inputUri: metadata },
          '", "--transform_output_path=',
          { inputUri: transform_output },
          '", "--training_schema_path=',
          { inputUri: training_schema_uri },
          '", "--job_dir=',
          { inputValue: root_dir },
          '/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/train", "--training_data_path=',
          { inputUri: materialized_train_split },
          '", "--validation_data_path=',
          { inputUri: materialized_eval_split },
          '", "--max_steps=',
          { inputValue: max_steps },
          '", "--max_train_secs=',
          { inputValue: max_train_secs },
          '", "--learning_rate=',
          { inputValue: learning_rate },
          '", "--large_category_dim=',
          { inputValue: large_category_dim },
          '", "--large_category_thresh=',
          { inputValue: large_category_thresh },
          '", "--yeo_johnson_transform=',
          { inputValue: yeo_johnson_transform },
          '", "--feature_dim=',
          { inputValue: feature_dim },
          '", "--feature_dim_ratio=',
          { inputValue: feature_dim_ratio },
          '", "--num_decision_steps=',
          { inputValue: num_decision_steps },
          '", "--relaxation_factor=',
          { inputValue: relaxation_factor },
          '", "--decay_every=',
          { inputValue: decay_every },
          '", "--decay_rate=',
          { inputValue: decay_rate },
          '", "--gradient_thresh=',
          { inputValue: gradient_thresh },
          '", "--sparsity_loss_weight=',
          { inputValue: sparsity_loss_weight },
          '", "--batch_momentum=',
          { inputValue: batch_momentum },
           '", "--batch_size_ratio=',
          { inputValue: batch_size_ratio },
          '", "--num_transformer_layers=',
          { inputValue: num_transformer_layers },
          '", "--num_transformer_layers_ratio=',
          { inputValue: num_transformer_layers_ratio },
          '", "--class_weight=',
          { inputValue: class_weight },
          '", "--loss_function_type=',
          { inputValue: loss_function_type },
          '", "--alpha_focal_loss=',
          { inputValue: alpha_focal_loss },
          '", "--gamma_focal_loss=',
          { inputValue: gamma_focal_loss },
          '", "--enable_profiler=',
          { inputValue: enable_profiler },
          '", "--cache_data=',
          { inputValue: cache_data },
          '", "--seed=',
          { inputValue: seed },
          '", "--eval_steps=',
          { inputValue: eval_steps },
          '", "--batch_size=',
          { inputValue: batch_size },
          '", "--measurement_selection_type=',
          { inputValue: measurement_selection_type },
          '", "--optimization_metric=',
          { inputValue: optimization_metric },
          '", "--eval_frequency_secs=',
          { inputValue: eval_frequency_secs },
          '", "--generate_feature_importance=true", "--executor_input={{$.json_escape[1]}}"]}}]}}',
      ]]
