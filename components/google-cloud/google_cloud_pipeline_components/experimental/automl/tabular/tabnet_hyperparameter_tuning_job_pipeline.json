{
  "pipelineSpec": {
    "components": {
      "comp-automl-tabular-builtin-algorithm-hyperparameter-tuning-job": {
        "executorLabel": "exec-automl-tabular-builtin-algorithm-hyperparameter-tuning-job",
        "inputDefinitions": {
          "artifacts": {
            "instance_baseline": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "materialized_eval_split": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "materialized_test_split": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "materialized_train_split": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "metadata": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "training_schema_uri": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "transform_output": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "enable_profiler": {
              "type": "STRING"
            },
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "eval_frequency_secs": {
              "type": "INT"
            },
            "eval_steps": {
              "type": "INT"
            },
            "location": {
              "type": "STRING"
            },
            "machine_spec": {
              "type": "STRING"
            },
            "max_failed_trial_count": {
              "type": "INT"
            },
            "max_trial_count": {
              "type": "INT"
            },
            "parallel_trial_count": {
              "type": "INT"
            },
            "prediction_type": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "replica_count": {
              "type": "INT"
            },
            "root_dir": {
              "type": "STRING"
            },
            "seed": {
              "type": "INT"
            },
            "study_spec_algorithm": {
              "type": "STRING"
            },
            "study_spec_measurement_selection_type": {
              "type": "STRING"
            },
            "study_spec_metrics": {
              "type": "STRING"
            },
            "study_spec_parameters_override": {
              "type": "STRING"
            },
            "tabnet": {
              "type": "STRING"
            },
            "target_column": {
              "type": "STRING"
            },
            "weight_column": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            },
            "instance_schema_uri": {
              "type": "STRING"
            },
            "prediction_docker_uri_output": {
              "type": "STRING"
            },
            "prediction_schema_uri": {
              "type": "STRING"
            },
            "trials": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-automl-tabular-finalizer": {
        "executorLabel": "exec-automl-tabular-finalizer",
        "inputDefinitions": {
          "parameters": {
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "root_dir": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-automl-tabular-transform": {
        "executorLabel": "exec-automl-tabular-transform",
        "inputDefinitions": {
          "artifacts": {
            "dataset_schema": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "eval_split": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "metadata": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "test_split": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "train_split": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "dataflow_disk_size_gb": {
              "type": "INT"
            },
            "dataflow_machine_type": {
              "type": "STRING"
            },
            "dataflow_max_num_workers": {
              "type": "INT"
            },
            "dataflow_subnetwork": {
              "type": "STRING"
            },
            "dataflow_use_public_ips": {
              "type": "STRING"
            },
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "root_dir": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "materialized_eval_split": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "materialized_test_split": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "materialized_train_split": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "training_schema_uri": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "transform_output": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-exit-handler-1": {
        "dag": {
          "tasks": {
            "automl-tabular-builtin-algorithm-hyperparameter-tuning-job": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-automl-tabular-builtin-algorithm-hyperparameter-tuning-job"
              },
              "dependentTasks": [
                "automl-tabular-transform",
                "get-tabnet-study-spec-parameters",
                "tabular-stats-and-example-gen"
              ],
              "inputs": {
                "artifacts": {
                  "instance_baseline": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "instance_baseline",
                      "producerTask": "tabular-stats-and-example-gen"
                    }
                  },
                  "materialized_eval_split": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "materialized_eval_split",
                      "producerTask": "automl-tabular-transform"
                    }
                  },
                  "materialized_test_split": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "materialized_test_split",
                      "producerTask": "automl-tabular-transform"
                    }
                  },
                  "materialized_train_split": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "materialized_train_split",
                      "producerTask": "automl-tabular-transform"
                    }
                  },
                  "metadata": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "metadata",
                      "producerTask": "tabular-stats-and-example-gen"
                    }
                  },
                  "training_schema_uri": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "training_schema_uri",
                      "producerTask": "automl-tabular-transform"
                    }
                  },
                  "transform_output": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "transform_output",
                      "producerTask": "automl-tabular-transform"
                    }
                  }
                },
                "parameters": {
                  "enable_profiler": {
                    "componentInputParameter": "pipelineparam--enable_profiler"
                  },
                  "encryption_spec_key_name": {
                    "componentInputParameter": "pipelineparam--encryption_spec_key_name"
                  },
                  "eval_frequency_secs": {
                    "componentInputParameter": "pipelineparam--eval_frequency_secs"
                  },
                  "eval_steps": {
                    "componentInputParameter": "pipelineparam--eval_steps"
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "machine_spec": {
                    "componentInputParameter": "pipelineparam--training_machine_spec"
                  },
                  "max_failed_trial_count": {
                    "componentInputParameter": "pipelineparam--max_failed_trial_count"
                  },
                  "max_trial_count": {
                    "componentInputParameter": "pipelineparam--max_trial_count"
                  },
                  "parallel_trial_count": {
                    "componentInputParameter": "pipelineparam--parallel_trial_count"
                  },
                  "prediction_type": {
                    "componentInputParameter": "pipelineparam--prediction_type"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "replica_count": {
                    "componentInputParameter": "pipelineparam--training_replica_count"
                  },
                  "root_dir": {
                    "componentInputParameter": "pipelineparam--root_dir"
                  },
                  "seed": {
                    "componentInputParameter": "pipelineparam--seed"
                  },
                  "study_spec_algorithm": {
                    "componentInputParameter": "pipelineparam--study_spec_algorithm"
                  },
                  "study_spec_measurement_selection_type": {
                    "componentInputParameter": "pipelineparam--study_spec_measurement_selection_type"
                  },
                  "study_spec_metrics": {
                    "componentInputParameter": "pipelineparam--study_spec_metrics"
                  },
                  "study_spec_parameters_override": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "get-tabnet-study-spec-parameters"
                    }
                  },
                  "tabnet": {
                    "componentInputParameter": "pipelineparam--tabnet"
                  },
                  "target_column": {
                    "componentInputParameter": "pipelineparam--target_column"
                  },
                  "weight_column": {
                    "componentInputParameter": "pipelineparam--weight_column"
                  }
                }
              },
              "taskInfo": {
                "name": "automl-tabular-builtin-algorithm-hyperparameter-tuning-job"
              }
            },
            "automl-tabular-transform": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-automl-tabular-transform"
              },
              "dependentTasks": [
                "tabular-stats-and-example-gen"
              ],
              "inputs": {
                "artifacts": {
                  "dataset_schema": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "dataset_schema",
                      "producerTask": "tabular-stats-and-example-gen"
                    }
                  },
                  "eval_split": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "eval_split",
                      "producerTask": "tabular-stats-and-example-gen"
                    }
                  },
                  "metadata": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "metadata",
                      "producerTask": "tabular-stats-and-example-gen"
                    }
                  },
                  "test_split": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "test_split",
                      "producerTask": "tabular-stats-and-example-gen"
                    }
                  },
                  "train_split": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "train_split",
                      "producerTask": "tabular-stats-and-example-gen"
                    }
                  }
                },
                "parameters": {
                  "dataflow_disk_size_gb": {
                    "componentInputParameter": "pipelineparam--transform_dataflow_disk_size_gb"
                  },
                  "dataflow_machine_type": {
                    "componentInputParameter": "pipelineparam--transform_dataflow_machine_type"
                  },
                  "dataflow_max_num_workers": {
                    "componentInputParameter": "pipelineparam--transform_dataflow_max_num_workers"
                  },
                  "dataflow_subnetwork": {
                    "componentInputParameter": "pipelineparam--dataflow_subnetwork"
                  },
                  "dataflow_use_public_ips": {
                    "componentInputParameter": "pipelineparam--dataflow_use_public_ips"
                  },
                  "encryption_spec_key_name": {
                    "componentInputParameter": "pipelineparam--encryption_spec_key_name"
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "root_dir": {
                    "componentInputParameter": "pipelineparam--root_dir"
                  }
                }
              },
              "taskInfo": {
                "name": "automl-tabular-transform"
              }
            },
            "get-best-hyperparameter-tuning-job-trial": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-get-best-hyperparameter-tuning-job-trial"
              },
              "dependentTasks": [
                "automl-tabular-builtin-algorithm-hyperparameter-tuning-job"
              ],
              "inputs": {
                "parameters": {
                  "gcp_resources": {
                    "taskOutputParameter": {
                      "outputParameterKey": "gcp_resources",
                      "producerTask": "automl-tabular-builtin-algorithm-hyperparameter-tuning-job"
                    }
                  },
                  "instance_schema_uri": {
                    "taskOutputParameter": {
                      "outputParameterKey": "instance_schema_uri",
                      "producerTask": "automl-tabular-builtin-algorithm-hyperparameter-tuning-job"
                    }
                  },
                  "prediction_docker_uri": {
                    "taskOutputParameter": {
                      "outputParameterKey": "prediction_docker_uri_output",
                      "producerTask": "automl-tabular-builtin-algorithm-hyperparameter-tuning-job"
                    }
                  },
                  "prediction_schema_uri": {
                    "taskOutputParameter": {
                      "outputParameterKey": "prediction_schema_uri",
                      "producerTask": "automl-tabular-builtin-algorithm-hyperparameter-tuning-job"
                    }
                  },
                  "study_spec_metrics": {
                    "componentInputParameter": "pipelineparam--study_spec_metrics"
                  },
                  "trials_dir": {
                    "taskOutputParameter": {
                      "outputParameterKey": "trials",
                      "producerTask": "automl-tabular-builtin-algorithm-hyperparameter-tuning-job"
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "get-best-hyperparameter-tuning-job-trial"
              }
            },
            "get-tabnet-study-spec-parameters": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-get-tabnet-study-spec-parameters"
              },
              "dependentTasks": [
                "tabular-stats-and-example-gen"
              ],
              "inputs": {
                "artifacts": {
                  "metadata": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "metadata",
                      "producerTask": "tabular-stats-and-example-gen"
                    }
                  }
                },
                "parameters": {
                  "max_trial_count": {
                    "componentInputParameter": "pipelineparam--max_trial_count"
                  },
                  "prediction_type": {
                    "componentInputParameter": "pipelineparam--prediction_type"
                  },
                  "study_spec_parameters_override": {
                    "componentInputParameter": "pipelineparam--study_spec_parameters_override"
                  }
                }
              },
              "taskInfo": {
                "name": "get-tabnet-study-spec-parameters"
              }
            },
            "model-upload": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-upload"
              },
              "dependentTasks": [
                "get-best-hyperparameter-tuning-job-trial"
              ],
              "inputs": {
                "artifacts": {
                  "unmanaged_container_model": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "unmanaged_container_model",
                      "producerTask": "get-best-hyperparameter-tuning-job-trial"
                    }
                  }
                },
                "parameters": {
                  "artifact_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "description": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "display_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "automl-tabular-model-upload-{{$.pipeline_job_uuid}}-{{$.pipeline_task_uuid}}"
                      }
                    }
                  },
                  "encryption_spec_key_name": {
                    "componentInputParameter": "pipelineparam--encryption_spec_key_name"
                  },
                  "explanation_metadata": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "explanation_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "instance_schema_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "parameters_schema_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "prediction_schema_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "serving_container_args": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "serving_container_command": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "serving_container_environment_variables": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "serving_container_health_route": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "serving_container_image_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "serving_container_ports": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "serving_container_predict_route": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "model-upload"
              }
            },
            "tabular-stats-and-example-gen": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-tabular-stats-and-example-gen"
              },
              "inputs": {
                "parameters": {
                  "additional_experiments": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "data_source": {
                    "componentInputParameter": "pipelineparam--data_source"
                  },
                  "dataflow_disk_size_gb": {
                    "componentInputParameter": "pipelineparam--stats_and_example_gen_dataflow_disk_size_gb"
                  },
                  "dataflow_machine_type": {
                    "componentInputParameter": "pipelineparam--stats_and_example_gen_dataflow_machine_type"
                  },
                  "dataflow_max_num_workers": {
                    "componentInputParameter": "pipelineparam--stats_and_example_gen_dataflow_max_num_workers"
                  },
                  "dataflow_subnetwork": {
                    "componentInputParameter": "pipelineparam--dataflow_subnetwork"
                  },
                  "dataflow_use_public_ips": {
                    "componentInputParameter": "pipelineparam--dataflow_use_public_ips"
                  },
                  "encryption_spec_key_name": {
                    "componentInputParameter": "pipelineparam--encryption_spec_key_name"
                  },
                  "is_distill": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "false"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--location"
                  },
                  "optimization_objective": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "optimization_objective_precision_value": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "-1"
                      }
                    }
                  },
                  "optimization_objective_recall_value": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "-1"
                      }
                    }
                  },
                  "prediction_type": {
                    "componentInputParameter": "pipelineparam--prediction_type"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "root_dir": {
                    "componentInputParameter": "pipelineparam--root_dir"
                  },
                  "split_spec": {
                    "componentInputParameter": "pipelineparam--split_spec"
                  },
                  "target_column_name": {
                    "componentInputParameter": "pipelineparam--target_column"
                  },
                  "transformations": {
                    "componentInputParameter": "pipelineparam--transformations"
                  },
                  "weight_column_name": {
                    "componentInputParameter": "pipelineparam--weight_column"
                  }
                }
              },
              "taskInfo": {
                "name": "tabular-stats-and-example-gen"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--data_source": {
              "type": "STRING"
            },
            "pipelineparam--dataflow_subnetwork": {
              "type": "STRING"
            },
            "pipelineparam--dataflow_use_public_ips": {
              "type": "STRING"
            },
            "pipelineparam--enable_profiler": {
              "type": "STRING"
            },
            "pipelineparam--encryption_spec_key_name": {
              "type": "STRING"
            },
            "pipelineparam--eval_frequency_secs": {
              "type": "INT"
            },
            "pipelineparam--eval_steps": {
              "type": "INT"
            },
            "pipelineparam--location": {
              "type": "STRING"
            },
            "pipelineparam--max_failed_trial_count": {
              "type": "INT"
            },
            "pipelineparam--max_trial_count": {
              "type": "INT"
            },
            "pipelineparam--parallel_trial_count": {
              "type": "INT"
            },
            "pipelineparam--prediction_type": {
              "type": "STRING"
            },
            "pipelineparam--project": {
              "type": "STRING"
            },
            "pipelineparam--root_dir": {
              "type": "STRING"
            },
            "pipelineparam--seed": {
              "type": "INT"
            },
            "pipelineparam--split_spec": {
              "type": "STRING"
            },
            "pipelineparam--stats_and_example_gen_dataflow_disk_size_gb": {
              "type": "INT"
            },
            "pipelineparam--stats_and_example_gen_dataflow_machine_type": {
              "type": "STRING"
            },
            "pipelineparam--stats_and_example_gen_dataflow_max_num_workers": {
              "type": "INT"
            },
            "pipelineparam--study_spec_algorithm": {
              "type": "STRING"
            },
            "pipelineparam--study_spec_measurement_selection_type": {
              "type": "STRING"
            },
            "pipelineparam--study_spec_metrics": {
              "type": "STRING"
            },
            "pipelineparam--study_spec_parameters_override": {
              "type": "STRING"
            },
            "pipelineparam--tabnet": {
              "type": "STRING"
            },
            "pipelineparam--target_column": {
              "type": "STRING"
            },
            "pipelineparam--training_machine_spec": {
              "type": "STRING"
            },
            "pipelineparam--training_replica_count": {
              "type": "INT"
            },
            "pipelineparam--transform_dataflow_disk_size_gb": {
              "type": "INT"
            },
            "pipelineparam--transform_dataflow_machine_type": {
              "type": "STRING"
            },
            "pipelineparam--transform_dataflow_max_num_workers": {
              "type": "INT"
            },
            "pipelineparam--transformations": {
              "type": "STRING"
            },
            "pipelineparam--weight_column": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-get-best-hyperparameter-tuning-job-trial": {
        "executorLabel": "exec-get-best-hyperparameter-tuning-job-trial",
        "inputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            },
            "instance_schema_uri": {
              "type": "STRING"
            },
            "prediction_docker_uri": {
              "type": "STRING"
            },
            "prediction_schema_uri": {
              "type": "STRING"
            },
            "study_spec_metrics": {
              "type": "STRING"
            },
            "trials_dir": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "unmanaged_container_model": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-get-tabnet-study-spec-parameters": {
        "executorLabel": "exec-get-tabnet-study-spec-parameters",
        "inputDefinitions": {
          "artifacts": {
            "metadata": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "max_trial_count": {
              "type": "INT"
            },
            "prediction_type": {
              "type": "STRING"
            },
            "study_spec_parameters_override": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-upload": {
        "executorLabel": "exec-model-upload",
        "inputDefinitions": {
          "artifacts": {
            "unmanaged_container_model": {
              "artifactType": {
                "schemaTitle": "google.UnmanagedContainerModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "artifact_uri": {
              "type": "STRING"
            },
            "description": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "instance_schema_uri": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "parameters_schema_uri": {
              "type": "STRING"
            },
            "prediction_schema_uri": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "serving_container_args": {
              "type": "STRING"
            },
            "serving_container_command": {
              "type": "STRING"
            },
            "serving_container_environment_variables": {
              "type": "STRING"
            },
            "serving_container_health_route": {
              "type": "STRING"
            },
            "serving_container_image_uri": {
              "type": "STRING"
            },
            "serving_container_ports": {
              "type": "STRING"
            },
            "serving_container_predict_route": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-tabular-stats-and-example-gen": {
        "executorLabel": "exec-tabular-stats-and-example-gen",
        "inputDefinitions": {
          "parameters": {
            "additional_experiments": {
              "type": "STRING"
            },
            "data_source": {
              "type": "STRING"
            },
            "dataflow_disk_size_gb": {
              "type": "INT"
            },
            "dataflow_machine_type": {
              "type": "STRING"
            },
            "dataflow_max_num_workers": {
              "type": "INT"
            },
            "dataflow_subnetwork": {
              "type": "STRING"
            },
            "dataflow_use_public_ips": {
              "type": "STRING"
            },
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "is_distill": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "optimization_objective": {
              "type": "STRING"
            },
            "optimization_objective_precision_value": {
              "type": "DOUBLE"
            },
            "optimization_objective_recall_value": {
              "type": "DOUBLE"
            },
            "prediction_type": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "root_dir": {
              "type": "STRING"
            },
            "split_spec": {
              "type": "STRING"
            },
            "target_column_name": {
              "type": "STRING"
            },
            "transformations": {
              "type": "STRING"
            },
            "weight_column_name": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset_schema": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "dataset_stats": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "eval_split": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "instance_baseline": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "metadata": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "test_split": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "train_split": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "downsampled_test_split_json": {
              "type": "STRING"
            },
            "gcp_resources": {
              "type": "STRING"
            },
            "test_split_json": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-automl-tabular-builtin-algorithm-hyperparameter-tuning-job": {
          "container": {
            "args": [
              "--type",
              "HyperparameterTuningJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--payload",
              "{\"display_name\": \"automl-tabular-builtin-algorithm-hyperparameter-tuning-job-{{$.pipeline_job_uuid}}-{{$.pipeline_task_uuid}}\", \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}, \"study_spec\": {\"metrics\": {{$.inputs.parameters['study_spec_metrics']}}, \"parameters\": {{$.inputs.parameters['study_spec_parameters_override']}}, \"algorithm\": \"{{$.inputs.parameters['study_spec_algorithm']}}\", \"measurement_selection_type\": \"{{$.inputs.parameters['study_spec_measurement_selection_type']}}\"}, \"max_trial_count\": {{$.inputs.parameters['max_trial_count']}}, \"parallel_trial_count\": {{$.inputs.parameters['parallel_trial_count']}}, \"max_failed_trial_count\": {{$.inputs.parameters['max_failed_trial_count']}}, \"trial_job_spec\": {\"worker_pool_specs\": [{\"replica_count\":\"{{$.inputs.parameters['replica_count']}}\", \"machine_spec\": {{$.inputs.parameters['machine_spec']}}, \"container_spec\": {\"image_uri\":\"us-docker.pkg.dev/vertex-ai-restricted/automl-tabular/tabnet-training:prod\", \"args\": [\"--target_column={{$.inputs.parameters['target_column']}}\", \"--weight_column={{$.inputs.parameters['weight_column']}}\", \"--model_type={{$.inputs.parameters['prediction_type']}}\", \"--prediction_docker_uri=us-docker.pkg.dev/vertex-ai/automl-tabular/prediction-server:prod\", \"--prediction_docker_uri_artifact_path={{$.outputs.parameters['prediction_docker_uri_output'].output_file}}\", \"--baseline_path={{$.inputs.artifacts['instance_baseline'].uri}}\", \"--metadata_path={{$.inputs.artifacts['metadata'].uri}}\", \"--transform_output_path={{$.inputs.artifacts['transform_output'].uri}}\", \"--training_schema_path={{$.inputs.artifacts['training_schema_uri'].uri}}\", \"--instance_schema_path={{$.outputs.parameters['instance_schema_uri'].output_file}}\", \"--prediction_schema_path={{$.outputs.parameters['prediction_schema_uri'].output_file}}\", \"--trials_path={{$.outputs.parameters['trials'].output_file}}\", \"--job_dir={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/train\", \"--training_data_path={{$.inputs.artifacts['materialized_train_split'].uri}}\", \"--validation_data_path={{$.inputs.artifacts['materialized_eval_split'].uri}}\", \"--test_data_path={{$.inputs.artifacts['materialized_test_split'].uri}}\", \"--enable_profiler={{$.inputs.parameters['enable_profiler']}}\", \"--seed={{$.inputs.parameters['seed']}}\", \"--eval_steps={{$.inputs.parameters['eval_steps']}}\", \"--eval_frequency_secs={{$.inputs.parameters['eval_frequency_secs']}}\"]}}]}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.6"
          }
        },
        "exec-automl-tabular-finalizer": {
          "container": {
            "args": [
              "--type",
              "CustomJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--payload",
              "{\"display_name\": \"automl-tabular-finalizer-{{$.pipeline_job_uuid}}-{{$.pipeline_task_uuid}}\", \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}, \"job_spec\": {\"worker_pool_specs\": [{\"replica_count\": 1, \"machine_spec\": {\"machine_type\": \"n1-standard-8\"}, \"container_spec\": {\"image_uri\":\"us-docker.pkg.dev/vertex-ai-restricted/automl-tabular/training:prod\", \"args\": [\"cancel_l2l_tuner\", \"--error_file_path={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/error.pb\", \"--cleanup_lro_job_infos={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/lro\"]}}]}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.6"
          }
        },
        "exec-automl-tabular-transform": {
          "container": {
            "args": [
              "--type",
              "CustomJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--payload",
              "{\"display_name\": \"automl-tabular-transform-{{$.pipeline_job_uuid}}-{{$.pipeline_task_uuid}}\", \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}, \"job_spec\": {\"worker_pool_specs\": [{\"replica_count\": 1, \"machine_spec\": {\"machine_type\": \"n1-standard-8\"}, \"container_spec\": {\"image_uri\":\"us-docker.pkg.dev/vertex-ai-restricted/automl-tabular/training:prod\", \"args\": [\"transform\", \"--transform_output_artifact_path={{$.outputs.artifacts['transform_output'].uri}}\", \"--transform_output_path={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/transform\", \"--materialized_splits_output_path={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/transform_materialized\", \"--metadata_path={{$.inputs.artifacts['metadata'].uri}}\", \"--dataset_schema_path={{$.inputs.artifacts['dataset_schema'].uri}}\", \"--train_split={{$.inputs.artifacts['train_split'].uri}}\", \"--eval_split={{$.inputs.artifacts['eval_split'].uri}}\", \"--test_split={{$.inputs.artifacts['test_split'].uri}}\", \"--materialized_train_split={{$.outputs.artifacts['materialized_train_split'].uri}}\", \"--materialized_eval_split={{$.outputs.artifacts['materialized_eval_split'].uri}}\", \"--materialized_test_split={{$.outputs.artifacts['materialized_test_split'].uri}}\", \"--training_schema_path={{$.outputs.artifacts['training_schema_uri'].uri}}\", \"--job_name=automl-tabular-transform-{{$.pipeline_job_uuid}}-{{$.pipeline_task_uuid}}\", \"--dataflow_project={{$.inputs.parameters['project']}}\", \"--error_file_path={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/error.pb\", \"--dataflow_staging_dir={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/dataflow_staging\", \"--dataflow_tmp_dir={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/dataflow_tmp\", \"--dataflow_max_num_workers={{$.inputs.parameters['dataflow_max_num_workers']}}\", \"--dataflow_machine_type={{$.inputs.parameters['dataflow_machine_type']}}\", \"--dataflow_worker_container_image=us-docker.pkg.dev/vertex-ai/automl-tabular/dataflow-worker:prod\", \"--dataflow_disk_size_gb={{$.inputs.parameters['dataflow_disk_size_gb']}}\", \"--dataflow_subnetwork_fully_qualified={{$.inputs.parameters['dataflow_subnetwork']}}\", \"--dataflow_use_public_ips={{$.inputs.parameters['dataflow_use_public_ips']}}\", \"--dataflow_kms_key={{$.inputs.parameters['encryption_spec_key_name']}}\"]}}]}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.6"
          }
        },
        "exec-get-best-hyperparameter-tuning-job-trial": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "_get_best_hyperparameter_tuning_job_trial"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform==1.9.0' 'google-cloud-pipeline-components==0.2.6' 'protobuf==3.16.0' 'kfp==1.8.11' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef _get_best_hyperparameter_tuning_job_trial(\n    gcp_resources: str, study_spec_metrics: list, trials_dir: str,\n    instance_schema_uri: str, prediction_schema_uri: str,\n    prediction_docker_uri: str,\n    unmanaged_container_model: dsl.Output[dsl.Artifact]):\n  \"\"\"Gets best HyperparameterTuningJob trial.\n\n  Args:\n    gcp_resources: Proto tracking the hyperparameter tuning job.\n    study_spec_metrics: List of dictionaries representing metrics to optimize.\n      The dictionary contains the metric_id, which is reported by the training\n      job, ands the optimization goal of the metric. One of \"minimize\" or\n      \"maximize\".\n    trials_dir: The path to the hyperparameter tuning trials.\n    instance_schema_uri: The instance schema uri.\n    prediction_schema_uri: The prediction schema_uri.\n    prediction_docker_uri: The prediction docker container uri\n    unmanaged_container_model: The unmanaged model.\n\n  Raises:\n    RuntimeError: If there are multiple metrics.\n  \"\"\"\n\n  import os\n  from google.api_core.retry import Retry\n  from google.cloud import aiplatform_v1beta1 as aip\n  from google_cloud_pipeline_components.proto.gcp_resources_pb2 import GcpResources\n  from google.protobuf import json_format\n\n  if len(study_spec_metrics) > 1:\n    raise RuntimeError('Unable to determine best trial for multi-objective'\n                       ' hyperparameter tuning.')\n\n  api_endpoint_suffix = '-aiplatform.googleapis.com'\n  gcp_resources_proto = json_format.Parse(gcp_resources, GcpResources())\n  gcp_resources_split = gcp_resources_proto.resources[0].resource_uri.partition(\n      'projects')\n  resource_name = gcp_resources_split[1] + gcp_resources_split[2]\n  prefix_str = gcp_resources_split[0]\n  prefix_str = prefix_str[:prefix_str.find(api_endpoint_suffix)]\n  api_endpoint = prefix_str[(prefix_str.rfind('//') + 2):] + api_endpoint_suffix\n\n  job_client = aip.JobServiceClient(\n      client_options={'api_endpoint': api_endpoint})\n  response = job_client.get_hyperparameter_tuning_job(\n      name=resource_name,\n      retry=Retry(initial=10.0, maximum=60.0, deadline=10.0 * 60.0))\n\n  # Get best trial\n  trials_list = []\n  for trial in response.trials:\n    trials_list.append({\n        'id': trial.id,\n        'objective_value': trial.final_measurement.metrics[0].value\n    })\n\n  best_trial = None\n  goal = study_spec_metrics[0]['goal']\n  best_fn = None\n  if goal == 'MAXIMIZE':\n    best_fn = max\n  elif goal == 'MINIMIZE':\n    best_fn = min\n  best_trial = best_fn(trials_list, key=lambda trial: trial['objective_value'])\n\n  # Build unmanaged_container_model\n  unmanaged_container_model.metadata['containerSpec'] = {\n      'imageUri': prediction_docker_uri\n  }\n  unmanaged_container_model.metadata['predictSchemata'] = {\n      'instanceSchemaUri': instance_schema_uri,\n      'predictionSchemaUri': prediction_schema_uri\n  }\n  unmanaged_container_model.uri = os.path.join(\n      trials_dir, 'trial_{}'.format(best_trial['id']), 'model')\n\n"
            ],
            "image": "python:3.7-slim"
          }
        },
        "exec-get-tabnet-study-spec-parameters": {
          "container": {
            "args": [
              "--metadata",
              "{{$.inputs.artifacts['metadata'].path}}",
              "--max-trial-count",
              "{{$.inputs.parameters['max_trial_count']}}",
              "--prediction-type",
              "{{$.inputs.parameters['prediction_type']}}",
              "--study-spec-parameters-override",
              "{{$.inputs.parameters['study_spec_parameters_override']}}",
              "----output-paths",
              "{{$.outputs.parameters['Output'].output_file}}"
            ],
            "command": [
              "sh",
              "-ec",
              "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n",
              "def get_tabnet_study_spec_parameters(\n    metadata,\n    max_trial_count,\n    prediction_type,\n    study_spec_parameters_override,  # Required for KFP validation; pylint:disable=g-bare-generic\n):\n  \"\"\"Get study_spec_parameters for a TabNet hyperparameter tuning job.\n\n  Args:\n    metadata: Metadata generated by example gen.\n    max_trial_count: The desired total number of trials.\n    prediction_type: The type of prediction the model is to produce.\n      'classification' or 'regression'.\n    study_spec_parameters_override: List of dictionaries representing parameters\n      to optimize. The dictionary key is the parameter_id, which is passed to\n      training job as a command line argument, and the dictionary value is the\n      parameter specification of the metric.\n\n  Returns:\n    List of final study_spec_parameters.\n  \"\"\"\n  # Define different search space constants\n  tabnet_params_small_data_small_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [5000, 10000, 15000, 20000, 25000, 30000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [512, 1024, 2048, 4096]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.0001,\n          'max_value': 0.02\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [5]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 50,\n          'max_value': 200\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.3,\n          'max_value': 0.7\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.2,\n          'max_value': 2.5\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 1000,\n          'max_value': 5000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 4\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.3,\n          'max_value': 0.7\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 100.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy']\n      }\n  }]\n  tabnet_params_small_data_medium_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [5000, 10000, 20000, 30000, 40000, 50000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [512, 1024, 2048, 4096]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.0001,\n          'max_value': 0.03\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [5]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 50,\n          'max_value': 200\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.2,\n          'max_value': 2.7\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 1000,\n          'max_value': 10000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.0625, 0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 100.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy', 'focal_loss']\n      }\n  }, {\n      'parameter_id': 'alpha_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.1, 0.25, 0.5, 0.75, 0.9, 0.99]\n      }\n  }, {\n      'parameter_id': 'gamma_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.0, 0.5, 1.0, 2.0, 3.0, 4.0]\n      }\n  }]\n  tabnet_params_small_data_large_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [10000, 20000, 30000, 40000, 50000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [512, 1024, 2048, 4096]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.00007,\n          'max_value': 0.03\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [3, 5, 10]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [5, 10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 50,\n          'max_value': 300\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 7\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.05,\n          'max_value': 3.2\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 1000,\n          'max_value': 10000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.0000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.0625, 0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 100.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy', 'focal_loss']\n      }\n  }, {\n      'parameter_id': 'alpha_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.1, 0.25, 0.5, 0.75, 0.9, 0.99]\n      }\n  }, {\n      'parameter_id': 'gamma_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.0, 0.5, 1.0, 2.0, 3.0, 4.0]\n      }\n  }]\n  tabnet_params_medium_data_small_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [10000, 20000, 30000, 40000, 50000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [1024, 4096, 8192, 16384]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.0001,\n          'max_value': 0.02\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [5]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 100,\n          'max_value': 300\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.3,\n          'max_value': 0.7\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.2,\n          'max_value': 2.5\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 10000,\n          'max_value': 50000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.0000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.0625, 0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.3,\n          'max_value': 0.7\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 100.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy']\n      }\n  }]\n  tabnet_params_medium_data_medium_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [5000, 10000, 20000, 30000, 40000, 50000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [1024, 2048, 4096, 8192, 16384]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.00007,\n          'max_value': 0.02\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [5]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 50,\n          'max_value': 400\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.2,\n          'max_value': 2.5\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 10000,\n          'max_value': 50000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.0000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.0625, 0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 4,\n          'max_value': 10\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 100.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy', 'focal_loss']\n      }\n  }, {\n      'parameter_id': 'alpha_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.1, 0.25, 0.5, 0.75, 0.9, 0.99]\n      }\n  }, {\n      'parameter_id': 'gamma_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.0, 0.5, 1.0, 2.0, 3.0, 4.0]\n      }\n  }]\n  tabnet_params_medium_data_large_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [50000, 60000, 70000, 80000, 90000, 100000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [1024, 2048, 4096, 8192, 16384]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.00007,\n          'max_value': 0.03\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [3, 5, 10]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [5, 10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 50,\n          'max_value': 500\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.05,\n          'max_value': 3.2\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 10000,\n          'max_value': 50000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.0000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.0625, 0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 4,\n          'max_value': 10\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 100.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy', 'focal_loss']\n      }\n  }, {\n      'parameter_id': 'alpha_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.1, 0.25, 0.5, 0.75, 0.9, 0.99]\n      }\n  }, {\n      'parameter_id': 'gamma_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.0, 0.5, 1.0, 2.0, 3.0, 4.0]\n      }\n  }]\n  tabnet_params_large_data_small_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [50000, 60000, 70000, 80000, 90000, 100000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [8192, 16384, 32768]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.0002,\n          'max_value': 0.02\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [5]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 100,\n          'max_value': 400\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 3,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.2,\n          'max_value': 2.5\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 10000,\n          'max_value': 50000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.0625, 0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 2,\n          'max_value': 6\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.3,\n          'max_value': 0.7\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 10.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy']\n      }\n  }]\n  tabnet_params_large_data_medium_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [50000, 60000, 70000, 80000, 90000, 100000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [4096, 8192, 16384, 32768]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.0001,\n          'max_value': 0.03\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [5]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 200,\n          'max_value': 500\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 3,\n          'max_value': 7\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.2,\n          'max_value': 2.5\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 10000,\n          'max_value': 50000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.0625, 0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 4,\n          'max_value': 8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 100.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy', 'focal_loss']\n      }\n  }, {\n      'parameter_id': 'alpha_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.1, 0.25, 0.5, 0.75, 0.9, 0.99]\n      }\n  }, {\n      'parameter_id': 'gamma_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.0, 0.5, 1.0, 2.0, 3.0, 4.0]\n      }\n  }]\n  tabnet_params_large_data_large_search_space = [{\n      'parameter_id': 'max_steps',\n      'discrete_value_spec': {\n          'values': [50000, 70000, 90000, 110000, 130000, 150000]\n      }\n  }, {\n      'parameter_id': 'max_train_secs',\n      'discrete_value_spec': {\n          'values': [-1]\n      }\n  }, {\n      'parameter_id': 'batch_size',\n      'discrete_value_spec': {\n          'values': [4096, 8192, 16384, 32768, 65536]\n      }\n  }, {\n      'parameter_id': 'learning_rate',\n      'double_value_spec': {\n          'min_value': 0.00007,\n          'max_value': 0.03\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'large_category_dim',\n      'discrete_value_spec': {\n          'values': [3, 5, 10]\n      }\n  }, {\n      'parameter_id': 'large_category_thresh',\n      'discrete_value_spec': {\n          'values': [5, 10]\n      }\n  }, {\n      'parameter_id': 'feature_dim',\n      'integer_value_spec': {\n          'min_value': 100,\n          'max_value': 700\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'feature_dim_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_decision_steps',\n      'integer_value_spec': {\n          'min_value': 3,\n          'max_value': 8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'relaxation_factor',\n      'double_value_spec': {\n          'min_value': 1.05,\n          'max_value': 3.2\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'decay_rate',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.999\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'decay_every',\n      'integer_value_spec': {\n          'min_value': 10000,\n          'max_value': 50000\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'sparsity_loss_weight',\n      'double_value_spec': {\n          'min_value': 0.0000001,\n          'max_value': 0.001\n      },\n      'scale_type': 'UNIT_LOG_SCALE'\n  }, {\n      'parameter_id': 'batch_momentum',\n      'double_value_spec': {\n          'min_value': 0.5,\n          'max_value': 0.95\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'batch_size_ratio',\n      'discrete_value_spec': {\n          'values': [0.0625, 0.125, 0.25, 0.5]\n      }\n  }, {\n      'parameter_id': 'num_transformer_layers',\n      'integer_value_spec': {\n          'min_value': 4,\n          'max_value': 10\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'num_transformer_layers_ratio',\n      'double_value_spec': {\n          'min_value': 0.2,\n          'max_value': 0.8\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'class_weight',\n      'double_value_spec': {\n          'min_value': 1.0,\n          'max_value': 100.0\n      },\n      'scale_type': 'UNIT_LINEAR_SCALE'\n  }, {\n      'parameter_id': 'loss_function_type',\n      'categorical_value_spec': {\n          'values': ['weighted_cross_entropy', 'focal_loss']\n      }\n  }, {\n      'parameter_id': 'alpha_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.1, 0.25, 0.5, 0.75, 0.9, 0.99]\n      }\n  }, {\n      'parameter_id': 'gamma_focal_loss',\n      'discrete_value_spec': {\n          'values': [0.0, 0.5, 1.0, 2.0, 3.0, 4.0]\n      }\n  }]\n  search_spaces = {\n      'tabnet_params_small_data_small_search_space':\n          tabnet_params_small_data_small_search_space,\n      'tabnet_params_small_data_medium_search_space':\n          tabnet_params_small_data_medium_search_space,\n      'tabnet_params_small_data_large_search_space':\n          tabnet_params_small_data_large_search_space,\n      'tabnet_params_medium_data_small_search_space':\n          tabnet_params_medium_data_small_search_space,\n      'tabnet_params_medium_data_medium_search_space':\n          tabnet_params_medium_data_medium_search_space,\n      'tabnet_params_medium_data_large_search_space':\n          tabnet_params_medium_data_large_search_space,\n      'tabnet_params_large_data_small_search_space':\n          tabnet_params_large_data_small_search_space,\n      'tabnet_params_large_data_medium_search_space':\n          tabnet_params_large_data_medium_search_space,\n      'tabnet_params_large_data_large_search_space':\n          tabnet_params_large_data_large_search_space,\n  }\n\n  # pylint: disable=g-import-not-at-top,import-outside-toplevel\n  import json\n  # pylint: enable=g-import-not-at-top,import-outside-toplevel\n  with open(metadata, 'r') as f:\n    metadata_path = f.read()\n    metadata = json.loads(metadata_path)\n  # Calculate dataset size bucket. One of 'small' (< 1M rows),\n  # 'medium' (1M - 100M rows), or 'large' (> 100M rows)\n  num_rows = metadata['num_examples']['train'] + metadata['num_examples'][\n      'valid'] + metadata['num_examples']['test']\n  dataset_size_bucket = 'medium'\n  if num_rows < 10000000:\n    dataset_size_bucket = 'small'\n  elif num_rows > 100000000:\n    dataset_size_bucket = 'large'\n\n  # Calculate search space bucket using max_trial_count.\n  # One of 'small' (< 10), medium (1 - 100), and large (> 100).\n  search_space = 'medium'\n  if max_trial_count < 10:\n    search_space = 'small'\n  elif max_trial_count > 100:\n    search_space = 'large'\n\n  # Get params for classification.\n  params = search_spaces[\n      f'tabnet_params_{dataset_size_bucket}_data_{search_space}_search_space']\n\n  # Format for regression. To get regression study_spec_parameters, we need\n  # to set `loss_function_type` to \u2018mae\u2019 (\u2018mae\u2019 and \u2018mse\u2019 for 'large'\n  # search space), remove the `alpha_focal_loss`, `gamma_focal_loss`\n  # and `class_weight` parameters and increase the max for\n  # `sparsity_loss_weight` to 100.\n  if prediction_type == 'regression':\n    formatted_params = []\n    for param in params:\n      if param['parameter_id'] in [\n          'alpha_focal_loss', 'gamma_focal_loss', 'class_weight'\n      ]:\n        continue\n      elif param['parameter_id'] == 'sparsity_loss_weight':\n        param['double_value_spec']['max_value'] = 100\n      elif param['parameter_id'] == 'loss_function_type':\n        if search_space == 'large':\n          param['categorical_value_spec']['values'] = ['mae', 'mse']\n        else:\n          param['categorical_value_spec']['values'] = ['mae']\n      formatted_params.append(param)\n  else:\n    formatted_params = params\n\n  # Create parameter_id -> parameter_config dictionary for params to override\n  # and override parameters.\n  override_params = {}\n  for param in study_spec_parameters_override:\n    override_params[param['parameter_id']] = param\n\n  study_spec_parameters = []\n  for param in formatted_params:\n    study_spec_parameters.append(\n        override_params.get(param['parameter_id'], param))\n\n  return study_spec_parameters\n\ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj, 'to_struct'):\n            return obj.to_struct()\n        else:\n            raise TypeError(\n                \"Object of type '%s' is not JSON serializable and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\nimport json\nimport argparse\n_parser = argparse.ArgumentParser(prog='Get tabnet study spec parameters', description='Get study_spec_parameters for a TabNet hyperparameter tuning job.')\n_parser.add_argument(\"--metadata\", dest=\"metadata\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--max-trial-count\", dest=\"max_trial_count\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--prediction-type\", dest=\"prediction_type\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--study-spec-parameters-override\", dest=\"study_spec_parameters_override\", type=json.loads, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = get_tabnet_study_spec_parameters(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
            ],
            "image": "python:3.7-slim"
          }
        },
        "exec-model-upload": {
          "container": {
            "args": [
              "--type",
              "UploadModel",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"{{$.inputs.parameters['description']}}\", \"predict_schemata\": {\"instance_schema_uri\": \"{{$.inputs.parameters['instance_schema_uri']}}\", \"parameters_schema_uri\": \"{{$.inputs.parameters['parameters_schema_uri']}}\", \"prediction_schema_uri\": \"{{$.inputs.parameters['prediction_schema_uri']}}\"}, \"container_spec\": {\"image_uri\": \"{{$.inputs.parameters['serving_container_image_uri']}}\", \"command\": {{$.inputs.parameters['serving_container_command']}}, \"args\": {{$.inputs.parameters['serving_container_args']}}, \"env\": {{$.inputs.parameters['serving_container_environment_variables']}}, \"ports\": {{$.inputs.parameters['serving_container_ports']}}, \"predict_route\": \"{{$.inputs.parameters['serving_container_predict_route']}}\", \"health_route\": \"{{$.inputs.parameters['serving_container_health_route']}}\"}, \"artifact_uri\": \"{{$.inputs.parameters['artifact_uri']}}\", \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}, \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}, \"labels\": {{$.inputs.parameters['labels']}}}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.6"
          }
        },
        "exec-tabular-stats-and-example-gen": {
          "container": {
            "args": [
              "--type",
              "CustomJob",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--payload",
              "{\"display_name\": \"tabular-stats-and-example-gen-{{$.pipeline_job_uuid}}-{{$.pipeline_task_uuid}}\", \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}, \"job_spec\": {\"worker_pool_specs\": [{\"replica_count\": 1, \"machine_spec\": {\"machine_type\": \"n1-standard-8\"}, \"container_spec\": {\"image_uri\":\"us-docker.pkg.dev/vertex-ai-restricted/automl-tabular/training:prod\", \"args\": [\"stats_generator\",\"--train_spec={\\\"prediction_type\\\": \\\"{{$.inputs.parameters['prediction_type']}}\\\", \\\"target_column\\\": \\\"{{$.inputs.parameters['target_column_name']}}\\\", \\\"optimization_objective\\\": \\\"{{$.inputs.parameters['optimization_objective']}}\\\", \\\"weight_column_name\\\": \\\"{{$.inputs.parameters['weight_column_name']}}\\\", \\\"transformations\\\": {{$.inputs.parameters['transformations']}}}\", \"--split_spec={{$.inputs.parameters['split_spec']}}\", \"--data_source={{$.inputs.parameters['data_source']}}\", \"--target_column={{$.inputs.parameters['target_column_name']}}\", \"--request_type=COLUMN_STATS_ONLY\", \"--optimization_objective_recall_value={{$.inputs.parameters['optimization_objective_recall_value']}}\", \"--optimization_objective_precision_value={{$.inputs.parameters['optimization_objective_precision_value']}}\", \"--example_gen_gcs_output_prefix={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/example_gen_output\", \"--dataset_stats_dir={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/stats/\", \"--stats_result_path={{$.outputs.artifacts['dataset_stats'].uri}}\", \"--dataset_schema_path={{$.outputs.artifacts['dataset_schema'].uri}}\", \"--job_name=tabular-stats-and-example-gen-{{$.pipeline_job_uuid}}-{{$.pipeline_task_uuid}}\", \"--dataflow_project={{$.inputs.parameters['project']}}\", \"--error_file_path={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/error.pb\", \"--dataflow_staging_dir={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/dataflow_staging\", \"--dataflow_tmp_dir={{$.inputs.parameters['root_dir']}}/{{$.pipeline_job_uuid}}/{{$.pipeline_task_uuid}}/dataflow_tmp\", \"--dataflow_max_num_workers={{$.inputs.parameters['dataflow_max_num_workers']}}\", \"--dataflow_worker_container_image=us-docker.pkg.dev/vertex-ai/automl-tabular/dataflow-worker:prod\", \"--dataflow_machine_type={{$.inputs.parameters['dataflow_machine_type']}}\", \"--dataflow_disk_size_gb={{$.inputs.parameters['dataflow_disk_size_gb']}}\", \"--dataflow_kms_key={{$.inputs.parameters['encryption_spec_key_name']}}\", \"--dataflow_subnetwork_fully_qualified={{$.inputs.parameters['dataflow_subnetwork']}}\", \"--dataflow_use_public_ips={{$.inputs.parameters['dataflow_use_public_ips']}}\", \"--is_distill={{$.inputs.parameters['is_distill']}}\", \"--additional_experiments={{$.inputs.parameters['additional_experiments']}}\", \"--metadata_path={{$.outputs.artifacts['metadata'].uri}}\", \"--train_split={{$.outputs.artifacts['train_split'].uri}}\", \"--eval_split={{$.outputs.artifacts['eval_split'].uri}}\", \"--test_split={{$.outputs.artifacts['test_split'].uri}}\", \"--test_split_for_batch_prediction_component={{$.outputs.parameters['test_split_json'].output_file}}\", \"--downsampled_test_split_for_batch_prediction_component={{$.outputs.parameters['downsampled_test_split_json'].output_file}}\", \"--instance_baseline_path={{$.outputs.artifacts['instance_baseline'].uri}}\", \"--parse_json=true\", \"--generate_additional_downsample_test_split=true\"]}}]}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.6"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "automl-tabular-tabnet-hyperparameter-tuning-job"
    },
    "root": {
      "dag": {
        "tasks": {
          "automl-tabular-finalizer": {
            "componentRef": {
              "name": "comp-automl-tabular-finalizer"
            },
            "dependentTasks": [
              "exit-handler-1"
            ],
            "inputs": {
              "parameters": {
                "encryption_spec_key_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": ""
                    }
                  }
                },
                "location": {
                  "componentInputParameter": "location"
                },
                "project": {
                  "componentInputParameter": "project"
                },
                "root_dir": {
                  "componentInputParameter": "root_dir"
                }
              }
            },
            "taskInfo": {
              "name": "automl-tabular-finalizer"
            },
            "triggerPolicy": {
              "strategy": "ALL_UPSTREAM_TASKS_COMPLETED"
            }
          },
          "exit-handler-1": {
            "componentRef": {
              "name": "comp-exit-handler-1"
            },
            "inputs": {
              "parameters": {
                "pipelineparam--data_source": {
                  "componentInputParameter": "data_source"
                },
                "pipelineparam--dataflow_subnetwork": {
                  "componentInputParameter": "dataflow_subnetwork"
                },
                "pipelineparam--dataflow_use_public_ips": {
                  "componentInputParameter": "dataflow_use_public_ips"
                },
                "pipelineparam--enable_profiler": {
                  "componentInputParameter": "enable_profiler"
                },
                "pipelineparam--encryption_spec_key_name": {
                  "componentInputParameter": "encryption_spec_key_name"
                },
                "pipelineparam--eval_frequency_secs": {
                  "componentInputParameter": "eval_frequency_secs"
                },
                "pipelineparam--eval_steps": {
                  "componentInputParameter": "eval_steps"
                },
                "pipelineparam--location": {
                  "componentInputParameter": "location"
                },
                "pipelineparam--max_failed_trial_count": {
                  "componentInputParameter": "max_failed_trial_count"
                },
                "pipelineparam--max_trial_count": {
                  "componentInputParameter": "max_trial_count"
                },
                "pipelineparam--parallel_trial_count": {
                  "componentInputParameter": "parallel_trial_count"
                },
                "pipelineparam--prediction_type": {
                  "componentInputParameter": "prediction_type"
                },
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                },
                "pipelineparam--root_dir": {
                  "componentInputParameter": "root_dir"
                },
                "pipelineparam--seed": {
                  "componentInputParameter": "seed"
                },
                "pipelineparam--split_spec": {
                  "componentInputParameter": "split_spec"
                },
                "pipelineparam--stats_and_example_gen_dataflow_disk_size_gb": {
                  "componentInputParameter": "stats_and_example_gen_dataflow_disk_size_gb"
                },
                "pipelineparam--stats_and_example_gen_dataflow_machine_type": {
                  "componentInputParameter": "stats_and_example_gen_dataflow_machine_type"
                },
                "pipelineparam--stats_and_example_gen_dataflow_max_num_workers": {
                  "componentInputParameter": "stats_and_example_gen_dataflow_max_num_workers"
                },
                "pipelineparam--study_spec_algorithm": {
                  "componentInputParameter": "study_spec_algorithm"
                },
                "pipelineparam--study_spec_measurement_selection_type": {
                  "componentInputParameter": "study_spec_measurement_selection_type"
                },
                "pipelineparam--study_spec_metrics": {
                  "componentInputParameter": "study_spec_metrics"
                },
                "pipelineparam--study_spec_parameters_override": {
                  "componentInputParameter": "study_spec_parameters_override"
                },
                "pipelineparam--tabnet": {
                  "componentInputParameter": "tabnet"
                },
                "pipelineparam--target_column": {
                  "componentInputParameter": "target_column"
                },
                "pipelineparam--training_machine_spec": {
                  "componentInputParameter": "training_machine_spec"
                },
                "pipelineparam--training_replica_count": {
                  "componentInputParameter": "training_replica_count"
                },
                "pipelineparam--transform_dataflow_disk_size_gb": {
                  "componentInputParameter": "transform_dataflow_disk_size_gb"
                },
                "pipelineparam--transform_dataflow_machine_type": {
                  "componentInputParameter": "transform_dataflow_machine_type"
                },
                "pipelineparam--transform_dataflow_max_num_workers": {
                  "componentInputParameter": "transform_dataflow_max_num_workers"
                },
                "pipelineparam--transformations": {
                  "componentInputParameter": "transformations"
                },
                "pipelineparam--weight_column": {
                  "componentInputParameter": "weight_column"
                }
              }
            },
            "taskInfo": {
              "name": "exit-handler-1"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "data_source": {
            "type": "STRING"
          },
          "dataflow_subnetwork": {
            "type": "STRING"
          },
          "dataflow_use_public_ips": {
            "type": "STRING"
          },
          "enable_profiler": {
            "type": "STRING"
          },
          "encryption_spec_key_name": {
            "type": "STRING"
          },
          "eval_frequency_secs": {
            "type": "INT"
          },
          "eval_steps": {
            "type": "INT"
          },
          "location": {
            "type": "STRING"
          },
          "max_failed_trial_count": {
            "type": "INT"
          },
          "max_trial_count": {
            "type": "INT"
          },
          "parallel_trial_count": {
            "type": "INT"
          },
          "prediction_type": {
            "type": "STRING"
          },
          "project": {
            "type": "STRING"
          },
          "root_dir": {
            "type": "STRING"
          },
          "seed": {
            "type": "INT"
          },
          "split_spec": {
            "type": "STRING"
          },
          "stats_and_example_gen_dataflow_disk_size_gb": {
            "type": "INT"
          },
          "stats_and_example_gen_dataflow_machine_type": {
            "type": "STRING"
          },
          "stats_and_example_gen_dataflow_max_num_workers": {
            "type": "INT"
          },
          "study_spec_algorithm": {
            "type": "STRING"
          },
          "study_spec_measurement_selection_type": {
            "type": "STRING"
          },
          "study_spec_metrics": {
            "type": "STRING"
          },
          "study_spec_parameters_override": {
            "type": "STRING"
          },
          "tabnet": {
            "type": "STRING"
          },
          "target_column": {
            "type": "STRING"
          },
          "training_machine_spec": {
            "type": "STRING"
          },
          "training_replica_count": {
            "type": "INT"
          },
          "transform_dataflow_disk_size_gb": {
            "type": "INT"
          },
          "transform_dataflow_machine_type": {
            "type": "STRING"
          },
          "transform_dataflow_max_num_workers": {
            "type": "INT"
          },
          "transformations": {
            "type": "STRING"
          },
          "weight_column": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.11"
  },
  "runtimeConfig": {
    "parameters": {
      "dataflow_subnetwork": {
        "stringValue": ""
      },
      "dataflow_use_public_ips": {
        "stringValue": "True"
      },
      "enable_profiler": {
        "stringValue": "False"
      },
      "encryption_spec_key_name": {
        "stringValue": ""
      },
      "eval_frequency_secs": {
        "intValue": "600"
      },
      "eval_steps": {
        "intValue": "0"
      },
      "max_failed_trial_count": {
        "intValue": "0"
      },
      "seed": {
        "intValue": "1"
      },
      "stats_and_example_gen_dataflow_disk_size_gb": {
        "intValue": "40"
      },
      "stats_and_example_gen_dataflow_machine_type": {
        "stringValue": "n1-standard-16"
      },
      "stats_and_example_gen_dataflow_max_num_workers": {
        "intValue": "25"
      },
      "study_spec_algorithm": {
        "stringValue": "ALGORITHM_UNSPECIFIED"
      },
      "study_spec_measurement_selection_type": {
        "stringValue": "BEST_MEASUREMENT"
      },
      "tabnet": {
        "stringValue": "False"
      },
      "training_replica_count": {
        "intValue": "1"
      },
      "transform_dataflow_disk_size_gb": {
        "intValue": "40"
      },
      "transform_dataflow_machine_type": {
        "stringValue": "n1-standard-16"
      },
      "transform_dataflow_max_num_workers": {
        "intValue": "25"
      },
      "weight_column": {
        "stringValue": ""
      }
    }
  }
}