name: Statisticsgen
inputs:
- name: input_data
  type: Examples
outputs:
- name: output
  type: ExampleStatistics
description: |
  Construct a StatisticsGen component.

      Args:
        input_data: A Channel of `ExamplesPath` type, likely generated by the
          [ExampleGen component](https://www.tensorflow.org/tfx/guide/examplegen).
          This needs to contain two splits labeled `train` and `eval`. _required_
        # examples: Forwards compatibility alias for the `input_data` argument.
      Returns:
        output: `ExampleStatistics` channel for statistics of each split
          provided in the input examples.
implementation:
  container:
    image: tensorflow/tfx:0.15.0
    command:
    - python3
    - -u
    - -c
    - |
      class OutputPath:
          '''When creating component from function, OutputPath should be used as function parameter annotation to tell the system that the function wants to output data by writing it into a file with the given path instead of returning the data from the function.'''
          def __init__(self, type=None):
              self.type = type

      class InputPath:
          '''When creating component from function, InputPath should be used as function parameter annotation to tell the system to pass the *data file path* to the function instead of passing the actual data.'''
          def __init__(self, type=None):
              self.type = type

      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def StatisticsGen(
          # Inputs
          input_data_path: InputPath('ExamplesPath'),
          #input_data_path: 'ExamplesPath',

          # Outputs
          output_path: OutputPath('ExampleStatistics'),
          #output_path: 'ExampleStatistics',
      ):
      #) -> NamedTuple('Outputs', [
      #    ('output', 'ExampleStatistics'),
      #]):
          """Construct a StatisticsGen component.

          Args:
            input_data: A Channel of `ExamplesPath` type, likely generated by the
              [ExampleGen component](https://www.tensorflow.org/tfx/guide/examplegen).
              This needs to contain two splits labeled `train` and `eval`. _required_
            # examples: Forwards compatibility alias for the `input_data` argument.
          Returns:
            output: `ExampleStatistics` channel for statistics of each split
              provided in the input examples.
          """

          import json
          import os
          from google.protobuf import json_format
          from tfx.types import standard_artifacts
          from tfx.types import channel_utils

          # Create input dict.
          input_base_path = input_data_path
          input_artifact_class = standard_artifacts.Examples
          # Recovering splits
          splits = sorted(os.listdir(input_data_path))
          input_data_artifacts = []
          for split in splits:
              artifact = input_artifact_class()
              artifact.split = split
              artifact.uri = os.path.join(input_base_path, split) + '/'
              input_data_artifacts.append(artifact)
          input_data_channel = channel_utils.as_channel(input_data_artifacts)

          from tfx.components.statistics_gen.component import StatisticsGen
          component_class_instance = StatisticsGen(
              input_data=input_data_channel,
          )

          input_dict = {name: channel.get() for name, channel in component_class_instance.inputs.get_all().items()}
          output_dict = {name: channel.get() for name, channel in component_class_instance.outputs.get_all().items()}
          exec_properties = component_class_instance.exec_properties

          # Generating paths for output artifacts
          for output_artifact in output_dict['output']:
              output_artifact.uri = os.path.join(output_path, output_artifact.split) # Default split is ''

          print('Component instance: ' + str(component_class_instance))

          executor = component_class_instance.executor_spec.executor_class()
          executor.Do(
              input_dict=input_dict,
              output_dict=output_dict,
              exec_properties=exec_properties,
          )
          #return (output_path,)

      import argparse
      _parser = argparse.ArgumentParser(prog='Statisticsgen', description='Construct a StatisticsGen component.\n\n    Args:\n      input_data: A Channel of `ExamplesPath` type, likely generated by the\n        [ExampleGen component](https://www.tensorflow.org/tfx/guide/examplegen).\n        This needs to contain two splits labeled `train` and `eval`. _required_\n      # examples: Forwards compatibility alias for the `input_data` argument.\n    Returns:\n      output: `ExampleStatistics` channel for statistics of each split\n        provided in the input examples.\n')
      _parser.add_argument("--input-data", dest="input_data_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output", dest="output_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = StatisticsGen(**_parsed_args)

      if not hasattr(_outputs, '__getitem__') or isinstance(_outputs, str):
          _outputs = [_outputs]

      _output_serializers = [

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --input-data
    - inputPath: input_data
    - --output
    - outputPath: output
