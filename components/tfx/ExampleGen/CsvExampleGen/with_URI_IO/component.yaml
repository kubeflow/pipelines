name: CsvExampleGen URI
description: |-
  Executes the CsvExampleGen component.

      Args:
        input: A Channel of 'ExternalPath' type, which includes one artifact
          whose uri is an external directory with csv files inside (required).
        input_config: An example_gen_pb2.Input instance, providing input
          configuration. If unset, the files under input will be treated as a
          single split.
        output_config: An example_gen_pb2.Output instance, providing output
          configuration. If unset, default splits will be 'train' and 'eval' with
          size 2:1.
      Returns:
        examples: Artifact of type 'Examples' for output train and
          eval examples.
inputs:
- {name: input_path, type: ExternalArtifactUri}
- {name: examples_path, type: ExamplesUri}
- name: input_config
  type:
    JsonObject: {data_type: 'proto:tfx.components.example_gen.Input'}
  optional: true
- name: output_config
  type:
    JsonObject: {data_type: 'proto:tfx.components.example_gen.Output'}
  optional: true
- name: custom_config
  type:
    JsonObject: {data_type: 'proto:tfx.components.example_gen.CustomConfig'}
  optional: true
outputs:
- {name: examples, type: ExamplesUri}
implementation:
  container:
    image: tensorflow/tfx:0.21.4
    command:
    - python3
    - -u
    - -c
    - "def CsvExampleGen_URI( #\n    # Inputs\n    input_path , # A Channel of 'ExternalPath'\
      \ type, which includes one artifact whose uri is an external directory with\
      \ csv files inside (required).\n\n    # Outputs\n    examples_path ,\n\n   \
      \ # Execution properties\n    input_config    = None, # = '{\"splits\": []}',\
      \ # JSON-serialized example_gen_pb2.Input instance, providing input configuration.\
      \ If unset, the files under input_base will be treated as a single split.\n\
      \    output_config    = None, # = '{\"splitConfig\": {\"splits\": []}}', # JSON-serialized\
      \ example_gen_pb2.Output instance, providing output configuration. If unset,\
      \ default splits will be 'train' and 'eval' with size 2:1.\n    custom_config\
      \    = None,\n):   \n     \n\n    \"\"\"Executes the CsvExampleGen component.\n\
      \n    Args:\n      input: A Channel of 'ExternalPath' type, which includes one\
      \ artifact\n        whose uri is an external directory with csv files inside\
      \ (required).\n      input_config: An example_gen_pb2.Input instance, providing\
      \ input\n        configuration. If unset, the files under input will be treated\
      \ as a\n        single split.\n      output_config: An example_gen_pb2.Output\
      \ instance, providing output\n        configuration. If unset, default splits\
      \ will be 'train' and 'eval' with\n        size 2:1.\n    Returns:\n      examples:\
      \ Artifact of type 'Examples' for output train and\n        eval examples.\n\
      \    \"\"\"\n    from tfx.components.example_gen.csv_example_gen.component import\
      \ CsvExampleGen as component_class\n\n    #Generated code\n    import json\n\
      \    import os\n    import tensorflow\n    from google.protobuf import json_format,\
      \ message\n    from tfx.types import Artifact, channel_utils, artifact_utils\n\
      \n    arguments = locals().copy()\n\n    component_class_args = {}\n\n    for\
      \ name, execution_parameter in component_class.SPEC_CLASS.PARAMETERS.items():\n\
      \        argument_value_obj = argument_value = arguments.get(name, None)\n \
      \       if argument_value is None:\n            continue\n        parameter_type\
      \ = execution_parameter.type\n        if isinstance(parameter_type, type) and\
      \ issubclass(parameter_type, message.Message): # Maybe FIX: execution_parameter.type\
      \ can also be a tuple\n            argument_value_obj = parameter_type()\n \
      \           json_format.Parse(argument_value, argument_value_obj)\n        component_class_args[name]\
      \ = argument_value_obj\n\n    for name, channel_parameter in component_class.SPEC_CLASS.INPUTS.items():\n\
      \        artifact_path = arguments[name + '_path']\n        if artifact_path:\n\
      \            artifact = channel_parameter.type()\n            artifact.uri =\
      \ artifact_path + '/' # ?\n            if channel_parameter.type.PROPERTIES\
      \ and 'split_names' in channel_parameter.type.PROPERTIES:\n                #\
      \ Recovering splits\n                subdirs = tensorflow.io.gfile.listdir(artifact_path)\n\
      \                artifact.split_names = artifact_utils.encode_split_names(sorted(subdirs))\n\
      \            component_class_args[name] = channel_utils.as_channel([artifact])\n\
      \n    component_class_instance = component_class(**component_class_args)\n\n\
      \    input_dict = {name: channel.get() for name, channel in component_class_instance.inputs.get_all().items()}\n\
      \    output_dict = {name: channel.get() for name, channel in component_class_instance.outputs.get_all().items()}\n\
      \    exec_properties = component_class_instance.exec_properties\n\n    # Generating\
      \ paths for output artifacts\n    for name, artifacts in output_dict.items():\n\
      \        base_artifact_path = arguments[name + '_path']\n        # Are there\
      \ still cases where output channel has multiple artifacts?\n        for idx,\
      \ artifact in enumerate(artifacts):\n            subdir = str(idx + 1) if idx\
      \ > 0 else ''\n            artifact.uri = os.path.join(base_artifact_path, subdir)\
      \  # Ends with '/'\n\n    print('component instance: ' + str(component_class_instance))\n\
      \n    #executor = component_class.EXECUTOR_SPEC.executor_class() # Same\n  \
      \  executor = component_class_instance.executor_spec.executor_class()\n    executor.Do(\n\
      \        input_dict=input_dict,\n        output_dict=output_dict,\n        exec_properties=exec_properties,\n\
      \    )\n    # End generated code\n    return (examples_path,)\n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='CsvExampleGen URI', description=\"Executes\
      \ the CsvExampleGen component.\\n\\n    Args:\\n      input: A Channel of 'ExternalPath'\
      \ type, which includes one artifact\\n        whose uri is an external directory\
      \ with csv files inside (required).\\n      input_config: An example_gen_pb2.Input\
      \ instance, providing input\\n        configuration. If unset, the files under\
      \ input will be treated as a\\n        single split.\\n      output_config:\
      \ An example_gen_pb2.Output instance, providing output\\n        configuration.\
      \ If unset, default splits will be 'train' and 'eval' with\\n        size 2:1.\\\
      n    Returns:\\n      examples: Artifact of type 'Examples' for output train\
      \ and\\n        eval examples.\")\n_parser.add_argument(\"--input-path\", dest=\"\
      input_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --examples-path\", dest=\"examples_path\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--input-config\", dest=\"input_config\", type=str, required=False,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-config\", dest=\"\
      output_config\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --custom-config\", dest=\"custom_config\", type=str, required=False, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str,\
      \ nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"\
      _output_paths\", [])\n\n_outputs = CsvExampleGen_URI(**_parsed_args)\n\n_output_serializers\
      \ = [\n    str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --input-path
    - {inputValue: input_path}
    - --examples-path
    - {inputValue: examples_path}
    - if:
        cond: {isPresent: input_config}
        then:
        - --input-config
        - {inputValue: input_config}
    - if:
        cond: {isPresent: output_config}
        then:
        - --output-config
        - {inputValue: output_config}
    - if:
        cond: {isPresent: custom_config}
        then:
        - --custom-config
        - {inputValue: custom_config}
    - '----output-paths'
    - {outputPath: examples}
