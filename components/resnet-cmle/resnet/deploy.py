from googleapiclient import discovery
from oauth2client.client import GoogleCredentials
import base64, sys, json
import tensorflow as tf
import argparse
import os
from time import gmtime, strftime
import time
import subprocess
import logging

logging.getLogger().setLevel(logging.INFO)

def parse_arguments():
  """Parse command line arguments."""
  parser = argparse.ArgumentParser()
  parser.add_argument('--model',
                      type = str,
                      default = 'flowers_model',
                      help = 'What to name your ml-engine model')
  parser.add_argument('--version',
                      type = str,
                      default = 'resnet',
                      help = 'What to name the version of the model')
  parser.add_argument('--data_dir',
                      type = str,
                      default = 'gs://flowers_resnet/tpu/resnet/trained',
                      help = 'The data directory file generated by the train component.')
  parser.add_argument('--project_id',
                      type = str,
                      required = True,
                      default = '',
                      help = 'Pass in your project id.')
  parser.add_argument('--bucket',
                      type = str,
                      default = 'flowers_resnet',
                      help = 'Path to GCS bucket.')
  parser.add_argument('--region',
                      type = str,
                      default = 'us-central1',
                      help = 'Region to use.')
  parser.add_argument('--TFVERSION',
                      type = str,
                      default = '1.8',
                      help = 'Version of TensorFlow to use.')
  args = parser.parse_args()
  return args

if __name__== "__main__":
    args = parse_arguments()
    os.environ["REGION"] = args.region
    os.environ["TFVERSION"] = args.TFVERSION

    model_export_dir = args.data_dir + '/export'

    logging.info('Writing latest model directory name: ' + model_export_dir)
    subprocess.call('gsutil ls ' + model_export_dir + ' | tail -1 > model.txt', shell=True)

    with open("./model.txt", "r") as model_path_file:
      model_location = model_path_file.read()[:-1]

    subprocess.call('echo "Deploying ' + args.model + '  ' + args.version + ' from ' + model_location + ' ... this will take a few minutes"', shell=True)
    subprocess.call('gcloud ml-engine versions delete ' + args.version + ' --model='+args.model, shell=True)
    subprocess.call('gcloud ml-engine models delete ' + args.model, shell=True)
    subprocess.call('gcloud ml-engine models create ' + args.model + ' --regions $REGION', shell=True)
    subprocess.call('gcloud ml-engine versions create ' + args.version + ' --model ' + args.model + ' --origin ' + str(model_location) + ' --runtime-version=$TFVERSION', shell=True)