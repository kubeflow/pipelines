name: ExampleValidator
inputs:
- {name: statistics_uri, type: ExampleStatisticsUri}
- {name: schema_uri, type: SchemaUri}
- {name: output_anomalies_uri, type: ExampleAnomaliesUri}
- {name: exclude_splits, type: String, optional: true}
- {name: beam_pipeline_args, type: JsonArray, optional: true}
outputs:
- {name: anomalies_uri, type: ExampleAnomaliesUri}
metadata:
  annotations:
    author: Alexey Volkov <alexey.volkov@ark-kun.com>
    canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/deprecated/tfx/ExampleValidator/with_URI_IO/component.yaml'
implementation:
  container:
    image: tensorflow/tfx:0.29.0
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def ExampleValidator(
          statistics_uri,
          schema_uri,
          output_anomalies_uri,
          exclude_splits = None,
          beam_pipeline_args = None,
      ):
          from tfx.components.example_validator.component import ExampleValidator as component_class

          #Generated code
          import os
          import tempfile
          from tensorflow.io import gfile
          from google.protobuf import json_format, message
          from tfx.types import channel_utils, artifact_utils
          from tfx.components.base import base_executor

          arguments = locals().copy()

          component_class_args = {}

          for name, execution_parameter in component_class.SPEC_CLASS.PARAMETERS.items():
              argument_value = arguments.get(name, None)
              if argument_value is None:
                  continue
              parameter_type = execution_parameter.type
              if isinstance(parameter_type, type) and issubclass(parameter_type, message.Message):
                  argument_value_obj = parameter_type()
                  json_format.Parse(argument_value, argument_value_obj)
              else:
                  argument_value_obj = argument_value
              component_class_args[name] = argument_value_obj

          for name, channel_parameter in component_class.SPEC_CLASS.INPUTS.items():
              artifact_path = arguments.get(name + '_uri') or arguments.get(name + '_path')
              if artifact_path:
                  artifact = channel_parameter.type()
                  artifact.uri = artifact_path.rstrip('/') + '/'  # Some TFX components require that the artifact URIs end with a slash
                  if channel_parameter.type.PROPERTIES and 'split_names' in channel_parameter.type.PROPERTIES:
                      # Recovering splits
                      subdirs = gfile.listdir(artifact_path)
                      # Workaround for https://github.com/tensorflow/tensorflow/issues/39167
                      subdirs = [subdir.rstrip('/') for subdir in subdirs]
                      split_names = [subdir.replace('Split-', '') for subdir in subdirs]
                      artifact.split_names = artifact_utils.encode_split_names(sorted(split_names))
                  component_class_args[name] = channel_utils.as_channel([artifact])

          component_class_instance = component_class(**component_class_args)

          input_dict = channel_utils.unwrap_channel_dict(component_class_instance.inputs.get_all())
          output_dict = {}
          exec_properties = component_class_instance.exec_properties

          # Generating paths for output artifacts
          for name, channel in component_class_instance.outputs.items():
              artifact_path = arguments.get('output_' + name + '_uri') or arguments.get(name + '_path')
              if artifact_path:
                  artifact = channel.type()
                  artifact.uri = artifact_path.rstrip('/') + '/'  # Some TFX components require that the artifact URIs end with a slash
                  artifact_list = [artifact]
                  channel._artifacts = artifact_list
                  output_dict[name] = artifact_list

          print('component instance: ' + str(component_class_instance))

          executor_context = base_executor.BaseExecutor.Context(
              beam_pipeline_args=arguments.get('beam_pipeline_args'),
              tmp_dir=tempfile.gettempdir(),
              unique_id='tfx_component',
          )
          executor = component_class_instance.executor_spec.executor_class(executor_context)
          executor.Do(
              input_dict=input_dict,
              output_dict=output_dict,
              exec_properties=exec_properties,
          )

          return (output_anomalies_uri, )

      import json
      import argparse
      _parser = argparse.ArgumentParser(prog='ExampleValidator', description='')
      _parser.add_argument("--statistics-uri", dest="statistics_uri", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--schema-uri", dest="schema_uri", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output-anomalies-uri", dest="output_anomalies_uri", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--exclude-splits", dest="exclude_splits", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--beam-pipeline-args", dest="beam_pipeline_args", type=json.loads, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = ExampleValidator(**_parsed_args)

      _output_serializers = [
          str,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --statistics-uri
    - {inputValue: statistics_uri}
    - --schema-uri
    - {inputValue: schema_uri}
    - --output-anomalies-uri
    - {inputValue: output_anomalies_uri}
    - if:
        cond: {isPresent: exclude_splits}
        then:
        - --exclude-splits
        - {inputValue: exclude_splits}
    - if:
        cond: {isPresent: beam_pipeline_args}
        then:
        - --beam-pipeline-args
        - {inputValue: beam_pipeline_args}
    - '----output-paths'
    - {outputPath: anomalies_uri}
