name: Trainer
inputs:
- {name: examples, type: Examples}
- name: train_args
  type:
    JsonObject: {data_type: 'proto:tfx.components.trainer.TrainArgs'}
- name: eval_args
  type:
    JsonObject: {data_type: 'proto:tfx.components.trainer.EvalArgs'}
- {name: transform_graph, type: TransformGraph, optional: true}
- {name: schema, type: Schema, optional: true}
- {name: base_model, type: Model, optional: true}
- {name: hyperparameters, type: HyperParameters, optional: true}
- {name: module_file, type: String, optional: true}
- {name: run_fn, type: String, optional: true}
- {name: trainer_fn, type: String, optional: true}
- {name: custom_config, type: String, optional: true}
outputs:
- {name: model, type: Model}
- {name: model_run, type: ModelRun}
metadata:
  annotations:
    author: Alexey Volkov <alexey.volkov@ark-kun.com>
    canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/deprecated/tfx/Trainer/component.yaml'
implementation:
  container:
    image: tensorflow/tfx:0.29.0
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def Trainer(
          examples_path,
          model_path,
          model_run_path,
          train_args,
          eval_args,
          transform_graph_path = None,
          schema_path = None,
          base_model_path = None,
          hyperparameters_path = None,
          module_file = None,
          run_fn = None,
          trainer_fn = None,
          custom_config = None,
      ):
          from tfx.components.trainer.component import Trainer as component_class

          #Generated code
          import os
          import tempfile
          from tensorflow.io import gfile
          from google.protobuf import json_format, message
          from tfx.types import channel_utils, artifact_utils
          from tfx.components.base import base_executor

          arguments = locals().copy()

          component_class_args = {}

          for name, execution_parameter in component_class.SPEC_CLASS.PARAMETERS.items():
              argument_value = arguments.get(name, None)
              if argument_value is None:
                  continue
              parameter_type = execution_parameter.type
              if isinstance(parameter_type, type) and issubclass(parameter_type, message.Message):
                  argument_value_obj = parameter_type()
                  json_format.Parse(argument_value, argument_value_obj)
              else:
                  argument_value_obj = argument_value
              component_class_args[name] = argument_value_obj

          for name, channel_parameter in component_class.SPEC_CLASS.INPUTS.items():
              artifact_path = arguments.get(name + '_uri') or arguments.get(name + '_path')
              if artifact_path:
                  artifact = channel_parameter.type()
                  artifact.uri = artifact_path.rstrip('/') + '/'  # Some TFX components require that the artifact URIs end with a slash
                  if channel_parameter.type.PROPERTIES and 'split_names' in channel_parameter.type.PROPERTIES:
                      # Recovering splits
                      subdirs = gfile.listdir(artifact_path)
                      # Workaround for https://github.com/tensorflow/tensorflow/issues/39167
                      subdirs = [subdir.rstrip('/') for subdir in subdirs]
                      split_names = [subdir.replace('Split-', '') for subdir in subdirs]
                      artifact.split_names = artifact_utils.encode_split_names(sorted(split_names))
                  component_class_args[name] = channel_utils.as_channel([artifact])

          component_class_instance = component_class(**component_class_args)

          input_dict = channel_utils.unwrap_channel_dict(component_class_instance.inputs.get_all())
          output_dict = {}
          exec_properties = component_class_instance.exec_properties

          # Generating paths for output artifacts
          for name, channel in component_class_instance.outputs.items():
              artifact_path = arguments.get('output_' + name + '_uri') or arguments.get(name + '_path')
              if artifact_path:
                  artifact = channel.type()
                  artifact.uri = artifact_path.rstrip('/') + '/'  # Some TFX components require that the artifact URIs end with a slash
                  artifact_list = [artifact]
                  channel._artifacts = artifact_list
                  output_dict[name] = artifact_list

          print('component instance: ' + str(component_class_instance))

          executor_context = base_executor.BaseExecutor.Context(
              beam_pipeline_args=arguments.get('beam_pipeline_args'),
              tmp_dir=tempfile.gettempdir(),
              unique_id='tfx_component',
          )
          executor = component_class_instance.executor_spec.executor_class(executor_context)
          executor.Do(
              input_dict=input_dict,
              output_dict=output_dict,
              exec_properties=exec_properties,
          )

      import argparse
      _parser = argparse.ArgumentParser(prog='Trainer', description='')
      _parser.add_argument("--examples", dest="examples_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--train-args", dest="train_args", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--eval-args", dest="eval_args", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--transform-graph", dest="transform_graph_path", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--schema", dest="schema_path", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--base-model", dest="base_model_path", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--hyperparameters", dest="hyperparameters_path", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--module-file", dest="module_file", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--run-fn", dest="run_fn", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--trainer-fn", dest="trainer_fn", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--custom-config", dest="custom_config", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--model", dest="model_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--model-run", dest="model_run_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = Trainer(**_parsed_args)
    args:
    - --examples
    - {inputPath: examples}
    - --train-args
    - {inputValue: train_args}
    - --eval-args
    - {inputValue: eval_args}
    - if:
        cond: {isPresent: transform_graph}
        then:
        - --transform-graph
        - {inputPath: transform_graph}
    - if:
        cond: {isPresent: schema}
        then:
        - --schema
        - {inputPath: schema}
    - if:
        cond: {isPresent: base_model}
        then:
        - --base-model
        - {inputPath: base_model}
    - if:
        cond: {isPresent: hyperparameters}
        then:
        - --hyperparameters
        - {inputPath: hyperparameters}
    - if:
        cond: {isPresent: module_file}
        then:
        - --module-file
        - {inputValue: module_file}
    - if:
        cond: {isPresent: run_fn}
        then:
        - --run-fn
        - {inputValue: run_fn}
    - if:
        cond: {isPresent: trainer_fn}
        then:
        - --trainer-fn
        - {inputValue: trainer_fn}
    - if:
        cond: {isPresent: custom_config}
        then:
        - --custom-config
        - {inputValue: custom_config}
    - --model
    - {outputPath: model}
    - --model-run
    - {outputPath: model_run}
