name: "Set up KFP on KinD"
description: "Step to start and configure KFP on Kind"

inputs:
  k8s_version:
    description: "The Kubernetes version to use for the Kind cluster"
    required: true
  pipeline_store:
    description: "Flag to deploy KFP with K8s Native API"
    default: 'database'
    required: false
  proxy:
    description: "If KFP should be deployed with proxy configuration"
    required: false
    default: 'false'
  cache_enabled:
    description: "If KFP should be deployed with cache enabled globally"
    required: false
    default: 'true'
  cluser_name:
    description: "Provide kind cluster name if you want to name it other than kfp"
    required: false
    default: 'kfp'
  image_tag:
    required: true
    description: "Provide the image tag your image was tagged with"
  image_path:
    required: true
    description: "Path within github artifacts where your image tarball is stored"
  image_registry:
    required: true
    description: "Image Registry address of the images"
  multi_user:
    description: "If KFP should be deployed in multi-user mode"
    required: false
    default: 'false'
  storage_backend:
    description: "Storage backend to use (minio or seaweedfs)"
    required: false
    default: 'seaweedfs'

runs:
  using: "composite"
  steps:
    - name: Prepare host storage directory
      shell: bash
      run: |
        set -euo pipefail
        sudo mkdir -p /mnt/local-path-provisioner

    - name: Create k8s Kind Cluster
      uses: container-tools/kind-action@v2
      with:
        cluster_name: ${{ inputs.cluser_name }}
        kubectl_version: ${{ inputs.k8s_version }}
        version: v0.25.0
        node_image: kindest/node:${{ inputs.k8s_version }}
        config: .github/actions/kfp-cluster/kind-config.yaml

    - name: Configure Local Path Provisioner to use /mnt and root
      shell: bash
      run: |
        set -euo pipefail
        # Patch local-path-provisioner config to prefer /mnt, but allow default root path
        kubectl -n local-path-storage patch configmap local-path-config --type merge \
          -p '{"data":{"config.json":"{\"nodePathMap\":[{\"node\":\"DEFAULT_PATH_FOR_NON_LISTED_NODES\",\"paths\":[\"/mnt/local-path-provisioner\",\"/var/local-path-provisioner\"]}]}"}}'
        # Restart local-path-provisioner to pick up the new config
        kubectl -n local-path-storage rollout restart deploy/local-path-provisioner

    - name: Deploy Squid
      id: deploy-squid
      if: ${{ inputs.proxy == 'true' }}
      shell: bash
      run: ./.github/resources/squid/deploy-squid.sh

    - name: Download Docker Images
      uses: actions/download-artifact@v4
      with:
        path: "images_${{ github.sha }}"

    - name: Load Docker Images
      shell: bash
      run: |
        APPS=("apiserver" "driver" "launcher" "scheduledworkflow" "persistenceagent")
        for app in "${APPS[@]}"; do
          docker image load -i ${{ inputs.image_path }}/$app/$app.tar
          docker push ${{ inputs.image_registry }}/$app:${{ inputs.image_tag }}
          rm ${{ inputs.image_path }}/$app/$app.tar
          docker image rm ${{ inputs.image_registry }}/$app:${{ inputs.image_tag }}
        done  

    - name: Deploy KFP
      shell: bash
      run: |
        ARGS=""

        if [ "${{ inputs.proxy }}" = "true" ]; then
          ARGS="${ARGS} --proxy"
        fi
        
        if [ "${{inputs.cache_enabled }}" = "false" ]; then
          ARGS="${ARGS} --cache-disabled"
        fi
        
        if [ "${{inputs.pipeline_store }}" = "kubernetes" ]; then
          ARGS="${ARGS} --deploy-k8s-native"
        fi
        
        if [ "${{ inputs.multi_user }}" = "true" ]; then
          ARGS="${ARGS} --multi-user"
        fi
        
        if [ "${{ inputs.storage_backend }}" != "seaweedfs" ]; then
          ARGS="${ARGS} --storage ${{ inputs.storage_backend }}"
        fi
        
        ./.github/resources/scripts/deploy-kfp.sh $ARGS
