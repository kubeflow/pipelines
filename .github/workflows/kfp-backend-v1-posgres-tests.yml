name: KFP Backend V1 Postgres Tests

on:
  push:
    branches:
      - master
      - feature/replace-str-with-largetext-WIP # temporarily for Github Actions on for repo
  pull_request:
    paths:
      - "backend/**"
      - "manifests/kustomize/third-party/postgresql/**"
      - ".github/resources/manifests/standalone/**"
      - ".github/workflows/kfp-backend-v1-posgres-tests.yml"
      - "!**/*.md"
      - "!**/OWNERS"
env:
  NAMESPACE: kubeflow
  POSTGRES_NAMESPACE: kubeflow
  DB_TYPE: postgres
  DB_DRIVER: pgx
  DB_PORT: "5432"
  # The IP address for port-forwarding the database. Go tests will connect to this IP.
  # This should be kept in sync with other postgres test workflows and local test scripts.
  DB_FORWARD_IP: 127.0.0.3
  DB_USER: user
  DB_PASSWORD: password
  DB_NAME: mlpipeline
jobs:
  build:
    uses: ./.github/workflows/image-builds-with-cache.yml
  postgres-pgx:
    name: KFP Backend V1 Postgres Tests
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: false

    steps:
      - name: Checkout target code
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Create KFP cluster
        uses: ./.github/actions/create-cluster
        with:
          k8s_version: "v1.30.2"

      - name: Deploy KFP with Postgres
        uses: ./.github/actions/deploy
        with:
          db_type: "pgx"
          pipeline_store: "database"
          image_path: ${{ needs.build.outputs.IMAGE_PATH }}
          image_tag: ${{ needs.build.outputs.IMAGE_TAG }}
          image_registry: ${{ needs.build.outputs.IMAGE_REGISTRY }}
          forward_port: "false" # we intend to forward the service instead of pod. thus we will forward the ports manually in next the steps.

      - name: Wait for Postgres readiness
        run: |
          echo "Waiting for Postgres to be Ready..."
          kubectl -n "$POSTGRES_NAMESPACE" wait --for=condition=available deploy/postgres --timeout=180s
          echo "✅ Postgres is Ready"

      - name: Port-forward Postgres
        run: |
          kubectl -n "$POSTGRES_NAMESPACE" port-forward svc/postgres-service ${{ env.DB_PORT }}:${{ env.DB_PORT }} --address=${{ env.DB_FORWARD_IP }} &
          sleep 10
          echo "✅ Port-forwarding for Postgres is active."

      - name: Wait for API server readiness
        run: |
          echo "Waiting for KFP API server (ml-pipeline) to be Ready..."
          kubectl -n "$NAMESPACE" rollout status deploy/ml-pipeline --timeout=300s
          kubectl -n "$NAMESPACE" wait --for=condition=available deploy/ml-pipeline --timeout=60s
          echo "✅ KFP API server (ml-pipeline) is Ready"
          echo "=== ml-pipeline Logs (last 50 lines) ==="
          kubectl -n "$NAMESPACE" logs deploy/ml-pipeline --tail=200 || true

      - name: Port-forward KFP API server
        run: |
          kubectl -n "$NAMESPACE" port-forward svc/ml-pipeline 8888:8888 &
          sleep 20
          echo "✅ Port-forwarding for ml-pipeline is active."

      - name: Run initialization tests
        run: |
          go test -v ./backend/test/initialization/... \
          -args -namespace="$NAMESPACE" \
          -runIntegrationTests=true

        # Exclude upgrade_test.go
        # See the comment in kfp-backend-v2-postgres-tests.yml
      - name: Run backend integration tests
        run: |
          go test -v ./backend/test/integration/... \
          -args -namespace="$NAMESPACE" \
          -runIntegrationTests=true \
          -runPostgreSQLTests=true -test.skip=TestUpgrade
        env:
          DBCONFIG_POSTGRESQLCONFIG_HOST: ${{ env.DB_FORWARD_IP }}

      - name: Cleanup
        if: always()
        run: |
          echo "==== KFP Pods ($NAMESPACE) ===="
          kubectl -n "$NAMESPACE" get pods -o wide || true
          echo "==== KFP Events ($NAMESPACE) ===="
          kubectl -n "$NAMESPACE" get events --sort-by=.lastTimestamp | tail -n 100 || true
          echo "==== Postgres Pods ($POSTGRES_NAMESPACE) ===="
          kubectl -n "$POSTGRES_NAMESPACE" get pods -o wide || true
          echo "==== Postgres Events ($POSTGRES_NAMESPACE) ===="
          kubectl -n "$POSTGRES_NAMESPACE" get events --sort-by=.lastTimestamp | tail -n 100 || true
