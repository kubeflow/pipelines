name: KFP e2e tests

on:
  push:
    branches: [master]

  pull_request:
    paths:
      - '.github/workflows/e2e-test.yml'
      - '.github/resources/**'
      - 'go.mod'
      - 'go.sum'
      - 'backend/**'
      - 'frontend/**'
      - 'proxy/**'
      - 'manifests/kustomize/**'
      - 'test/**'
      - '!**/*.md'
      - '!**/OWNERS'

jobs:
  basic-sample-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s_version: [ "v1.29.2", "v1.31.0" ]
    name: Basic Sample Tests - K8s ${{ matrix.k8s_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Create KFP cluster
        id: create-kfp-cluster
        uses: ./.github/actions/kfp-cluster
        with:
          k8s_version: ${{ matrix.k8s_version }}
        continue-on-error: true

      - name: Forward API port
        id: forward-api-port
        if: ${{ steps.create-kfp-cluster.outcome == 'success' }}
        run: ./.github/resources/scripts/forward-port.sh "kubeflow" "ml-pipeline" 8888 8888
        continue-on-error: true

      - name: Install prerequisites
        if: ${{ steps.create-kfp-cluster.outcome == 'success' }}
        run: pip3 install -r ./test/sample-test/requirements.txt && pip install sdk/python

      - name: Install protobuf-compiler
        id: install-protobuf-compiler
        run: sudo apt update && sudo apt install -y protobuf-compiler

      - name: Install Wheel
        id: install-wheel
        run: pip3 install wheel==0.42.0 setuptools

      - name: Generate API proto files
        working-directory: ./api
        run: make python
      
      - name: Install local kfp from source
        run: python3 -m pip install -I sdk/python

      - name: Install kfp-pipeline-spec from source
        run: |
          python3 -m pip install -I api/v2alpha1/python

      - name: Basic sample tests - sequential
        if: ${{ steps.create-kfp-cluster.outcome == 'success' }}
        id: sequential-test
        run: python3 ./test/sample-test/sample_test_launcher.py sample_test run_test --namespace kubeflow --test-name sequential --results-gcs-dir output

      - name: Basic sample tests - exit_handler
        if: ${{ steps.create-kfp-cluster.outcome == 'success' }}
        id: sample-test
        run: python3 ./test/sample-test/sample_test_launcher.py sample_test run_test --namespace kubeflow --test-name exit_handler --expected-result failed --results-gcs-dir output
        continue-on-error: true

      - name: Collect failed logs
        if: ${{ steps.create-kfp-cluster.outcome != 'success' || steps.forward-api-port.outcome != 'success' || steps.sequential-test.outcome != 'success' || steps.sample-test.outcome != 'success'}}
        run: |
          ./.github/resources/scripts/collect-logs.sh --ns kubeflow --output /tmp/tmp_pod_log.txt
          exit 1

      - name: Collect test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kfp-e2e-tests-artifacts-k8s-${{ matrix.k8s_version }}
          path: /tmp/tmp*/*
