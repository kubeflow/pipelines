name: KFP Samples

on:
  push:
    branches: [master]
  pull_request:
    paths:
      - '.github/resources/**'
      - '.github/actions/kfp-cluster/**'
      - '.github/workflows/kfp-samples.yml'
      - '.github/workflows/kubeflow-pipelines-integration-v2.yml'
      - 'manifests/kustomize/third-party/seaweedfs/**'
      - 'manifests/kustomize/third-party/minio/**'
      - 'api/**'
      - 'backend/**'
      - 'samples/**'
      - 'samples/core/dataflow/**'
      - 'samples/core/parameterized_tfx_oss/**'
      - '!**/*.md'
      - '!**/OWNERS'

jobs:
  build:
    uses: ./.github/workflows/image-builds-with-cache.yml

  samples:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        include:
          - k8s_version: "v1.29.2"
            mode: "multi-user"
            storage: "seaweedfs"
            argo_version: "v3.6.7"
          - k8s_version: "v1.29.2"
            mode: "standalone"
            storage: "seaweedfs"
            argo_version: "v3.6.7"
          - k8s_version: "v1.31.0"
            mode: "multi-user"
            storage: "seaweedfs"
            argo_version: "v3.6.7"
          - k8s_version: "v1.31.0"
            mode: "multi-user"
            storage: "minio"
            argo_version: "v3.6.7"
          - k8s_version: "v1.31.0"
            mode: "standalone"
            storage: "minio"
            argo_version: "v3.6.7"
          - k8s_version: "v1.31.0"
            mode: "standalone"
            storage: "seaweedfs"
            argo_version: "v3.6.7"
          - k8s_version: "v1.31.0"
            mode: "standalone"
            storage: "minio"
            argo_version: "v3.5.14"
    name: KFP Samples - K8s ${{ matrix.k8s_version }} - AWF ${{ matrix.argo_version }} - ${{ matrix.mode }} - ${{ matrix.storage }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Free up disk space
        run: |
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          docker system prune -af --volumes
          docker image prune -af
          ./.github/resources/scripts/free-disk-space.sh

      - name: Create KFP cluster
        id: create-kfp-cluster
        uses: ./.github/actions/kfp-cluster
        with:
          k8s_version: ${{ matrix.k8s_version }}
          multi_user: ${{ matrix.mode == 'multi-user' }}
          storage_backend: ${{ matrix.storage }}
          image_path: ${{ needs.build.outputs.IMAGE_PATH }}
          image_tag: ${{ needs.build.outputs.IMAGE_TAG }}
          image_registry: ${{ needs.build.outputs.IMAGE_REGISTRY }}
          argo_version: ${{ matrix.argo_version }}
        continue-on-error: true

      - name: Build and upload the sample Modelcar image to Kind
        id: build-sample-modelcar-image
        if: ${{ steps.create-kfp-cluster.outcome == 'success' }}
        run: |
          docker build -f samples/v2/modelcar/Dockerfile -t registry.domain.local/modelcar:test .
          kind --name kfp load docker-image registry.domain.local/modelcar:test
        continue-on-error: true

      - name: Forward API port
        id: forward-api-port
        if: ${{ steps.build-sample-modelcar-image.outcome == 'success' }}
        run: ./.github/resources/scripts/forward-port.sh "kubeflow" "ml-pipeline" 8888 8888
        continue-on-error: true

      - name: Install protobuf dependencies & kfp-pipeline-spec
        id: install-protobuf-deps
        uses: ./.github/actions/protobuf

      - name: Install kfp & kfp-kubernetes from source
        id: install-kfp-k8s-deps
        uses: ./.github/actions/kfp-k8s

      - name: Run Samples Tests
        id: tests
        if: ${{ steps.forward-api-port.outcome == 'success' }}
        env:
          KFP_MULTI_USER: ${{ matrix.mode == 'multi-user' }}
          PULL_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python3 -u ./samples/v2/sample_test.py
        continue-on-error: true

      - name: Test SeaweedFS Namespace Isolation
        id: test-namespace-isolation
        if: ${{ matrix.mode == 'multi-user' && matrix.storage == 'seaweedfs' && steps.tests.outcome == 'success' }}
        run: ./test/seaweedfs/namespace_isolation_test.sh
        continue-on-error: true

      - name: Collect failed logs
        if: ${{ steps.create-kfp-cluster.outcome != 'success' || steps.forward-api-port.outcome != 'success' || steps.tests.outcome != 'success' }}
        run: |
          ./.github/resources/scripts/collect-logs.sh --ns kubeflow --output /tmp/tmp_pod_log.txt
          if [ "${{ matrix.mode }}" == "multi-user" ]; then
            ./.github/resources/scripts/collect-logs.sh --ns kubeflow-user-example-com --output /tmp/tmp_user_pod_log.txt
          fi
          exit 1

      - name: Collect test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kfp-samples-tests-artifacts-k8s-${{ matrix.k8s_version }}-awf-${{ matrix.argo_version }}-${{ matrix.mode }}-${{ matrix.storage }}
          path: /tmp/tmp*/*
