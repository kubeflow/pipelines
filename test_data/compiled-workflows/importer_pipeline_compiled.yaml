apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  creationTimestamp: null
  generateName: my-pipe-
spec:
  arguments:
    parameters:
    - name: components-comp-importer
      value: '{"executorLabel":"exec-importer","inputDefinitions":{"parameters":{"uri":{"parameterType":"STRING"}}},"outputDefinitions":{"artifacts":{"artifact":{"artifactType":{"schemaTitle":"system.Dataset","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-comp-importer
      value: '{"artifactUri":{"runtimeParameter":"uri"},"reimport":true,"typeSchema":{"schemaTitle":"system.Dataset","schemaVersion":"0.0.1"}}'
    - name: components-35e72db0aa0c9f3f658bdf4106261026ae722e5b716413f691cda4db8679a44e
      value: '{"executorLabel":"exec-normalize-dataset","inputDefinitions":{"artifacts":{"input_iris_dataset":{"artifactType":{"schemaTitle":"system.Dataset","schemaVersion":"0.0.1"}}},"parameters":{"standard_scaler":{"parameterType":"BOOLEAN"}}},"outputDefinitions":{"artifacts":{"normalized_iris_dataset":{"artifactType":{"schemaTitle":"system.Dataset","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-35e72db0aa0c9f3f658bdf4106261026ae722e5b716413f691cda4db8679a44e
      value: '{"args":["--executor_input","{{$}}","--function_to_execute","normalize_dataset"],"command":["sh","-c","\nif
        ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3
        -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet --no-warn-script-location ''kfp==2.13.0'' ''--no-deps''
        ''typing-extensions\u003e=3.7.4,\u003c5; python_version\u003c\"3.9\"''  \u0026\u0026  python3
        -m pip install --quiet --no-warn-script-location ''pandas==2.2.0'' ''scikit-learn==1.4.0''
        \u0026\u0026 \"$0\" \"$@\"\n","sh","-ec","program_path=$(mktemp -d)\n\nprintf
        \"%s\" \"$0\" \u003e \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true
        python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n","\nimport
        kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef
        normalize_dataset(\n    input_iris_dataset: Input[Dataset], normalized_iris_dataset:
        Output[Dataset], standard_scaler: bool\n):\n    import pandas as pd  # noqa:
        PLC0415\n    from sklearn.preprocessing import MinMaxScaler, StandardScaler  #
        noqa: PLC0415\n\n    with open(input_iris_dataset.path) as f:\n        df
        = pd.read_csv(f)\n    labels = df.pop(\"Labels\")\n\n    scaler = StandardScaler()
        if standard_scaler else MinMaxScaler()\n\n    df = pd.DataFrame(scaler.fit_transform(df))\n    df[\"Labels\"]
        = labels\n    normalized_iris_dataset.metadata[\"state\"] = \"Normalized\"\n    with
        open(normalized_iris_dataset.path, \"w\") as f:\n        df.to_csv(f)\n\n"],"image":"python:3.9"}'
    - name: components-root
      value: '{"dag":{"tasks":{"importer":{"cachingOptions":{},"componentRef":{"name":"comp-importer"},"inputs":{"parameters":{"uri":{"componentInputParameter":"artifact_uri"}}},"taskInfo":{"name":"importer"}},"normalize-dataset":{"cachingOptions":{},"componentRef":{"name":"comp-normalize-dataset"},"dependentTasks":["importer"],"inputs":{"artifacts":{"input_iris_dataset":{"taskOutputArtifact":{"outputArtifactKey":"artifact","producerTask":"importer"}}},"parameters":{"standard_scaler":{"componentInputParameter":"standard_scaler"}}},"taskInfo":{"name":"normalize-dataset"}}}},"inputDefinitions":{"parameters":{"artifact_uri":{"parameterType":"STRING"},"standard_scaler":{"defaultValue":true,"isOptional":true,"parameterType":"BOOLEAN"}}}}'
  entrypoint: entrypoint
  podMetadata:
    annotations:
      pipelines.kubeflow.org/v2_component: "true"
    labels:
      pipelines.kubeflow.org/v2_component: "true"
  serviceAccountName: pipeline-runner
  templates:
    - inputs:
        parameters:
          - name: component
          - name: task
          - name: container
          - name: task-name
          - name: parent-dag-id
          - default: "-1"
            name: iteration-index
          - default: ""
            name: kubernetes-config
      metadata: {}
      name: system-container-driver
      outputs:
        parameters:
          - name: pod-spec-patch
            valueFrom:
              default: ""
              jsonPath: $.pod-spec-patch
          - default: "false"
            name: cached-decision
            valueFrom:
              default: "false"
              jsonPath: $.cached-decision
          - name: condition
            valueFrom:
              default: "true"
              jsonPath: $.condition
      plugin:
        driver-plugin:
          args:
            cache_disabled: false
            cached_decision_path: '{{outputs.parameters.cached-decision.path}}'
            component: '{{inputs.parameters.component}}'
            condition_path: '{{outputs.parameters.condition.path}}'
            container: '{{inputs.parameters.container}}'
            dag_execution_id: '{{inputs.parameters.parent-dag-id}}'
            http_proxy: ""
            https_proxy: ""
            iteration_index: '{{inputs.parameters.iteration-index}}'
            kubernetes_config: '{{inputs.parameters.kubernetes-config}}'
            log_level: ""
            no_proxy: ""
            pipeline_name: namespace/n1/pipeline/hello-world
            pod_spec_patch_path: '{{outputs.parameters.pod-spec-patch.path}}'
            publish_logs: ""
            run_display_name: ""
            run_id: '{{workflow.uid}}'
            run_name: '{{workflow.name}}'
            task: '{{inputs.parameters.task}}'
            task_name: '{{inputs.parameters.task-name}}'
            type: CONTAINER
    - dag:
        tasks:
          - arguments:
              parameters:
                - name: pod-spec-patch
                  value: '{{inputs.parameters.pod-spec-patch}}'
                - name: retry-max-count
                  value: '{{inputs.parameters.retry-max-count}}'
                - name: retry-backoff-duration
                  value: '{{inputs.parameters.retry-backoff-duration}}'
                - name: retry-backoff-factor
                  value: '{{inputs.parameters.retry-backoff-factor}}'
                - name: retry-backoff-max-duration
                  value: '{{inputs.parameters.retry-backoff-max-duration}}'
            name: executor
            template: retry-system-container-impl
            when: '{{inputs.parameters.cached-decision}} != true'
      inputs:
        parameters:
          - name: pod-spec-patch
          - default: "false"
            name: cached-decision
          - default: "0"
            name: retry-max-count
          - default: "0"
            name: retry-backoff-duration
          - default: "0"
            name: retry-backoff-factor
          - default: "0"
            name: retry-backoff-max-duration
      metadata: {}
      name: retry-system-container-executor
      outputs: {}
    - container:
        command:
          - should-be-overridden-during-runtime
        env:
          - name: KFP_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: KFP_POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
        envFrom:
          - configMapRef:
              name: metadata-grpc-configmap
              optional: true
        image: gcr.io/ml-pipeline/should-be-overridden-during-runtime
        name: ""
        resources: {}
        volumeMounts:
          - mountPath: /kfp-launcher
            name: kfp-launcher
          - mountPath: /gcs
            name: gcs-scratch
          - mountPath: /s3
            name: s3-scratch
          - mountPath: /minio
            name: minio-scratch
          - mountPath: /.local
            name: dot-local-scratch
          - mountPath: /.cache
            name: dot-cache-scratch
          - mountPath: /.config
            name: dot-config-scratch
      initContainers:
        - args:
            - --copy
            - /kfp-launcher/launch
          command:
            - launcher-v2
          image: ghcr.io/kubeflow/kfp-launcher
          name: kfp-launcher
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
          volumeMounts:
            - mountPath: /kfp-launcher
              name: kfp-launcher
      inputs:
        parameters:
          - name: pod-spec-patch
          - name: retry-max-count
          - name: retry-backoff-duration
          - name: retry-backoff-factor
          - name: retry-backoff-max-duration
      metadata: {}
      name: retry-system-container-impl
      outputs: {}
      podSpecPatch: '{{inputs.parameters.pod-spec-patch}}'
      retryStrategy:
        backoff:
          duration: '{{inputs.parameters.retry-backoff-duration}}'
          factor: '{{inputs.parameters.retry-backoff-factor}}'
          maxDuration: '{{inputs.parameters.retry-backoff-max-duration}}'
        limit: '{{inputs.parameters.retry-max-count}}'
      volumes:
        - emptyDir: {}
          name: kfp-launcher
        - emptyDir: {}
          name: gcs-scratch
        - emptyDir: {}
          name: s3-scratch
        - emptyDir: {}
          name: minio-scratch
        - emptyDir: {}
          name: dot-local-scratch
        - emptyDir: {}
          name: dot-cache-scratch
        - emptyDir: {}
          name: dot-config-scratch
    - dag:
        tasks:
          - arguments:
              parameters:
                - name: pod-spec-patch
                  value: '{{inputs.parameters.pod-spec-patch}}'
            name: executor
            template: system-container-impl
            when: '{{inputs.parameters.cached-decision}} != true'
      inputs:
        parameters:
          - name: pod-spec-patch
          - default: "false"
            name: cached-decision
      metadata: {}
      name: system-container-executor
      outputs: {}
    - container:
        command:
          - should-be-overridden-during-runtime
        env:
          - name: KFP_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: KFP_POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
        envFrom:
          - configMapRef:
              name: metadata-grpc-configmap
              optional: true
        image: gcr.io/ml-pipeline/should-be-overridden-during-runtime
        name: ""
        resources: {}
        volumeMounts:
          - mountPath: /kfp-launcher
            name: kfp-launcher
          - mountPath: /gcs
            name: gcs-scratch
          - mountPath: /s3
            name: s3-scratch
          - mountPath: /minio
            name: minio-scratch
          - mountPath: /.local
            name: dot-local-scratch
          - mountPath: /.cache
            name: dot-cache-scratch
          - mountPath: /.config
            name: dot-config-scratch
      initContainers:
        - args:
            - --copy
            - /kfp-launcher/launch
          command:
            - launcher-v2
          image: ghcr.io/kubeflow/kfp-launcher
          name: kfp-launcher
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
          volumeMounts:
            - mountPath: /kfp-launcher
              name: kfp-launcher
      inputs:
        parameters:
          - name: pod-spec-patch
      metadata: {}
      name: system-container-impl
      outputs: {}
      podSpecPatch: '{{inputs.parameters.pod-spec-patch}}'
      volumes:
        - emptyDir: {}
          name: kfp-launcher
        - emptyDir: {}
          name: gcs-scratch
        - emptyDir: {}
          name: s3-scratch
        - emptyDir: {}
          name: minio-scratch
        - emptyDir: {}
          name: dot-local-scratch
        - emptyDir: {}
          name: dot-cache-scratch
        - emptyDir: {}
          name: dot-config-scratch
    - dag:
        tasks:
          - arguments:
              parameters:
                - name: component
                  value: '{{workflow.parameters.components-203fce8adabe0cfa7da54b9d3ff79c772136c926974659b51c378727c7ccdfb7}}'
                - name: task
                  value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-hello-world"},"inputs":{"parameters":{"text":{"componentInputParameter":"text"}}},"retryPolicy":{"backoffDuration":"1s","backoffFactor":2,"backoffMaxDuration":"3600s","maxRetryCount":2},"taskInfo":{"name":"hello-world"}}'
                - name: container
                  value: '{{workflow.parameters.implementations-203fce8adabe0cfa7da54b9d3ff79c772136c926974659b51c378727c7ccdfb7}}'
                - name: task-name
                  value: hello-world
                - name: parent-dag-id
                  value: '{{inputs.parameters.parent-dag-id}}'
            name: hello-world-driver
            template: system-container-driver
          - arguments:
              parameters:
                - name: pod-spec-patch
                  value: '{{tasks.hello-world-driver.outputs.parameters.pod-spec-patch}}'
                - default: "false"
                  name: cached-decision
                  value: '{{tasks.hello-world-driver.outputs.parameters.cached-decision}}'
                - name: retry-max-count
                  value: "2"
                - name: retry-backoff-duration
                  value: "1"
                - name: retry-backoff-factor
                  value: "2"
                - name: retry-backoff-max-duration
                  value: "3600"
            depends: hello-world-driver.Succeeded
            name: hello-world
            template: retry-system-container-executor
          - arguments:
              parameters:
                - name: component
                  value: '{{workflow.parameters.components-203fce8adabe0cfa7da54b9d3ff79c772136c926974659b51c378727c7ccdfb7}}'
                - name: task
                  value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-hello-world"},"inputs":{"parameters":{"text":{"componentInputParameter":"text"}}},"taskInfo":{"name":"hello-world-2"}}'
                - name: container
                  value: '{{workflow.parameters.implementations-203fce8adabe0cfa7da54b9d3ff79c772136c926974659b51c378727c7ccdfb7}}'
                - name: task-name
                  value: hello-world-non-retry
                - name: parent-dag-id
                  value: '{{inputs.parameters.parent-dag-id}}'
            name: hello-world-non-retry-driver
            template: system-container-driver
          - arguments:
              parameters:
                - name: pod-spec-patch
                  value: '{{tasks.hello-world-non-retry-driver.outputs.parameters.pod-spec-patch}}'
                - default: "false"
                  name: cached-decision
                  value: '{{tasks.hello-world-non-retry-driver.outputs.parameters.cached-decision}}'
            depends: hello-world-non-retry-driver.Succeeded
            name: hello-world-non-retry
            template: system-container-executor
      inputs:
        parameters:
          - name: parent-dag-id
      metadata: {}
      name: root
      outputs: {}
    - inputs:
        parameters:
          - name: component
          - default: ""
            name: runtime-config
          - default: ""
            name: task
          - default: ""
            name: task-name
          - default: "0"
            name: parent-dag-id
          - default: "-1"
            name: iteration-index
          - default: DAG
            name: driver-type
      metadata: {}
      name: system-dag-driver
      outputs:
        parameters:
          - name: execution-id
            valueFrom:
              jsonPath: $.execution-id
          - name: iteration-count
            valueFrom:
              default: "0"
              jsonPath: $.iteration-count
          - name: condition
            valueFrom:
              default: "true"
              jsonPath: $.condition
      plugin:
        driver-plugin:
          args:
            cache_disabled: false
            component: '{{inputs.parameters.component}}'
            condition_path: '{{outputs.parameters.condition.path}}'
            dag_execution_id: '{{inputs.parameters.parent-dag-id}}'
            execution_id_path: '{{outputs.parameters.execution-id.path}}'
            http_proxy: ""
            https_proxy: ""
            iteration_count_path: '{{outputs.parameters.iteration-count.path}}'
            iteration_index: '{{inputs.parameters.iteration-index}}'
            log_level: ""
            no_proxy: ""
            pipeline_name: namespace/n1/pipeline/hello-world
            publish_logs: ""
            run_display_name: ""
            run_id: '{{workflow.uid}}'
            run_name: '{{workflow.name}}'
            runtime_config: '{{inputs.parameters.runtime-config}}'
            task: '{{inputs.parameters.task}}'
            task_name: '{{inputs.parameters.task-name}}'
            type: '{{inputs.parameters.driver-type}}'
    - dag:
        tasks:
          - arguments:
              parameters:
                - name: component
                  value: '{{workflow.parameters.components-root}}'
                - name: runtime-config
                  value: '{"parameters":{"text":{"stringValue":"hi there"}}}'
                - name: driver-type
                  value: ROOT_DAG
            name: root-driver
            template: system-dag-driver
          - arguments:
              parameters:
                - name: parent-dag-id
                  value: '{{tasks.root-driver.outputs.parameters.execution-id}}'
                - name: condition
                  value: ""
            depends: root-driver.Succeeded
            name: root
            template: root
      inputs: {}
      metadata: {}
      name: entrypoint
      outputs: {}
status:
  finishedAt: null
  startedAt: null
