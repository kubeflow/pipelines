apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  creationTimestamp: null
  generateName: xgboost-sample-pipeline-
spec:
  arguments:
    parameters:
    - name: components-7ad329a2ac89be6e1debabcd3d4912ec1f9f56f8d4b9fe479da5dd1ed4fc45e2
      value: '{"executorLabel":"exec-chicago-taxi-trips-dataset","inputDefinitions":{"parameters":{"format":{"defaultValue":"csv","isOptional":true,"parameterType":"STRING"},"limit":{"defaultValue":1000,"isOptional":true,"parameterType":"NUMBER_INTEGER"},"select":{"defaultValue":"trip_id,taxi_id,trip_start_timestamp,trip_end_timestamp,trip_seconds,trip_miles,pickup_census_tract,dropoff_census_tract,pickup_community_area,dropoff_community_area,fare,tips,tolls,extras,trip_total,payment_type,company,pickup_centroid_latitude,pickup_centroid_longitude,pickup_centroid_location,dropoff_centroid_latitude,dropoff_centroid_longitude,dropoff_centroid_location","isOptional":true,"parameterType":"STRING"},"where":{"defaultValue":"trip_start_timestamp\u003e=\"1900-01-01\"
        AND trip_start_timestamp\u003c\"2100-01-01\"","isOptional":true,"parameterType":"STRING"}}},"outputDefinitions":{"artifacts":{"table":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-7ad329a2ac89be6e1debabcd3d4912ec1f9f56f8d4b9fe479da5dd1ed4fc45e2
      value: '{"command":["sh","-c","set -e -x -o pipefail\noutput_path=\"$0\"\nselect=\"$1\"\nwhere=\"$2\"\nlimit=\"$3\"\nformat=\"$4\"\nmkdir
        -p \"$(dirname \"$output_path\")\"\ncurl --get ''https://data.cityofchicago.org/resource/wrvz-psew.''\"${format}\"
        \\\n    --data-urlencode ''$limit=''\"${limit}\" \\\n    --data-urlencode
        ''$where=''\"${where}\" \\\n    --data-urlencode ''$select=''\"${select}\"
        \\\n    | tr -d ''\"'' \u003e \"$output_path\"  # Removing unneeded quotes
        around all numbers\n","{{$.outputs.artifacts[''table''].path}}","{{$.inputs.parameters[''select'']}}","{{$.inputs.parameters[''where'']}}","{{$.inputs.parameters[''limit'']}}","{{$.inputs.parameters[''format'']}}"],"image":"byrnedo/alpine-curl@sha256:548379d0a4a0c08b9e55d9d87a592b7d35d9ab3037f4936f5ccd09d0b625a342"}'
    - name: components-4c133da6a0e29aa7910d0718119ec596bd6681678360ab60e38dae9339b3efb9
      value: '{"executorLabel":"exec-convert-csv-to-apache-parquet","inputDefinitions":{"artifacts":{"data":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}}},"outputDefinitions":{"artifacts":{"output_data":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-4c133da6a0e29aa7910d0718119ec596bd6681678360ab60e38dae9339b3efb9
      value: '{"args":["--data","{{$.inputs.artifacts[''data''].path}}","--output-data","{{$.outputs.artifacts[''output_data''].path}}"],"command":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet --no-warn-script-location ''pyarrow==0.17.1''
        || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
        ''pyarrow==0.17.1'' --user) \u0026\u0026 \"$0\" \"$@\"","python3","-u","-c","def
        _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
        exist_ok=True)\n    return file_path\n\ndef convert_csv_to_apache_parquet(\n    data_path,\n    output_data_path,\n):\n    ''''''Converts
        CSV table to Apache Parquet.\n\n    [Apache Parquet](https://parquet.apache.org/)\n\n    Annotations:\n        author:
        Alexey Volkov \u003calexey.volkov@ark-kun.com\u003e\n    ''''''\n    from
        pyarrow import csv, parquet\n\n    table = csv.read_csv(data_path)\n    parquet.write_table(table,
        output_data_path)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Convert
        csv to apache parquet'', description=''Converts CSV table to Apache Parquet.\\n\\n    [Apache
        Parquet](https://parquet.apache.org/)\\n\\n    Annotations:\\n        author:
        Alexey Volkov \u003calexey.volkov@ark-kun.com\u003e'')\n_parser.add_argument(\"--data\",
        dest=\"data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-data\",
        dest=\"output_data_path\", type=_make_parent_dirs_and_return_path, required=True,
        default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n_output_files
        = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = convert_csv_to_apache_parquet(**_parsed_args)\n\n_output_serializers
        = [\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
        OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],"image":"python:3.7"}'
    - name: components-d1f109ba389501999e4d468354015c7d3a7947affcf7e4697c201c9c1bd6f88b
      value: '{"executorLabel":"exec-xgboost-predict","inputDefinitions":{"artifacts":{"data":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}},"model":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}},"parameters":{"label_column":{"isOptional":true,"parameterType":"NUMBER_INTEGER"}}},"outputDefinitions":{"artifacts":{"predictions":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-d1f109ba389501999e4d468354015c7d3a7947affcf7e4697c201c9c1bd6f88b
      value: '{"args":["--data","{{$.inputs.artifacts[''data''].path}}","--model","{{$.inputs.artifacts[''model''].path}}","{\"IfPresent\":
        {\"InputName\": \"label_column\", \"Then\": [\"--label-column\", \"{{$.inputs.parameters[''label_column'']}}\"]}}","--predictions","{{$.outputs.artifacts[''predictions''].path}}"],"command":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet --no-warn-script-location ''xgboost==1.1.1''
        ''pandas==1.0.5'' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location ''xgboost==1.1.1'' ''pandas==1.0.5'' --user)
        \u0026\u0026 \"$0\" \"$@\"","python3","-u","-c","def _make_parent_dirs_and_return_path(file_path:
        str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
        file_path\n\ndef xgboost_predict(\n    data_path,  # Also supports LibSVM\n    model_path,\n    predictions_path,\n    label_column
        = None,\n):\n    ''''''Make predictions using a trained XGBoost model.\n\n    Args:\n        data_path:
        Path for the feature data in CSV format.\n        model_path: Path for the
        trained model in binary XGBoost format.\n        predictions_path: Output
        path for the predictions.\n        label_column: Column containing the label
        data.\n\n    Annotations:\n        author: Alexey Volkov \u003calexey.volkov@ark-kun.com\u003e\n    ''''''\n    from
        pathlib import Path\n\n    import numpy\n    import pandas\n    import xgboost\n\n    df
        = pandas.read_csv(\n        data_path,\n    )\n\n    if label_column is not
        None:\n        df = df.drop(columns=[df.columns[label_column]])\n\n    testing_data
        = xgboost.DMatrix(\n        data=df,\n    )\n\n    model = xgboost.Booster(model_file=model_path)\n\n    predictions
        = model.predict(testing_data)\n\n    Path(predictions_path).parent.mkdir(parents=True,
        exist_ok=True)\n    numpy.savetxt(predictions_path, predictions)\n\nimport
        argparse\n_parser = argparse.ArgumentParser(prog=''Xgboost predict'', description=''Make
        predictions using a trained XGBoost model.\\n\\n    Args:\\n        data_path:
        Path for the feature data in CSV format.\\n        model_path: Path for the
        trained model in binary XGBoost format.\\n        predictions_path: Output
        path for the predictions.\\n        label_column: Column containing the label
        data.\\n\\n    Annotations:\\n        author: Alexey Volkov \u003calexey.volkov@ark-kun.com\u003e'')\n_parser.add_argument(\"--data\",
        dest=\"data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
        dest=\"model_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column\",
        dest=\"label_column\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--predictions\",
        dest=\"predictions_path\", type=_make_parent_dirs_and_return_path, required=True,
        default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
        = xgboost_predict(**_parsed_args)\n"],"image":"python:3.7"}'
    - name: components-c62f35abca448022418477855ae1839ecc171d48bb1830ab69e1f75c0649519a
      value: '{"executorLabel":"exec-xgboost-predict-2","inputDefinitions":{"artifacts":{"data":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}},"model":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}},"parameters":{"label_column_name":{"isOptional":true,"parameterType":"STRING"}}},"outputDefinitions":{"artifacts":{"predictions":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-c62f35abca448022418477855ae1839ecc171d48bb1830ab69e1f75c0649519a
      value: '{"args":["--data","{{$.inputs.artifacts[''data''].path}}","--model","{{$.inputs.artifacts[''model''].path}}","{\"IfPresent\":
        {\"InputName\": \"label_column_name\", \"Then\": [\"--label-column-name\",
        \"{{$.inputs.parameters[''label_column_name'']}}\"]}}","--predictions","{{$.outputs.artifacts[''predictions''].path}}"],"command":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet --no-warn-script-location ''xgboost==1.1.1''
        ''pandas==1.0.5'' ''pyarrow==0.17.1'' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
        -m pip install --quiet --no-warn-script-location ''xgboost==1.1.1'' ''pandas==1.0.5''
        ''pyarrow==0.17.1'' --user) \u0026\u0026 \"$0\" \"$@\"","python3","-u","-c","def
        _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
        exist_ok=True)\n    return file_path\n\ndef xgboost_predict(\n    data_path,\n    model_path,\n    predictions_path,\n    label_column_name
        = None,\n):\n    ''''''Make predictions using a trained XGBoost model.\n\n    Args:\n        data_path:
        Path for the feature data in Apache Parquet format.\n        model_path: Path
        for the trained model in binary XGBoost format.\n        predictions_path:
        Output path for the predictions.\n        label_column_name: Optional. Name
        of the column containing the label data that is excluded during the prediction.\n\n    Annotations:\n        author:
        Alexey Volkov \u003calexey.volkov@ark-kun.com\u003e\n    ''''''\n    from
        pathlib import Path\n\n    import numpy\n    import pandas\n    import xgboost\n\n    #
        Loading data\n    df = pandas.read_parquet(data_path)\n    if label_column_name:\n        df
        = df.drop(columns=[label_column_name])\n\n    evaluation_data = xgboost.DMatrix(\n        data=df,\n    )\n\n    #
        Training\n    model = xgboost.Booster(model_file=model_path)\n\n    predictions
        = model.predict(evaluation_data)\n\n    Path(predictions_path).parent.mkdir(parents=True,
        exist_ok=True)\n    numpy.savetxt(predictions_path, predictions)\n\nimport
        argparse\n_parser = argparse.ArgumentParser(prog=''Xgboost predict'', description=''Make
        predictions using a trained XGBoost model.\\n\\n    Args:\\n        data_path:
        Path for the feature data in Apache Parquet format.\\n        model_path:
        Path for the trained model in binary XGBoost format.\\n        predictions_path:
        Output path for the predictions.\\n        label_column_name: Optional. Name
        of the column containing the label data that is excluded during the prediction.\\n\\n    Annotations:\\n        author:
        Alexey Volkov \u003calexey.volkov@ark-kun.com\u003e'')\n_parser.add_argument(\"--data\",
        dest=\"data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
        dest=\"model_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column-name\",
        dest=\"label_column_name\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--predictions\",
        dest=\"predictions_path\", type=_make_parent_dirs_and_return_path, required=True,
        default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n_outputs
        = xgboost_predict(**_parsed_args)\n"],"image":"python:3.7"}'
    - name: components-0543e77f07b487833b7b7adaedea608d72a11fd2a76cfe13a80ea1431ce92901
      value: '{"executorLabel":"exec-xgboost-train","inputDefinitions":{"artifacts":{"starting_model":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"},"isOptional":true},"training_data":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}},"parameters":{"booster":{"defaultValue":"gbtree","isOptional":true,"parameterType":"STRING"},"booster_params":{"isOptional":true,"parameterType":"STRUCT"},"label_column":{"defaultValue":0,"isOptional":true,"parameterType":"NUMBER_INTEGER"},"learning_rate":{"defaultValue":0.3,"isOptional":true,"parameterType":"NUMBER_DOUBLE"},"max_depth":{"defaultValue":6,"isOptional":true,"parameterType":"NUMBER_INTEGER"},"min_split_loss":{"defaultValue":0,"isOptional":true,"parameterType":"NUMBER_DOUBLE"},"num_iterations":{"defaultValue":10,"isOptional":true,"parameterType":"NUMBER_INTEGER"},"objective":{"defaultValue":"reg:squarederror","isOptional":true,"parameterType":"STRING"}}},"outputDefinitions":{"artifacts":{"model":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}},"model_config":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-0543e77f07b487833b7b7adaedea608d72a11fd2a76cfe13a80ea1431ce92901
      value: '{"args":["--training-data","{{$.inputs.artifacts[''training_data''].path}}","{\"IfPresent\":
        {\"InputName\": \"starting_model\", \"Then\": [\"--starting-model\", \"{{$.inputs.artifacts[''starting_model''].path}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"label_column\", \"Then\": [\"--label-column\", \"{{$.inputs.parameters[''label_column'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"num_iterations\", \"Then\": [\"--num-iterations\", \"{{$.inputs.parameters[''num_iterations'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"booster_params\", \"Then\": [\"--booster-params\", \"{{$.inputs.parameters[''booster_params'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"objective\", \"Then\": [\"--objective\", \"{{$.inputs.parameters[''objective'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"booster\", \"Then\": [\"--booster\", \"{{$.inputs.parameters[''booster'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"learning_rate\", \"Then\": [\"--learning-rate\", \"{{$.inputs.parameters[''learning_rate'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"min_split_loss\", \"Then\": [\"--min-split-loss\", \"{{$.inputs.parameters[''min_split_loss'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"max_depth\", \"Then\": [\"--max-depth\", \"{{$.inputs.parameters[''max_depth'']}}\"]}}","--model","{{$.outputs.artifacts[''model''].path}}","--model-config","{{$.outputs.artifacts[''model_config''].path}}"],"command":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet --no-warn-script-location ''xgboost==1.1.1''
        ''pandas==1.0.5'' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
        --quiet --no-warn-script-location ''xgboost==1.1.1'' ''pandas==1.0.5'' --user)
        \u0026\u0026 \"$0\" \"$@\"","python3","-u","-c","def _make_parent_dirs_and_return_path(file_path:
        str):\n    import os\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return
        file_path\n\ndef xgboost_train(\n    training_data_path,  # Also supports
        LibSVM\n    model_path,\n    model_config_path,\n    starting_model_path =
        None,\n\n    label_column = 0,\n    num_iterations = 10,\n    booster_params
        = None,\n\n    # Booster parameters\n    objective = ''reg:squarederror'',\n    booster
        = ''gbtree'',\n    learning_rate = 0.3,\n    min_split_loss = 0,\n    max_depth
        = 6,\n):\n    ''''''Train an XGBoost model.\n\n    Args:\n        training_data_path:
        Path for the training data in CSV format.\n        model_path: Output path
        for the trained model in binary XGBoost format.\n        model_config_path:
        Output path for the internal parameter configuration of Booster as a JSON
        string.\n        starting_model_path: Path for the existing trained model
        to start from.\n        label_column: Column containing the label data.\n        num_boost_rounds:
        Number of boosting iterations.\n        booster_params: Parameters for the
        booster. See https://xgboost.readthedocs.io/en/latest/parameter.html\n        objective:
        The learning task and the corresponding learning objective.\n            See
        https://xgboost.readthedocs.io/en/latest/parameter.html#learning-task-parameters\n            The
        most common values are:\n            \"reg:squarederror\" - Regression with
        squared loss (default).\n            \"reg:logistic\" - Logistic regression.\n            \"binary:logistic\"
        - Logistic regression for binary classification, output probability.\n            \"binary:logitraw\"
        - Logistic regression for binary classification, output score before logistic
        transformation\n            \"rank:pairwise\" - Use LambdaMART to perform
        pairwise ranking where the pairwise loss is minimized\n            \"rank:ndcg\"
        - Use LambdaMART to perform list-wise ranking where Normalized Discounted
        Cumulative Gain (NDCG) is maximized\n\n    Annotations:\n        author: Alexey
        Volkov \u003calexey.volkov@ark-kun.com\u003e\n    ''''''\n    import pandas\n    import
        xgboost\n\n    df = pandas.read_csv(\n        training_data_path,\n    )\n\n    training_data
        = xgboost.DMatrix(\n        data=df.drop(columns=[df.columns[label_column]]),\n        label=df[df.columns[label_column]],\n    )\n\n    booster_params
        = booster_params or {}\n    booster_params.setdefault(''objective'', objective)\n    booster_params.setdefault(''booster'',
        booster)\n    booster_params.setdefault(''learning_rate'', learning_rate)\n    booster_params.setdefault(''min_split_loss'',
        min_split_loss)\n    booster_params.setdefault(''max_depth'', max_depth)\n\n    starting_model
        = None\n    if starting_model_path:\n        starting_model = xgboost.Booster(model_file=starting_model_path)\n\n    model
        = xgboost.train(\n        params=booster_params,\n        dtrain=training_data,\n        num_boost_round=num_iterations,\n        xgb_model=starting_model\n    )\n\n    #
        Saving the model in binary format\n    model.save_model(model_path)\n\n    model_config_str
        = model.save_config()\n    with open(model_config_path, ''w'') as model_config_file:\n        model_config_file.write(model_config_str)\n\nimport
        json\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Xgboost train'',
        description=''Train an XGBoost model.\\n\\n    Args:\\n        training_data_path:
        Path for the training data in CSV format.\\n        model_path: Output path
        for the trained model in binary XGBoost format.\\n        model_config_path:
        Output path for the internal parameter configuration of Booster as a JSON
        string.\\n        starting_model_path: Path for the existing trained model
        to start from.\\n        label_column: Column containing the label data.\\n        num_boost_rounds:
        Number of boosting iterations.\\n        booster_params: Parameters for the
        booster. See https://xgboost.readthedocs.io/en/latest/parameter.html\\n        objective:
        The learning task and the corresponding learning objective.\\n            See
        https://xgboost.readthedocs.io/en/latest/parameter.html#learning-task-parameters\\n            The
        most common values are:\\n            \"reg:squarederror\" - Regression with
        squared loss (default).\\n            \"reg:logistic\" - Logistic regression.\\n            \"binary:logistic\"
        - Logistic regression for binary classification, output probability.\\n            \"binary:logitraw\"
        - Logistic regression for binary classification, output score before logistic
        transformation\\n            \"rank:pairwise\" - Use LambdaMART to perform
        pairwise ranking where the pairwise loss is minimized\\n            \"rank:ndcg\"
        - Use LambdaMART to perform list-wise ranking where Normalized Discounted
        Cumulative Gain (NDCG) is maximized\\n\\n    Annotations:\\n        author:
        Alexey Volkov \u003calexey.volkov@ark-kun.com\u003e'')\n_parser.add_argument(\"--training-data\",
        dest=\"training_data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--starting-model\",
        dest=\"starting_model_path\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column\",
        dest=\"label_column\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--num-iterations\",
        dest=\"num_iterations\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--booster-params\",
        dest=\"booster_params\", type=json.loads, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--objective\",
        dest=\"objective\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--booster\",
        dest=\"booster\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--learning-rate\",
        dest=\"learning_rate\", type=float, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--min-split-loss\",
        dest=\"min_split_loss\", type=float, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--max-depth\",
        dest=\"max_depth\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
        dest=\"model_path\", type=_make_parent_dirs_and_return_path, required=True,
        default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-config\", dest=\"model_config_path\",
        type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)\n_parsed_args
        = vars(_parser.parse_args())\n\n_outputs = xgboost_train(**_parsed_args)\n"],"image":"python:3.7"}'
    - name: components-0c2f0a07f4057d4f8388562ccd9bbf6ea50c2603b7efb45cadb1ddc872a26cb3
      value: '{"executorLabel":"exec-xgboost-train-2","inputDefinitions":{"artifacts":{"starting_model":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"},"isOptional":true},"training_data":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}},"parameters":{"booster":{"defaultValue":"gbtree","isOptional":true,"parameterType":"STRING"},"booster_params":{"isOptional":true,"parameterType":"STRUCT"},"label_column_name":{"parameterType":"STRING"},"learning_rate":{"defaultValue":0.3,"isOptional":true,"parameterType":"NUMBER_DOUBLE"},"max_depth":{"defaultValue":6,"isOptional":true,"parameterType":"NUMBER_INTEGER"},"min_split_loss":{"defaultValue":0,"isOptional":true,"parameterType":"NUMBER_DOUBLE"},"num_iterations":{"defaultValue":10,"isOptional":true,"parameterType":"NUMBER_INTEGER"},"objective":{"defaultValue":"reg:squarederror","isOptional":true,"parameterType":"STRING"}}},"outputDefinitions":{"artifacts":{"model":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}},"model_config":{"artifactType":{"schemaTitle":"system.Artifact","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-0c2f0a07f4057d4f8388562ccd9bbf6ea50c2603b7efb45cadb1ddc872a26cb3
      value: '{"args":["--training-data","{{$.inputs.artifacts[''training_data''].path}}","--label-column-name","{{$.inputs.parameters[''label_column_name'']}}","{\"IfPresent\":
        {\"InputName\": \"starting_model\", \"Then\": [\"--starting-model\", \"{{$.inputs.artifacts[''starting_model''].path}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"num_iterations\", \"Then\": [\"--num-iterations\", \"{{$.inputs.parameters[''num_iterations'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"booster_params\", \"Then\": [\"--booster-params\", \"{{$.inputs.parameters[''booster_params'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"objective\", \"Then\": [\"--objective\", \"{{$.inputs.parameters[''objective'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"booster\", \"Then\": [\"--booster\", \"{{$.inputs.parameters[''booster'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"learning_rate\", \"Then\": [\"--learning-rate\", \"{{$.inputs.parameters[''learning_rate'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"min_split_loss\", \"Then\": [\"--min-split-loss\", \"{{$.inputs.parameters[''min_split_loss'']}}\"]}}","{\"IfPresent\":
        {\"InputName\": \"max_depth\", \"Then\": [\"--max-depth\", \"{{$.inputs.parameters[''max_depth'']}}\"]}}","--model","{{$.outputs.artifacts[''model''].path}}","--model-config","{{$.outputs.artifacts[''model_config''].path}}"],"command":["sh","-c","(PIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet --no-warn-script-location ''xgboost==1.1.1''
        ''pandas==1.0.5'' ''pyarrow==0.17.1'' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
        -m pip install --quiet --no-warn-script-location ''xgboost==1.1.1'' ''pandas==1.0.5''
        ''pyarrow==0.17.1'' --user) \u0026\u0026 \"$0\" \"$@\"","python3","-u","-c","def
        _make_parent_dirs_and_return_path(file_path: str):\n    import os\n    os.makedirs(os.path.dirname(file_path),
        exist_ok=True)\n    return file_path\n\ndef xgboost_train(\n    training_data_path,\n    model_path,\n    model_config_path,\n    label_column_name,\n\n    starting_model_path
        = None,\n\n    num_iterations = 10,\n    booster_params = None,\n\n    # Booster
        parameters\n    objective = ''reg:squarederror'',\n    booster = ''gbtree'',\n    learning_rate
        = 0.3,\n    min_split_loss = 0,\n    max_depth = 6,\n):\n    ''''''Train an
        XGBoost model.\n\n    Args:\n        training_data_path: Path for the training
        data in Apache Parquet format.\n        model_path: Output path for the trained
        model in binary XGBoost format.\n        model_config_path: Output path for
        the internal parameter configuration of Booster as a JSON string.\n        starting_model_path:
        Path for the existing trained model to start from.\n        label_column_name:
        Name of the column containing the label data.\n        num_boost_rounds: Number
        of boosting iterations.\n        booster_params: Parameters for the booster.
        See https://xgboost.readthedocs.io/en/latest/parameter.html\n        objective:
        The learning task and the corresponding learning objective.\n            See
        https://xgboost.readthedocs.io/en/latest/parameter.html#learning-task-parameters\n            The
        most common values are:\n            \"reg:squarederror\" - Regression with
        squared loss (default).\n            \"reg:logistic\" - Logistic regression.\n            \"binary:logistic\"
        - Logistic regression for binary classification, output probability.\n            \"binary:logitraw\"
        - Logistic regression for binary classification, output score before logistic
        transformation\n            \"rank:pairwise\" - Use LambdaMART to perform
        pairwise ranking where the pairwise loss is minimized\n            \"rank:ndcg\"
        - Use LambdaMART to perform list-wise ranking where Normalized Discounted
        Cumulative Gain (NDCG) is maximized\n\n    Annotations:\n        author: Alexey
        Volkov \u003calexey.volkov@ark-kun.com\u003e\n    ''''''\n    import pandas\n    import
        xgboost\n\n    # Loading data\n    df = pandas.read_parquet(training_data_path)\n    training_data
        = xgboost.DMatrix(\n        data=df.drop(columns=[label_column_name]),\n        label=df[[label_column_name]],\n    )\n    #
        Training\n    booster_params = booster_params or {}\n    booster_params.setdefault(''objective'',
        objective)\n    booster_params.setdefault(''booster'', booster)\n    booster_params.setdefault(''learning_rate'',
        learning_rate)\n    booster_params.setdefault(''min_split_loss'', min_split_loss)\n    booster_params.setdefault(''max_depth'',
        max_depth)\n\n    starting_model = None\n    if starting_model_path:\n        starting_model
        = xgboost.Booster(model_file=starting_model_path)\n\n    model = xgboost.train(\n        params=booster_params,\n        dtrain=training_data,\n        num_boost_round=num_iterations,\n        xgb_model=starting_model\n    )\n\n    #
        Saving the model in binary format\n    model.save_model(model_path)\n\n    model_config_str
        = model.save_config()\n    with open(model_config_path, ''w'') as model_config_file:\n        model_config_file.write(model_config_str)\n\nimport
        json\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Xgboost train'',
        description=''Train an XGBoost model.\\n\\n    Args:\\n        training_data_path:
        Path for the training data in Apache Parquet format.\\n        model_path:
        Output path for the trained model in binary XGBoost format.\\n        model_config_path:
        Output path for the internal parameter configuration of Booster as a JSON
        string.\\n        starting_model_path: Path for the existing trained model
        to start from.\\n        label_column_name: Name of the column containing
        the label data.\\n        num_boost_rounds: Number of boosting iterations.\\n        booster_params:
        Parameters for the booster. See https://xgboost.readthedocs.io/en/latest/parameter.html\\n        objective:
        The learning task and the corresponding learning objective.\\n            See
        https://xgboost.readthedocs.io/en/latest/parameter.html#learning-task-parameters\\n            The
        most common values are:\\n            \"reg:squarederror\" - Regression with
        squared loss (default).\\n            \"reg:logistic\" - Logistic regression.\\n            \"binary:logistic\"
        - Logistic regression for binary classification, output probability.\\n            \"binary:logitraw\"
        - Logistic regression for binary classification, output score before logistic
        transformation\\n            \"rank:pairwise\" - Use LambdaMART to perform
        pairwise ranking where the pairwise loss is minimized\\n            \"rank:ndcg\"
        - Use LambdaMART to perform list-wise ranking where Normalized Discounted
        Cumulative Gain (NDCG) is maximized\\n\\n    Annotations:\\n        author:
        Alexey Volkov \u003calexey.volkov@ark-kun.com\u003e'')\n_parser.add_argument(\"--training-data\",
        dest=\"training_data_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--label-column-name\",
        dest=\"label_column_name\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--starting-model\",
        dest=\"starting_model_path\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--num-iterations\",
        dest=\"num_iterations\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--booster-params\",
        dest=\"booster_params\", type=json.loads, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--objective\",
        dest=\"objective\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--booster\",
        dest=\"booster\", type=str, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--learning-rate\",
        dest=\"learning_rate\", type=float, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--min-split-loss\",
        dest=\"min_split_loss\", type=float, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--max-depth\",
        dest=\"max_depth\", type=int, required=False, default=argparse.SUPPRESS)\n_parser.add_argument(\"--model\",
        dest=\"model_path\", type=_make_parent_dirs_and_return_path, required=True,
        default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-config\", dest=\"model_config_path\",
        type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)\n_parsed_args
        = vars(_parser.parse_args())\n\n_outputs = xgboost_train(**_parsed_args)\n"],"image":"python:3.7"}'
    - name: components-root
      value: '{"dag":{"tasks":{"chicago-taxi-trips-dataset":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-chicago-taxi-trips-dataset"},"inputs":{"parameters":{"limit":{"runtimeValue":{"constant":10000}},"select":{"runtimeValue":{"constant":"tips,trip_seconds,trip_miles,pickup_community_area,dropoff_community_area,fare,tolls,extras,trip_total"}},"where":{"runtimeValue":{"constant":"trip_start_timestamp
        \u003e= \"2019-01-01\" AND trip_start_timestamp \u003c \"2019-02-01\""}}}},"taskInfo":{"name":"chicago-taxi-trips-dataset"}},"convert-csv-to-apache-parquet":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-convert-csv-to-apache-parquet"},"dependentTasks":["chicago-taxi-trips-dataset"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"table","producerTask":"chicago-taxi-trips-dataset"}}}},"taskInfo":{"name":"convert-csv-to-apache-parquet"}},"xgboost-predict":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-predict"},"dependentTasks":["chicago-taxi-trips-dataset","xgboost-train"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"table","producerTask":"chicago-taxi-trips-dataset"}},"model":{"taskOutputArtifact":{"outputArtifactKey":"model","producerTask":"xgboost-train"}}},"parameters":{"label_column":{"runtimeValue":{"constant":0}}}},"taskInfo":{"name":"xgboost-predict"}},"xgboost-predict-2":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-predict-2"},"dependentTasks":["convert-csv-to-apache-parquet","xgboost-train-2"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"output_data","producerTask":"convert-csv-to-apache-parquet"}},"model":{"taskOutputArtifact":{"outputArtifactKey":"model","producerTask":"xgboost-train-2"}}},"parameters":{"label_column_name":{"runtimeValue":{"constant":"tips"}}}},"taskInfo":{"name":"xgboost-predict-2"}},"xgboost-predict-3":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-predict-3"},"dependentTasks":["convert-csv-to-apache-parquet","xgboost-train"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"output_data","producerTask":"convert-csv-to-apache-parquet"}},"model":{"taskOutputArtifact":{"outputArtifactKey":"model","producerTask":"xgboost-train"}}},"parameters":{"label_column_name":{"runtimeValue":{"constant":"tips"}}}},"taskInfo":{"name":"xgboost-predict-3"}},"xgboost-predict-4":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-predict-4"},"dependentTasks":["chicago-taxi-trips-dataset","xgboost-train-2"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"table","producerTask":"chicago-taxi-trips-dataset"}},"model":{"taskOutputArtifact":{"outputArtifactKey":"model","producerTask":"xgboost-train-2"}}},"parameters":{"label_column":{"runtimeValue":{"constant":0}}}},"taskInfo":{"name":"xgboost-predict-4"}},"xgboost-train":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-train"},"dependentTasks":["chicago-taxi-trips-dataset"],"inputs":{"artifacts":{"training_data":{"taskOutputArtifact":{"outputArtifactKey":"table","producerTask":"chicago-taxi-trips-dataset"}}},"parameters":{"label_column":{"runtimeValue":{"constant":0}},"num_iterations":{"runtimeValue":{"constant":200}},"objective":{"runtimeValue":{"constant":"reg:squarederror"}}}},"taskInfo":{"name":"xgboost-train"}},"xgboost-train-2":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-train-2"},"dependentTasks":["convert-csv-to-apache-parquet"],"inputs":{"artifacts":{"training_data":{"taskOutputArtifact":{"outputArtifactKey":"output_data","producerTask":"convert-csv-to-apache-parquet"}}},"parameters":{"label_column_name":{"runtimeValue":{"constant":"tips"}},"num_iterations":{"runtimeValue":{"constant":200}},"objective":{"runtimeValue":{"constant":"reg:squarederror"}}}},"taskInfo":{"name":"xgboost-train-2"}}}}}'
  entrypoint: entrypoint
  podMetadata:
    annotations:
      pipelines.kubeflow.org/v2_component: "true"
    labels:
      pipelines.kubeflow.org/v2_component: "true"
  serviceAccountName: pipeline-runner
  templates:
  - container:
      args:
      - --type
      - CONTAINER
      - --pipeline_name
      - xgboost-sample-pipeline
      - --run_id
      - '{{workflow.uid}}'
      - --run_name
      - '{{workflow.name}}'
      - --run_display_name
      - ""
      - --dag_execution_id
      - '{{inputs.parameters.parent-dag-id}}'
      - --component
      - '{{inputs.parameters.component}}'
      - --task
      - '{{inputs.parameters.task}}'
      - --task_name
      - '{{inputs.parameters.task-name}}'
      - --container
      - '{{inputs.parameters.container}}'
      - --iteration_index
      - '{{inputs.parameters.iteration-index}}'
      - --cached_decision_path
      - '{{outputs.parameters.cached-decision.path}}'
      - --pod_spec_patch_path
      - '{{outputs.parameters.pod-spec-patch.path}}'
      - --condition_path
      - '{{outputs.parameters.condition.path}}'
      - --kubernetes_config
      - '{{inputs.parameters.kubernetes-config}}'
      - --http_proxy
      - ""
      - --https_proxy
      - ""
      - --no_proxy
      - ""
      command:
      - driver
      image: ghcr.io/kubeflow/kfp-driver:latest
      name: ""
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 64Mi
    inputs:
      parameters:
      - name: component
      - name: task
      - name: container
      - name: task-name
      - name: parent-dag-id
      - default: "-1"
        name: iteration-index
      - default: ""
        name: kubernetes-config
    metadata: {}
    name: system-container-driver
    outputs:
      parameters:
      - name: pod-spec-patch
        valueFrom:
          default: ""
          path: /tmp/outputs/pod-spec-patch
      - default: "false"
        name: cached-decision
        valueFrom:
          default: "false"
          path: /tmp/outputs/cached-decision
      - name: condition
        valueFrom:
          default: "true"
          path: /tmp/outputs/condition
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{inputs.parameters.pod-spec-patch}}'
        name: executor
        template: system-container-impl
        when: '{{inputs.parameters.cached-decision}} != true'
    inputs:
      parameters:
      - name: pod-spec-patch
      - default: "false"
        name: cached-decision
    metadata: {}
    name: system-container-executor
    outputs: {}
  - container:
      command:
      - should-be-overridden-during-runtime
      env:
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: KFP_POD_UID
        valueFrom:
          fieldRef:
            fieldPath: metadata.uid
      envFrom:
      - configMapRef:
          name: metadata-grpc-configmap
          optional: true
      image: gcr.io/ml-pipeline/should-be-overridden-during-runtime
      name: ""
      resources: {}
      volumeMounts:
      - mountPath: /kfp-launcher
        name: kfp-launcher
      - mountPath: /gcs
        name: gcs-scratch
      - mountPath: /s3
        name: s3-scratch
      - mountPath: /minio
        name: minio-scratch
      - mountPath: /.local
        name: dot-local-scratch
      - mountPath: /.cache
        name: dot-cache-scratch
      - mountPath: /.config
        name: dot-config-scratch
    initContainers:
    - args:
      - --copy
      - /kfp-launcher/launch
      command:
      - launcher-v2
      image: ghcr.io/kubeflow/kfp-launcher:latest
      name: kfp-launcher
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 100m
      volumeMounts:
      - mountPath: /kfp-launcher
        name: kfp-launcher
    inputs:
      parameters:
      - name: pod-spec-patch
    metadata: {}
    name: system-container-impl
    outputs: {}
    podSpecPatch: '{{inputs.parameters.pod-spec-patch}}'
    volumes:
    - emptyDir: {}
      name: kfp-launcher
    - emptyDir: {}
      name: gcs-scratch
    - emptyDir: {}
      name: s3-scratch
    - emptyDir: {}
      name: minio-scratch
    - emptyDir: {}
      name: dot-local-scratch
    - emptyDir: {}
      name: dot-cache-scratch
    - emptyDir: {}
      name: dot-config-scratch
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-7ad329a2ac89be6e1debabcd3d4912ec1f9f56f8d4b9fe479da5dd1ed4fc45e2}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-chicago-taxi-trips-dataset"},"inputs":{"parameters":{"limit":{"runtimeValue":{"constant":10000}},"select":{"runtimeValue":{"constant":"tips,trip_seconds,trip_miles,pickup_community_area,dropoff_community_area,fare,tolls,extras,trip_total"}},"where":{"runtimeValue":{"constant":"trip_start_timestamp
              \u003e= \"2019-01-01\" AND trip_start_timestamp \u003c \"2019-02-01\""}}}},"taskInfo":{"name":"chicago-taxi-trips-dataset"}}'
          - name: container
            value: '{{workflow.parameters.implementations-7ad329a2ac89be6e1debabcd3d4912ec1f9f56f8d4b9fe479da5dd1ed4fc45e2}}'
          - name: task-name
            value: chicago-taxi-trips-dataset
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        name: chicago-taxi-trips-dataset-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.chicago-taxi-trips-dataset-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.chicago-taxi-trips-dataset-driver.outputs.parameters.cached-decision}}'
        depends: chicago-taxi-trips-dataset-driver.Succeeded
        name: chicago-taxi-trips-dataset
        template: system-container-executor
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-4c133da6a0e29aa7910d0718119ec596bd6681678360ab60e38dae9339b3efb9}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-convert-csv-to-apache-parquet"},"dependentTasks":["chicago-taxi-trips-dataset"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"table","producerTask":"chicago-taxi-trips-dataset"}}}},"taskInfo":{"name":"convert-csv-to-apache-parquet"}}'
          - name: container
            value: '{{workflow.parameters.implementations-4c133da6a0e29aa7910d0718119ec596bd6681678360ab60e38dae9339b3efb9}}'
          - name: task-name
            value: convert-csv-to-apache-parquet
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        depends: chicago-taxi-trips-dataset.Succeeded
        name: convert-csv-to-apache-parquet-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.convert-csv-to-apache-parquet-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.convert-csv-to-apache-parquet-driver.outputs.parameters.cached-decision}}'
        depends: convert-csv-to-apache-parquet-driver.Succeeded
        name: convert-csv-to-apache-parquet
        template: system-container-executor
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-d1f109ba389501999e4d468354015c7d3a7947affcf7e4697c201c9c1bd6f88b}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-predict"},"dependentTasks":["chicago-taxi-trips-dataset","xgboost-train"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"table","producerTask":"chicago-taxi-trips-dataset"}},"model":{"taskOutputArtifact":{"outputArtifactKey":"model","producerTask":"xgboost-train"}}},"parameters":{"label_column":{"runtimeValue":{"constant":0}}}},"taskInfo":{"name":"xgboost-predict"}}'
          - name: container
            value: '{{workflow.parameters.implementations-d1f109ba389501999e4d468354015c7d3a7947affcf7e4697c201c9c1bd6f88b}}'
          - name: task-name
            value: xgboost-predict
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        depends: chicago-taxi-trips-dataset.Succeeded && xgboost-train.Succeeded
        name: xgboost-predict-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.xgboost-predict-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.xgboost-predict-driver.outputs.parameters.cached-decision}}'
        depends: xgboost-predict-driver.Succeeded
        name: xgboost-predict
        template: system-container-executor
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-c62f35abca448022418477855ae1839ecc171d48bb1830ab69e1f75c0649519a}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-predict-2"},"dependentTasks":["convert-csv-to-apache-parquet","xgboost-train-2"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"output_data","producerTask":"convert-csv-to-apache-parquet"}},"model":{"taskOutputArtifact":{"outputArtifactKey":"model","producerTask":"xgboost-train-2"}}},"parameters":{"label_column_name":{"runtimeValue":{"constant":"tips"}}}},"taskInfo":{"name":"xgboost-predict-2"}}'
          - name: container
            value: '{{workflow.parameters.implementations-c62f35abca448022418477855ae1839ecc171d48bb1830ab69e1f75c0649519a}}'
          - name: task-name
            value: xgboost-predict-2
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        depends: convert-csv-to-apache-parquet.Succeeded && xgboost-train-2.Succeeded
        name: xgboost-predict-2-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.xgboost-predict-2-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.xgboost-predict-2-driver.outputs.parameters.cached-decision}}'
        depends: xgboost-predict-2-driver.Succeeded
        name: xgboost-predict-2
        template: system-container-executor
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-c62f35abca448022418477855ae1839ecc171d48bb1830ab69e1f75c0649519a}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-predict-3"},"dependentTasks":["convert-csv-to-apache-parquet","xgboost-train"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"output_data","producerTask":"convert-csv-to-apache-parquet"}},"model":{"taskOutputArtifact":{"outputArtifactKey":"model","producerTask":"xgboost-train"}}},"parameters":{"label_column_name":{"runtimeValue":{"constant":"tips"}}}},"taskInfo":{"name":"xgboost-predict-3"}}'
          - name: container
            value: '{{workflow.parameters.implementations-c62f35abca448022418477855ae1839ecc171d48bb1830ab69e1f75c0649519a}}'
          - name: task-name
            value: xgboost-predict-3
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        depends: convert-csv-to-apache-parquet.Succeeded && xgboost-train.Succeeded
        name: xgboost-predict-3-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.xgboost-predict-3-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.xgboost-predict-3-driver.outputs.parameters.cached-decision}}'
        depends: xgboost-predict-3-driver.Succeeded
        name: xgboost-predict-3
        template: system-container-executor
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-d1f109ba389501999e4d468354015c7d3a7947affcf7e4697c201c9c1bd6f88b}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-predict-4"},"dependentTasks":["chicago-taxi-trips-dataset","xgboost-train-2"],"inputs":{"artifacts":{"data":{"taskOutputArtifact":{"outputArtifactKey":"table","producerTask":"chicago-taxi-trips-dataset"}},"model":{"taskOutputArtifact":{"outputArtifactKey":"model","producerTask":"xgboost-train-2"}}},"parameters":{"label_column":{"runtimeValue":{"constant":0}}}},"taskInfo":{"name":"xgboost-predict-4"}}'
          - name: container
            value: '{{workflow.parameters.implementations-d1f109ba389501999e4d468354015c7d3a7947affcf7e4697c201c9c1bd6f88b}}'
          - name: task-name
            value: xgboost-predict-4
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        depends: chicago-taxi-trips-dataset.Succeeded && xgboost-train-2.Succeeded
        name: xgboost-predict-4-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.xgboost-predict-4-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.xgboost-predict-4-driver.outputs.parameters.cached-decision}}'
        depends: xgboost-predict-4-driver.Succeeded
        name: xgboost-predict-4
        template: system-container-executor
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-0543e77f07b487833b7b7adaedea608d72a11fd2a76cfe13a80ea1431ce92901}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-train"},"dependentTasks":["chicago-taxi-trips-dataset"],"inputs":{"artifacts":{"training_data":{"taskOutputArtifact":{"outputArtifactKey":"table","producerTask":"chicago-taxi-trips-dataset"}}},"parameters":{"label_column":{"runtimeValue":{"constant":0}},"num_iterations":{"runtimeValue":{"constant":200}},"objective":{"runtimeValue":{"constant":"reg:squarederror"}}}},"taskInfo":{"name":"xgboost-train"}}'
          - name: container
            value: '{{workflow.parameters.implementations-0543e77f07b487833b7b7adaedea608d72a11fd2a76cfe13a80ea1431ce92901}}'
          - name: task-name
            value: xgboost-train
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        depends: chicago-taxi-trips-dataset.Succeeded
        name: xgboost-train-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.xgboost-train-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.xgboost-train-driver.outputs.parameters.cached-decision}}'
        depends: xgboost-train-driver.Succeeded
        name: xgboost-train
        template: system-container-executor
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-0c2f0a07f4057d4f8388562ccd9bbf6ea50c2603b7efb45cadb1ddc872a26cb3}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-xgboost-train-2"},"dependentTasks":["convert-csv-to-apache-parquet"],"inputs":{"artifacts":{"training_data":{"taskOutputArtifact":{"outputArtifactKey":"output_data","producerTask":"convert-csv-to-apache-parquet"}}},"parameters":{"label_column_name":{"runtimeValue":{"constant":"tips"}},"num_iterations":{"runtimeValue":{"constant":200}},"objective":{"runtimeValue":{"constant":"reg:squarederror"}}}},"taskInfo":{"name":"xgboost-train-2"}}'
          - name: container
            value: '{{workflow.parameters.implementations-0c2f0a07f4057d4f8388562ccd9bbf6ea50c2603b7efb45cadb1ddc872a26cb3}}'
          - name: task-name
            value: xgboost-train-2
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        depends: convert-csv-to-apache-parquet.Succeeded
        name: xgboost-train-2-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.xgboost-train-2-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.xgboost-train-2-driver.outputs.parameters.cached-decision}}'
        depends: xgboost-train-2-driver.Succeeded
        name: xgboost-train-2
        template: system-container-executor
    inputs:
      parameters:
      - name: parent-dag-id
    metadata: {}
    name: root
    outputs: {}
  - container:
      args:
      - --type
      - '{{inputs.parameters.driver-type}}'
      - --pipeline_name
      - xgboost-sample-pipeline
      - --run_id
      - '{{workflow.uid}}'
      - --run_name
      - '{{workflow.name}}'
      - --run_display_name
      - ""
      - --dag_execution_id
      - '{{inputs.parameters.parent-dag-id}}'
      - --component
      - '{{inputs.parameters.component}}'
      - --task
      - '{{inputs.parameters.task}}'
      - --task_name
      - '{{inputs.parameters.task-name}}'
      - --runtime_config
      - '{{inputs.parameters.runtime-config}}'
      - --iteration_index
      - '{{inputs.parameters.iteration-index}}'
      - --execution_id_path
      - '{{outputs.parameters.execution-id.path}}'
      - --iteration_count_path
      - '{{outputs.parameters.iteration-count.path}}'
      - --condition_path
      - '{{outputs.parameters.condition.path}}'
      - --http_proxy
      - ""
      - --https_proxy
      - ""
      - --no_proxy
      - ""
      command:
      - driver
      image: ghcr.io/kubeflow/kfp-driver:latest
      name: ""
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 64Mi
    inputs:
      parameters:
      - name: component
      - default: ""
        name: runtime-config
      - default: ""
        name: task
      - default: ""
        name: task-name
      - default: "0"
        name: parent-dag-id
      - default: "-1"
        name: iteration-index
      - default: DAG
        name: driver-type
    metadata: {}
    name: system-dag-driver
    outputs:
      parameters:
      - name: execution-id
        valueFrom:
          path: /tmp/outputs/execution-id
      - name: iteration-count
        valueFrom:
          default: "0"
          path: /tmp/outputs/iteration-count
      - name: condition
        valueFrom:
          default: "true"
          path: /tmp/outputs/condition
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-root}}'
          - name: runtime-config
            value: '{}'
          - name: driver-type
            value: ROOT_DAG
        name: root-driver
        template: system-dag-driver
      - arguments:
          parameters:
          - name: parent-dag-id
            value: '{{tasks.root-driver.outputs.parameters.execution-id}}'
          - name: condition
            value: ""
        depends: root-driver.Succeeded
        name: root
        template: root
    inputs: {}
    metadata: {}
    name: entrypoint
    outputs: {}
status:
  finishedAt: null
  startedAt: null
