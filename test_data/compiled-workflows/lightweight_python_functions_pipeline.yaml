apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  creationTimestamp: null
  generateName: my-test-pipeline-beta-
spec:
  arguments:
    parameters:
    - name: components-58eb44fee654093cb441c465d8ce6209048c161178ed5ecd93354b97de8df48f
      value: '{"executorLabel":"exec-preprocess","inputDefinitions":{"parameters":{"input_dict_parameter":{"parameterType":"STRUCT"},"input_list_parameter":{"parameterType":"LIST"},"message":{"parameterType":"STRING"}}},"outputDefinitions":{"artifacts":{"output_dataset_one":{"artifactType":{"schemaTitle":"system.Dataset","schemaVersion":"0.0.1"}},"output_dataset_two_path":{"artifactType":{"schemaTitle":"system.Dataset","schemaVersion":"0.0.1"}}},"parameters":{"output_bool_parameter_path":{"parameterType":"BOOLEAN"},"output_dict_parameter_path":{"parameterType":"STRUCT"},"output_list_parameter_path":{"parameterType":"LIST"},"output_parameter_path":{"parameterType":"STRING"}}}}'
    - name: implementations-58eb44fee654093cb441c465d8ce6209048c161178ed5ecd93354b97de8df48f
      value: '{"args":["--executor_input","{{$}}","--function_to_execute","preprocess"],"command":["sh","-c","\nif
        ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3
        -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet --no-warn-script-location ''kfp==2.14.3'' ''--no-deps''
        ''typing-extensions\u003e=3.7.4,\u003c5; python_version\u003c\"3.9\"'' \u0026\u0026
        \"$0\" \"$@\"\n","sh","-ec","program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\"
        \u003e \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3
        -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n","\nimport
        kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef
        preprocess(\n    # An input parameter of type string.\n    message: str,\n    #
        An input parameter of type dict.\n    input_dict_parameter: Dict[str, int],\n    #
        An input parameter of type list.\n    input_list_parameter: List[str],\n    #
        Use Output[T] to get a metadata-rich handle to the output artifact\n    #
        of type `Dataset`.\n    output_dataset_one: Output[Dataset],\n    # A locally
        accessible filepath for another output artifact of type\n    # `Dataset`.\n    output_dataset_two_path:
        OutputPath(''Dataset''),\n    # A locally accessible filepath for an output
        parameter of type string.\n    output_parameter_path: OutputPath(str),\n    #
        A locally accessible filepath for an output parameter of type bool.\n    output_bool_parameter_path:
        OutputPath(bool),\n    # A locally accessible filepath for an output parameter
        of type dict.\n    output_dict_parameter_path: OutputPath(Dict[str, int]),\n    #
        A locally accessible filepath for an output parameter of type list.\n    output_list_parameter_path:
        OutputPath(List[str]),\n):\n    \"\"\"Dummy preprocessing step.\"\"\"\n\n    #
        Use Dataset.path to access a local file path for writing.\n    # One can also
        use Dataset.uri to access the actual URI file path.\n    with open(output_dataset_one.path,
        ''w'') as f:\n        f.write(message)\n\n    # OutputPath is used to just
        pass the local file path of the output artifact\n    # to the function.\n    with
        open(output_dataset_two_path, ''w'') as f:\n        f.write(message)\n\n    with
        open(output_parameter_path, ''w'') as f:\n        f.write(message)\n\n    with
        open(output_bool_parameter_path, ''w'') as f:\n        f.write(\n            str(True))  #
        use either `str()` or `json.dumps()` for bool values.\n\n    import json\n    with
        open(output_dict_parameter_path, ''w'') as f:\n        f.write(json.dumps(input_dict_parameter))\n\n    with
        open(output_list_parameter_path, ''w'') as f:\n        f.write(json.dumps(input_list_parameter))\n\n"],"image":"python:3.9"}'
    - name: components-c146bad05c050c176402e7a5065dafbcb507ddacd77264720b5199dd9a8b1711
      value: '{"executorLabel":"exec-train","inputDefinitions":{"artifacts":{"dataset_one_path":{"artifactType":{"schemaTitle":"system.Dataset","schemaVersion":"0.0.1"}},"dataset_two":{"artifactType":{"schemaTitle":"system.Dataset","schemaVersion":"0.0.1"}}},"parameters":{"input_bool":{"parameterType":"BOOLEAN"},"input_dict":{"parameterType":"STRUCT"},"input_list":{"parameterType":"LIST"},"message":{"parameterType":"STRING"},"num_steps":{"defaultValue":100,"isOptional":true,"parameterType":"NUMBER_INTEGER"}}},"outputDefinitions":{"artifacts":{"model":{"artifactType":{"schemaTitle":"system.Model","schemaVersion":"0.0.1"}}}}}'
    - name: implementations-c146bad05c050c176402e7a5065dafbcb507ddacd77264720b5199dd9a8b1711
      value: '{"args":["--executor_input","{{$}}","--function_to_execute","train"],"command":["sh","-c","\nif
        ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3
        -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet --no-warn-script-location ''kfp==2.14.3'' ''--no-deps''
        ''typing-extensions\u003e=3.7.4,\u003c5; python_version\u003c\"3.9\"'' \u0026\u0026
        \"$0\" \"$@\"\n","sh","-ec","program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\"
        \u003e \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3
        -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n","\nimport
        kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef
        train(\n    # Use InputPath to get a locally accessible path for the input
        artifact\n    # of type `Dataset`.\n    dataset_one_path: InputPath(''Dataset''),\n    #
        Use Input[T] to get a metadata-rich handle to the input artifact\n    # of
        type `Dataset`.\n    dataset_two: Input[Dataset],\n    # An input parameter
        of type string.\n    message: str,\n    # Use Output[T] to get a metadata-rich
        handle to the output artifact\n    # of type `Dataset`.\n    model: Output[Model],\n    #
        An input parameter of type bool.\n    input_bool: bool,\n    # An input parameter
        of type dict.\n    input_dict: Dict[str, int],\n    # An input parameter of
        type List[str].\n    input_list: List[str],\n    # An input parameter of type
        int with a default value.\n    num_steps: int = 100,\n):\n    \"\"\"Dummy
        Training step.\"\"\"\n    with open(dataset_one_path) as input_file:\n        dataset_one_contents
        = input_file.read()\n\n    with open(dataset_two.path) as input_file:\n        dataset_two_contents
        = input_file.read()\n\n    line = (f''dataset_one_contents: {dataset_one_contents}
        || ''\n            f''dataset_two_contents: {dataset_two_contents} || ''\n            f''message:
        {message} || ''\n            f''input_bool: {input_bool}, type {type(input_bool)}
        || ''\n            f''input_dict: {input_dict}, type {type(input_dict)} ||
        ''\n            f''input_list: {input_list}, type {type(input_list)} \\n'')\n\n    with
        open(model.path, ''w'') as output_file:\n        for i in range(num_steps):\n            output_file.write(f''Step
        {i}\\n{line}\\n=====\\n'')\n\n    # model is an instance of Model artifact,
        which has a .metadata dictionary\n    # to store arbitrary metadata for the
        output artifact.\n    model.metadata[''accuracy''] = 0.9\n\n"],"image":"python:3.9"}'
    - name: components-root
      value: '{"dag":{"tasks":{"preprocess":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-preprocess"},"inputs":{"parameters":{"input_dict_parameter":{"componentInputParameter":"input_dict"},"input_list_parameter":{"runtimeValue":{"constant":["a","b","c"]}},"message":{"componentInputParameter":"message"}}},"taskInfo":{"name":"preprocess"}},"train":{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-train"},"dependentTasks":["preprocess"],"inputs":{"artifacts":{"dataset_one_path":{"taskOutputArtifact":{"outputArtifactKey":"output_dataset_one","producerTask":"preprocess"}},"dataset_two":{"taskOutputArtifact":{"outputArtifactKey":"output_dataset_two_path","producerTask":"preprocess"}}},"parameters":{"input_bool":{"taskOutputParameter":{"outputParameterKey":"output_bool_parameter_path","producerTask":"preprocess"}},"input_dict":{"taskOutputParameter":{"outputParameterKey":"output_dict_parameter_path","producerTask":"preprocess"}},"input_list":{"taskOutputParameter":{"outputParameterKey":"output_list_parameter_path","producerTask":"preprocess"}},"message":{"taskOutputParameter":{"outputParameterKey":"output_parameter_path","producerTask":"preprocess"}}}},"taskInfo":{"name":"train"}}}},"inputDefinitions":{"parameters":{"input_dict":{"defaultValue":{"A":1,"B":2},"isOptional":true,"parameterType":"STRUCT"},"message":{"parameterType":"STRING"}}}}'
  entrypoint: entrypoint
  podMetadata:
    annotations:
      pipelines.kubeflow.org/v2_component: "true"
    labels:
      pipelines.kubeflow.org/v2_component: "true"
  serviceAccountName: pipeline-runner
  templates:
  - container:
      args:
      - --type
      - CONTAINER
      - --pipeline_name
      - my-test-pipeline-beta
      - --run_id
      - '{{workflow.uid}}'
      - --run_name
      - '{{workflow.name}}'
      - --run_display_name
      - ""
      - --dag_execution_id
      - '{{inputs.parameters.parent-dag-id}}'
      - --component
      - '{{inputs.parameters.component}}'
      - --task
      - '{{inputs.parameters.task}}'
      - --task_name
      - '{{inputs.parameters.task-name}}'
      - --container
      - '{{inputs.parameters.container}}'
      - --iteration_index
      - '{{inputs.parameters.iteration-index}}'
      - --cached_decision_path
      - '{{outputs.parameters.cached-decision.path}}'
      - --pod_spec_patch_path
      - '{{outputs.parameters.pod-spec-patch.path}}'
      - --condition_path
      - '{{outputs.parameters.condition.path}}'
      - --kubernetes_config
      - '{{inputs.parameters.kubernetes-config}}'
      - --http_proxy
      - ""
      - --https_proxy
      - ""
      - --no_proxy
      - ""
      command:
      - driver
      image: ghcr.io/kubeflow/kfp-driver:latest
      name: ""
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 64Mi
    inputs:
      parameters:
      - name: component
      - name: task
      - name: container
      - name: task-name
      - name: parent-dag-id
      - default: "-1"
        name: iteration-index
      - default: ""
        name: kubernetes-config
    metadata: {}
    name: system-container-driver
    outputs:
      parameters:
      - name: pod-spec-patch
        valueFrom:
          default: ""
          path: /tmp/outputs/pod-spec-patch
      - default: "false"
        name: cached-decision
        valueFrom:
          default: "false"
          path: /tmp/outputs/cached-decision
      - name: condition
        valueFrom:
          default: "true"
          path: /tmp/outputs/condition
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{inputs.parameters.pod-spec-patch}}'
        name: executor
        template: system-container-impl
        when: '{{inputs.parameters.cached-decision}} != true'
    inputs:
      parameters:
      - name: pod-spec-patch
      - default: "false"
        name: cached-decision
    metadata: {}
    name: system-container-executor
    outputs: {}
  - container:
      command:
      - should-be-overridden-during-runtime
      env:
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: KFP_POD_UID
        valueFrom:
          fieldRef:
            fieldPath: metadata.uid
      envFrom:
      - configMapRef:
          name: metadata-grpc-configmap
          optional: true
      image: gcr.io/ml-pipeline/should-be-overridden-during-runtime
      name: ""
      resources: {}
      volumeMounts:
      - mountPath: /kfp-launcher
        name: kfp-launcher
      - mountPath: /gcs
        name: gcs-scratch
      - mountPath: /s3
        name: s3-scratch
      - mountPath: /minio
        name: minio-scratch
      - mountPath: /.local
        name: dot-local-scratch
      - mountPath: /.cache
        name: dot-cache-scratch
      - mountPath: /.config
        name: dot-config-scratch
    initContainers:
    - args:
      - --copy
      - /kfp-launcher/launch
      command:
      - launcher-v2
      image: ghcr.io/kubeflow/kfp-launcher:latest
      name: kfp-launcher
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 100m
      volumeMounts:
      - mountPath: /kfp-launcher
        name: kfp-launcher
    inputs:
      parameters:
      - name: pod-spec-patch
    metadata: {}
    name: system-container-impl
    outputs: {}
    podSpecPatch: '{{inputs.parameters.pod-spec-patch}}'
    volumes:
    - emptyDir: {}
      name: kfp-launcher
    - emptyDir: {}
      name: gcs-scratch
    - emptyDir: {}
      name: s3-scratch
    - emptyDir: {}
      name: minio-scratch
    - emptyDir: {}
      name: dot-local-scratch
    - emptyDir: {}
      name: dot-cache-scratch
    - emptyDir: {}
      name: dot-config-scratch
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-58eb44fee654093cb441c465d8ce6209048c161178ed5ecd93354b97de8df48f}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-preprocess"},"inputs":{"parameters":{"input_dict_parameter":{"componentInputParameter":"input_dict"},"input_list_parameter":{"runtimeValue":{"constant":["a","b","c"]}},"message":{"componentInputParameter":"message"}}},"taskInfo":{"name":"preprocess"}}'
          - name: container
            value: '{{workflow.parameters.implementations-58eb44fee654093cb441c465d8ce6209048c161178ed5ecd93354b97de8df48f}}'
          - name: task-name
            value: preprocess
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        name: preprocess-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.preprocess-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.preprocess-driver.outputs.parameters.cached-decision}}'
        depends: preprocess-driver.Succeeded
        name: preprocess
        template: system-container-executor
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-c146bad05c050c176402e7a5065dafbcb507ddacd77264720b5199dd9a8b1711}}'
          - name: task
            value: '{"cachingOptions":{"enableCache":true},"componentRef":{"name":"comp-train"},"dependentTasks":["preprocess"],"inputs":{"artifacts":{"dataset_one_path":{"taskOutputArtifact":{"outputArtifactKey":"output_dataset_one","producerTask":"preprocess"}},"dataset_two":{"taskOutputArtifact":{"outputArtifactKey":"output_dataset_two_path","producerTask":"preprocess"}}},"parameters":{"input_bool":{"taskOutputParameter":{"outputParameterKey":"output_bool_parameter_path","producerTask":"preprocess"}},"input_dict":{"taskOutputParameter":{"outputParameterKey":"output_dict_parameter_path","producerTask":"preprocess"}},"input_list":{"taskOutputParameter":{"outputParameterKey":"output_list_parameter_path","producerTask":"preprocess"}},"message":{"taskOutputParameter":{"outputParameterKey":"output_parameter_path","producerTask":"preprocess"}}}},"taskInfo":{"name":"train"}}'
          - name: container
            value: '{{workflow.parameters.implementations-c146bad05c050c176402e7a5065dafbcb507ddacd77264720b5199dd9a8b1711}}'
          - name: task-name
            value: train
          - name: parent-dag-id
            value: '{{inputs.parameters.parent-dag-id}}'
        depends: preprocess.Succeeded
        name: train-driver
        template: system-container-driver
      - arguments:
          parameters:
          - name: pod-spec-patch
            value: '{{tasks.train-driver.outputs.parameters.pod-spec-patch}}'
          - default: "false"
            name: cached-decision
            value: '{{tasks.train-driver.outputs.parameters.cached-decision}}'
        depends: train-driver.Succeeded
        name: train
        template: system-container-executor
    inputs:
      parameters:
      - name: parent-dag-id
    metadata: {}
    name: root
    outputs: {}
  - container:
      args:
      - --type
      - '{{inputs.parameters.driver-type}}'
      - --pipeline_name
      - my-test-pipeline-beta
      - --run_id
      - '{{workflow.uid}}'
      - --run_name
      - '{{workflow.name}}'
      - --run_display_name
      - ""
      - --dag_execution_id
      - '{{inputs.parameters.parent-dag-id}}'
      - --component
      - '{{inputs.parameters.component}}'
      - --task
      - '{{inputs.parameters.task}}'
      - --task_name
      - '{{inputs.parameters.task-name}}'
      - --runtime_config
      - '{{inputs.parameters.runtime-config}}'
      - --iteration_index
      - '{{inputs.parameters.iteration-index}}'
      - --execution_id_path
      - '{{outputs.parameters.execution-id.path}}'
      - --iteration_count_path
      - '{{outputs.parameters.iteration-count.path}}'
      - --condition_path
      - '{{outputs.parameters.condition.path}}'
      - --http_proxy
      - ""
      - --https_proxy
      - ""
      - --no_proxy
      - ""
      command:
      - driver
      image: ghcr.io/kubeflow/kfp-driver:latest
      name: ""
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 64Mi
    inputs:
      parameters:
      - name: component
      - default: ""
        name: runtime-config
      - default: ""
        name: task
      - default: ""
        name: task-name
      - default: "0"
        name: parent-dag-id
      - default: "-1"
        name: iteration-index
      - default: DAG
        name: driver-type
    metadata: {}
    name: system-dag-driver
    outputs:
      parameters:
      - name: execution-id
        valueFrom:
          path: /tmp/outputs/execution-id
      - name: iteration-count
        valueFrom:
          default: "0"
          path: /tmp/outputs/iteration-count
      - name: condition
        valueFrom:
          default: "true"
          path: /tmp/outputs/condition
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: component
            value: '{{workflow.parameters.components-root}}'
          - name: runtime-config
            value: '{"parameterValues":{"input_dict":{"A":1,"B":2}}}'
          - name: driver-type
            value: ROOT_DAG
        name: root-driver
        template: system-dag-driver
      - arguments:
          parameters:
          - name: parent-dag-id
            value: '{{tasks.root-driver.outputs.parameters.execution-id}}'
          - name: condition
            value: ""
        depends: root-driver.Succeeded
        name: root
        template: root
    inputs: {}
    metadata: {}
    name: entrypoint
    outputs: {}
status:
  finishedAt: null
  startedAt: null
