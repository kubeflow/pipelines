# PIPELINE DEFINITION
# Name: pipeline-with-placeholders
components:
  comp-print-all-placeholders:
    executorLabel: exec-print-all-placeholders
    inputDefinitions:
      parameters:
        job_id:
          parameterType: STRING
        job_name:
          parameterType: STRING
        job_resource_name:
          parameterType: STRING
        task_id:
          parameterType: STRING
        task_name:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-print-all-placeholders:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - print_all_placeholders
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.3'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef print_all_placeholders(\n        job_name: str,\n        job_resource_name:\
          \ str,\n        job_id: str,\n        task_name: str,\n        task_id:\
          \ str,\n):\n    allPlaceholders = [job_name, job_resource_name, job_id,\
          \ task_name, task_id]\n\n    for placeholder in allPlaceholders:\n     \
          \   if \"\\{\\{\" in placeholder or placeholder == \"\":\n            raise\
          \ RuntimeError(\n                \"Expected the placeholder to be replaced\
          \ with a value: \" + placeholder\n            )\n\n    assert task_name\
          \ == \"print-all-placeholders\"\n    assert job_resource_name.startswith(\"\
          pipeline-with-placeholders-\")\n\n    output = \", \".join(allPlaceholders)\n\
          \    print(output)\n\n"
        image: python:3.9
pipelineInfo:
  name: pipeline-with-placeholders
root:
  dag:
    tasks:
      print-all-placeholders:
        cachingOptions: {}
        componentRef:
          name: comp-print-all-placeholders
        inputs:
          parameters:
            job_id:
              runtimeValue:
                constant: '{{$.pipeline_job_uuid}}'
            job_name:
              runtimeValue:
                constant: '{{$.pipeline_job_name}}'
            job_resource_name:
              runtimeValue:
                constant: '{{$.pipeline_job_resource_name}}'
            task_id:
              runtimeValue:
                constant: '{{$.pipeline_task_uuid}}'
            task_name:
              runtimeValue:
                constant: '{{$.pipeline_task_name}}'
        taskInfo:
          name: print-all-placeholders
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.3
