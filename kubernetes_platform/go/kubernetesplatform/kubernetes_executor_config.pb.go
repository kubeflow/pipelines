// Copyright 2023 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: kubernetes_executor_config.proto

package kubernetesplatform

import (
	pipelinespec "github.com/kubeflow/pipelines/api/v2alpha1/go/pipelinespec"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KubernetesExecutorConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SecretAsVolume  []*SecretAsVolume      `protobuf:"bytes,1,rep,name=secret_as_volume,json=secretAsVolume,proto3" json:"secret_as_volume,omitempty"`
	SecretAsEnv     []*SecretAsEnv         `protobuf:"bytes,2,rep,name=secret_as_env,json=secretAsEnv,proto3" json:"secret_as_env,omitempty"`
	PvcMount        []*PvcMount            `protobuf:"bytes,3,rep,name=pvc_mount,json=pvcMount,proto3" json:"pvc_mount,omitempty"`
	NodeSelector    *NodeSelector          `protobuf:"bytes,4,opt,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty"`
	PodMetadata     *PodMetadata           `protobuf:"bytes,5,opt,name=pod_metadata,json=podMetadata,proto3" json:"pod_metadata,omitempty"`
	ImagePullSecret []*ImagePullSecret     `protobuf:"bytes,6,rep,name=image_pull_secret,json=imagePullSecret,proto3" json:"image_pull_secret,omitempty"`
	// One of Always, Never, IfNotPresent.
	ImagePullPolicy        string                    `protobuf:"bytes,7,opt,name=image_pull_policy,json=imagePullPolicy,proto3" json:"image_pull_policy,omitempty"`
	ConfigMapAsVolume      []*ConfigMapAsVolume      `protobuf:"bytes,8,rep,name=config_map_as_volume,json=configMapAsVolume,proto3" json:"config_map_as_volume,omitempty"`
	ConfigMapAsEnv         []*ConfigMapAsEnv         `protobuf:"bytes,9,rep,name=config_map_as_env,json=configMapAsEnv,proto3" json:"config_map_as_env,omitempty"`
	ActiveDeadlineSeconds  int64                     `protobuf:"varint,10,opt,name=active_deadline_seconds,json=activeDeadlineSeconds,proto3" json:"active_deadline_seconds,omitempty"`
	FieldPathAsEnv         []*FieldPathAsEnv         `protobuf:"bytes,11,rep,name=field_path_as_env,json=fieldPathAsEnv,proto3" json:"field_path_as_env,omitempty"`
	Tolerations            []*Toleration             `protobuf:"bytes,12,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	GenericEphemeralVolume []*GenericEphemeralVolume `protobuf:"bytes,13,rep,name=generic_ephemeral_volume,json=genericEphemeralVolume,proto3" json:"generic_ephemeral_volume,omitempty"`
	NodeAffinity           []*NodeAffinityTerm       `protobuf:"bytes,14,rep,name=node_affinity,json=nodeAffinity,proto3" json:"node_affinity,omitempty"`
	PodAffinity            []*PodAffinityTerm        `protobuf:"bytes,15,rep,name=pod_affinity,json=podAffinity,proto3" json:"pod_affinity,omitempty"`
	EnabledSharedMemory    *EnabledSharedMemory      `protobuf:"bytes,16,opt,name=enabled_shared_memory,json=enabledSharedMemory,proto3" json:"enabled_shared_memory,omitempty"`
	EmptyDirMounts         []*EmptyDirMount          `protobuf:"bytes,17,rep,name=empty_dir_mounts,json=emptyDirMounts,proto3" json:"empty_dir_mounts,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *KubernetesExecutorConfig) Reset() {
	*x = KubernetesExecutorConfig{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesExecutorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesExecutorConfig) ProtoMessage() {}

func (x *KubernetesExecutorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesExecutorConfig.ProtoReflect.Descriptor instead.
func (*KubernetesExecutorConfig) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesExecutorConfig) GetSecretAsVolume() []*SecretAsVolume {
	if x != nil {
		return x.SecretAsVolume
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetSecretAsEnv() []*SecretAsEnv {
	if x != nil {
		return x.SecretAsEnv
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetPvcMount() []*PvcMount {
	if x != nil {
		return x.PvcMount
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetNodeSelector() *NodeSelector {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetPodMetadata() *PodMetadata {
	if x != nil {
		return x.PodMetadata
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetImagePullSecret() []*ImagePullSecret {
	if x != nil {
		return x.ImagePullSecret
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetImagePullPolicy() string {
	if x != nil {
		return x.ImagePullPolicy
	}
	return ""
}

func (x *KubernetesExecutorConfig) GetConfigMapAsVolume() []*ConfigMapAsVolume {
	if x != nil {
		return x.ConfigMapAsVolume
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetConfigMapAsEnv() []*ConfigMapAsEnv {
	if x != nil {
		return x.ConfigMapAsEnv
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetActiveDeadlineSeconds() int64 {
	if x != nil {
		return x.ActiveDeadlineSeconds
	}
	return 0
}

func (x *KubernetesExecutorConfig) GetFieldPathAsEnv() []*FieldPathAsEnv {
	if x != nil {
		return x.FieldPathAsEnv
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetTolerations() []*Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetGenericEphemeralVolume() []*GenericEphemeralVolume {
	if x != nil {
		return x.GenericEphemeralVolume
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetNodeAffinity() []*NodeAffinityTerm {
	if x != nil {
		return x.NodeAffinity
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetPodAffinity() []*PodAffinityTerm {
	if x != nil {
		return x.PodAffinity
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetEnabledSharedMemory() *EnabledSharedMemory {
	if x != nil {
		return x.EnabledSharedMemory
	}
	return nil
}

func (x *KubernetesExecutorConfig) GetEmptyDirMounts() []*EmptyDirMount {
	if x != nil {
		return x.EmptyDirMounts
	}
	return nil
}

type EnabledSharedMemory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the Shared Memory Volume.
	VolumeName string `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// Size of the Shared Memory.
	Size          string `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnabledSharedMemory) Reset() {
	*x = EnabledSharedMemory{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnabledSharedMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnabledSharedMemory) ProtoMessage() {}

func (x *EnabledSharedMemory) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnabledSharedMemory.ProtoReflect.Descriptor instead.
func (*EnabledSharedMemory) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{1}
}

func (x *EnabledSharedMemory) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *EnabledSharedMemory) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type SecretAsVolume struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use secret_name_parameter instead.
	//
	// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	// Container path to mount the Secret data.
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// An optional boolean value indicating whether the Secret must be defined.
	Optional *bool `protobuf:"varint,3,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
	// Name of the Secret.
	SecretNameParameter *pipelinespec.TaskInputsSpec_InputParameterSpec `protobuf:"bytes,4,opt,name=secret_name_parameter,json=secretNameParameter,proto3" json:"secret_name_parameter,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SecretAsVolume) Reset() {
	*x = SecretAsVolume{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretAsVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretAsVolume) ProtoMessage() {}

func (x *SecretAsVolume) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretAsVolume.ProtoReflect.Descriptor instead.
func (*SecretAsVolume) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
func (x *SecretAsVolume) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *SecretAsVolume) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *SecretAsVolume) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return false
}

func (x *SecretAsVolume) GetSecretNameParameter() *pipelinespec.TaskInputsSpec_InputParameterSpec {
	if x != nil {
		return x.SecretNameParameter
	}
	return nil
}

type SecretAsEnv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use secret_name_parameter instead.
	//
	// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
	SecretName string                           `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	KeyToEnv   []*SecretAsEnv_SecretKeyToEnvMap `protobuf:"bytes,2,rep,name=key_to_env,json=keyToEnv,proto3" json:"key_to_env,omitempty"`
	// Name of the Secret.
	SecretNameParameter *pipelinespec.TaskInputsSpec_InputParameterSpec `protobuf:"bytes,4,opt,name=secret_name_parameter,json=secretNameParameter,proto3" json:"secret_name_parameter,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SecretAsEnv) Reset() {
	*x = SecretAsEnv{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretAsEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretAsEnv) ProtoMessage() {}

func (x *SecretAsEnv) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretAsEnv.ProtoReflect.Descriptor instead.
func (*SecretAsEnv) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
func (x *SecretAsEnv) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *SecretAsEnv) GetKeyToEnv() []*SecretAsEnv_SecretKeyToEnvMap {
	if x != nil {
		return x.KeyToEnv
	}
	return nil
}

func (x *SecretAsEnv) GetSecretNameParameter() *pipelinespec.TaskInputsSpec_InputParameterSpec {
	if x != nil {
		return x.SecretNameParameter
	}
	return nil
}

type PvcMount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use pvc_name_parameter instead.
	//
	// Types that are valid to be assigned to PvcReference:
	//
	//	*PvcMount_TaskOutputParameter
	//	*PvcMount_Constant
	//	*PvcMount_ComponentInputParameter
	PvcReference isPvcMount_PvcReference `protobuf_oneof:"pvc_reference"`
	// Container path to which the PVC should be mounted.
	MountPath string `protobuf:"bytes,4,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// Name of the PVC.
	PvcNameParameter *pipelinespec.TaskInputsSpec_InputParameterSpec `protobuf:"bytes,5,opt,name=pvc_name_parameter,json=pvcNameParameter,proto3" json:"pvc_name_parameter,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PvcMount) Reset() {
	*x = PvcMount{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PvcMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvcMount) ProtoMessage() {}

func (x *PvcMount) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvcMount.ProtoReflect.Descriptor instead.
func (*PvcMount) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{4}
}

func (x *PvcMount) GetPvcReference() isPvcMount_PvcReference {
	if x != nil {
		return x.PvcReference
	}
	return nil
}

// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
func (x *PvcMount) GetTaskOutputParameter() *pipelinespec.TaskInputsSpec_InputParameterSpec_TaskOutputParameterSpec {
	if x != nil {
		if x, ok := x.PvcReference.(*PvcMount_TaskOutputParameter); ok {
			return x.TaskOutputParameter
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
func (x *PvcMount) GetConstant() string {
	if x != nil {
		if x, ok := x.PvcReference.(*PvcMount_Constant); ok {
			return x.Constant
		}
	}
	return ""
}

// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
func (x *PvcMount) GetComponentInputParameter() string {
	if x != nil {
		if x, ok := x.PvcReference.(*PvcMount_ComponentInputParameter); ok {
			return x.ComponentInputParameter
		}
	}
	return ""
}

func (x *PvcMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *PvcMount) GetPvcNameParameter() *pipelinespec.TaskInputsSpec_InputParameterSpec {
	if x != nil {
		return x.PvcNameParameter
	}
	return nil
}

type isPvcMount_PvcReference interface {
	isPvcMount_PvcReference()
}

type PvcMount_TaskOutputParameter struct {
	// Output parameter from an upstream task.
	//
	// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
	TaskOutputParameter *pipelinespec.TaskInputsSpec_InputParameterSpec_TaskOutputParameterSpec `protobuf:"bytes,1,opt,name=task_output_parameter,json=taskOutputParameter,proto3,oneof"`
}

type PvcMount_Constant struct {
	// A constant value.
	//
	// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
	Constant string `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type PvcMount_ComponentInputParameter struct {
	// Pass the input parameter from parent component input parameter.
	//
	// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
	ComponentInputParameter string `protobuf:"bytes,3,opt,name=component_input_parameter,json=componentInputParameter,proto3,oneof"`
}

func (*PvcMount_TaskOutputParameter) isPvcMount_PvcReference() {}

func (*PvcMount_Constant) isPvcMount_PvcReference() {}

func (*PvcMount_ComponentInputParameter) isPvcMount_PvcReference() {}

type CreatePvc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Name:
	//
	//	*CreatePvc_PvcName
	//	*CreatePvc_PvcNameSuffix
	Name isCreatePvc_Name `protobuf_oneof:"name"`
	// Corresponds to PersistentVolumeClaim.spec.accessMode field.
	AccessModes []string `protobuf:"bytes,3,rep,name=access_modes,json=accessModes,proto3" json:"access_modes,omitempty"`
	// Corresponds to PersistentVolumeClaim.spec.resources.requests.storage field.
	Size string `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	// If true, corresponds to omitted PersistentVolumeClaim.spec.storageClassName.
	DefaultStorageClass bool `protobuf:"varint,5,opt,name=default_storage_class,json=defaultStorageClass,proto3" json:"default_storage_class,omitempty"`
	// Corresponds to PersistentVolumeClaim.spec.storageClassName string field.
	// Should only be used if default_storage_class is false.
	StorageClassName string `protobuf:"bytes,6,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
	// Corresponds to PersistentVolumeClaim.spec.volumeName field.
	VolumeName string `protobuf:"bytes,7,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// Corresponds to PersistentVolumeClaim.metadata.annotations field.
	Annotations   *structpb.Struct `protobuf:"bytes,8,opt,name=annotations,proto3" json:"annotations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePvc) Reset() {
	*x = CreatePvc{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePvc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePvc) ProtoMessage() {}

func (x *CreatePvc) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePvc.ProtoReflect.Descriptor instead.
func (*CreatePvc) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePvc) GetName() isCreatePvc_Name {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreatePvc) GetPvcName() string {
	if x != nil {
		if x, ok := x.Name.(*CreatePvc_PvcName); ok {
			return x.PvcName
		}
	}
	return ""
}

func (x *CreatePvc) GetPvcNameSuffix() string {
	if x != nil {
		if x, ok := x.Name.(*CreatePvc_PvcNameSuffix); ok {
			return x.PvcNameSuffix
		}
	}
	return ""
}

func (x *CreatePvc) GetAccessModes() []string {
	if x != nil {
		return x.AccessModes
	}
	return nil
}

func (x *CreatePvc) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CreatePvc) GetDefaultStorageClass() bool {
	if x != nil {
		return x.DefaultStorageClass
	}
	return false
}

func (x *CreatePvc) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

func (x *CreatePvc) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *CreatePvc) GetAnnotations() *structpb.Struct {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type isCreatePvc_Name interface {
	isCreatePvc_Name()
}

type CreatePvc_PvcName struct {
	// Name of the PVC, if not dynamically generated.
	PvcName string `protobuf:"bytes,1,opt,name=pvc_name,json=pvcName,proto3,oneof"`
}

type CreatePvc_PvcNameSuffix struct {
	// Suffix for a dynamically generated PVC name of the form
	// {{workflow.name}}-<pvc_name_suffix>.
	PvcNameSuffix string `protobuf:"bytes,2,opt,name=pvc_name_suffix,json=pvcNameSuffix,proto3,oneof"`
}

func (*CreatePvc_PvcName) isCreatePvc_Name() {}

func (*CreatePvc_PvcNameSuffix) isCreatePvc_Name() {}

type DeletePvc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier for the PVC.
	// Used like TaskInputsSpec.ml_pipelines.TaskInputsSpec.InputParameterSpec.kind.
	//
	// Types that are valid to be assigned to PvcReference:
	//
	//	*DeletePvc_TaskOutputParameter
	//	*DeletePvc_Constant
	//	*DeletePvc_ComponentInputParameter
	PvcReference  isDeletePvc_PvcReference `protobuf_oneof:"pvc_reference"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePvc) Reset() {
	*x = DeletePvc{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePvc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePvc) ProtoMessage() {}

func (x *DeletePvc) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePvc.ProtoReflect.Descriptor instead.
func (*DeletePvc) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{6}
}

func (x *DeletePvc) GetPvcReference() isDeletePvc_PvcReference {
	if x != nil {
		return x.PvcReference
	}
	return nil
}

func (x *DeletePvc) GetTaskOutputParameter() *pipelinespec.TaskInputsSpec_InputParameterSpec_TaskOutputParameterSpec {
	if x != nil {
		if x, ok := x.PvcReference.(*DeletePvc_TaskOutputParameter); ok {
			return x.TaskOutputParameter
		}
	}
	return nil
}

func (x *DeletePvc) GetConstant() string {
	if x != nil {
		if x, ok := x.PvcReference.(*DeletePvc_Constant); ok {
			return x.Constant
		}
	}
	return ""
}

func (x *DeletePvc) GetComponentInputParameter() string {
	if x != nil {
		if x, ok := x.PvcReference.(*DeletePvc_ComponentInputParameter); ok {
			return x.ComponentInputParameter
		}
	}
	return ""
}

type isDeletePvc_PvcReference interface {
	isDeletePvc_PvcReference()
}

type DeletePvc_TaskOutputParameter struct {
	// Output parameter from an upstream task.
	TaskOutputParameter *pipelinespec.TaskInputsSpec_InputParameterSpec_TaskOutputParameterSpec `protobuf:"bytes,1,opt,name=task_output_parameter,json=taskOutputParameter,proto3,oneof"`
}

type DeletePvc_Constant struct {
	// A constant value.
	Constant string `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type DeletePvc_ComponentInputParameter struct {
	// Pass the input parameter from parent component input parameter.
	ComponentInputParameter string `protobuf:"bytes,3,opt,name=component_input_parameter,json=componentInputParameter,proto3,oneof"`
}

func (*DeletePvc_TaskOutputParameter) isDeletePvc_PvcReference() {}

func (*DeletePvc_Constant) isDeletePvc_PvcReference() {}

func (*DeletePvc_ComponentInputParameter) isDeletePvc_PvcReference() {}

type NodeSelector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// map of label key to label value
	// corresponds to Pod.spec.nodeSelector field https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Provide a JSON struct of node selector
	// Takes precedence over labels.
	// Example: {"disk-type": "ssd", "region": "us-west"}
	NodeSelectorJson *pipelinespec.TaskInputsSpec_InputParameterSpec `protobuf:"bytes,2,opt,name=node_selector_json,json=nodeSelectorJson,proto3" json:"node_selector_json,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NodeSelector) Reset() {
	*x = NodeSelector{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSelector) ProtoMessage() {}

func (x *NodeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSelector.ProtoReflect.Descriptor instead.
func (*NodeSelector) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{7}
}

func (x *NodeSelector) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NodeSelector) GetNodeSelectorJson() *pipelinespec.TaskInputsSpec_InputParameterSpec {
	if x != nil {
		return x.NodeSelectorJson
	}
	return nil
}

type PodMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// values of metadata spec such as labels and annotations for the pod object
	// corresponds to Pod.metadata field https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Pod
	Labels        map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations   map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PodMetadata) Reset() {
	*x = PodMetadata{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodMetadata) ProtoMessage() {}

func (x *PodMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodMetadata.ProtoReflect.Descriptor instead.
func (*PodMetadata) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{8}
}

func (x *PodMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PodMetadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type ConfigMapAsVolume struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use config_name_parameter instead.
	//
	// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
	ConfigMapName string `protobuf:"bytes,1,opt,name=config_map_name,json=configMapName,proto3" json:"config_map_name,omitempty"`
	// Container path to mount the ConfigMap data.
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// An optional boolean value indicating whether the ConfigMap must be defined.
	Optional *bool `protobuf:"varint,3,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
	// Name of the ConfigMap.
	ConfigMapNameParameter *pipelinespec.TaskInputsSpec_InputParameterSpec `protobuf:"bytes,4,opt,name=config_map_name_parameter,json=configMapNameParameter,proto3" json:"config_map_name_parameter,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConfigMapAsVolume) Reset() {
	*x = ConfigMapAsVolume{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigMapAsVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapAsVolume) ProtoMessage() {}

func (x *ConfigMapAsVolume) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapAsVolume.ProtoReflect.Descriptor instead.
func (*ConfigMapAsVolume) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{9}
}

// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
func (x *ConfigMapAsVolume) GetConfigMapName() string {
	if x != nil {
		return x.ConfigMapName
	}
	return ""
}

func (x *ConfigMapAsVolume) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *ConfigMapAsVolume) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return false
}

func (x *ConfigMapAsVolume) GetConfigMapNameParameter() *pipelinespec.TaskInputsSpec_InputParameterSpec {
	if x != nil {
		return x.ConfigMapNameParameter
	}
	return nil
}

type ConfigMapAsEnv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use config_name_parameter instead.
	//
	// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
	ConfigMapName string                                 `protobuf:"bytes,1,opt,name=config_map_name,json=configMapName,proto3" json:"config_map_name,omitempty"`
	KeyToEnv      []*ConfigMapAsEnv_ConfigMapKeyToEnvMap `protobuf:"bytes,2,rep,name=key_to_env,json=keyToEnv,proto3" json:"key_to_env,omitempty"`
	// Name of the ConfigMap.
	ConfigMapNameParameter *pipelinespec.TaskInputsSpec_InputParameterSpec `protobuf:"bytes,3,opt,name=config_map_name_parameter,json=configMapNameParameter,proto3" json:"config_map_name_parameter,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConfigMapAsEnv) Reset() {
	*x = ConfigMapAsEnv{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigMapAsEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapAsEnv) ProtoMessage() {}

func (x *ConfigMapAsEnv) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapAsEnv.ProtoReflect.Descriptor instead.
func (*ConfigMapAsEnv) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
func (x *ConfigMapAsEnv) GetConfigMapName() string {
	if x != nil {
		return x.ConfigMapName
	}
	return ""
}

func (x *ConfigMapAsEnv) GetKeyToEnv() []*ConfigMapAsEnv_ConfigMapKeyToEnvMap {
	if x != nil {
		return x.KeyToEnv
	}
	return nil
}

func (x *ConfigMapAsEnv) GetConfigMapNameParameter() *pipelinespec.TaskInputsSpec_InputParameterSpec {
	if x != nil {
		return x.ConfigMapNameParameter
	}
	return nil
}

type GenericEphemeralVolume struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// more details in https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
	// Name of the ephemeral volume.
	VolumeName string `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// Container path to mount the volume
	MountPath string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// Corresponds to ephemeral.volumeClaimTemplate.spec.accessModes field.
	AccessModes []string `protobuf:"bytes,3,rep,name=access_modes,json=accessModes,proto3" json:"access_modes,omitempty"`
	// Corresponds to ephemeral.volumeClaimTemplate.spec.resources.requests.storage field.
	Size string `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	// If true, corresponds to omitted ephemeral.volumeClaimTemplate.spec.storageClassName.
	DefaultStorageClass bool `protobuf:"varint,5,opt,name=default_storage_class,json=defaultStorageClass,proto3" json:"default_storage_class,omitempty"`
	// Corresponds to ephemeral.volumeClaimTemplate.spec.storageClassName string field.
	// Should only be used if default_storage_class is false.
	StorageClassName string `protobuf:"bytes,6,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
	// Corresponds to ephemeral.volumeClaimTemplate.metadata.
	// This is not exactly a pod metadata but the fields are the same
	Metadata      *PodMetadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericEphemeralVolume) Reset() {
	*x = GenericEphemeralVolume{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericEphemeralVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericEphemeralVolume) ProtoMessage() {}

func (x *GenericEphemeralVolume) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericEphemeralVolume.ProtoReflect.Descriptor instead.
func (*GenericEphemeralVolume) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{11}
}

func (x *GenericEphemeralVolume) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *GenericEphemeralVolume) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *GenericEphemeralVolume) GetAccessModes() []string {
	if x != nil {
		return x.AccessModes
	}
	return nil
}

func (x *GenericEphemeralVolume) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *GenericEphemeralVolume) GetDefaultStorageClass() bool {
	if x != nil {
		return x.DefaultStorageClass
	}
	return false
}

func (x *GenericEphemeralVolume) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

func (x *GenericEphemeralVolume) GetMetadata() *PodMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ImagePullSecret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the image pull secret.
	//
	// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
	SecretName          string                                          `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	SecretNameParameter *pipelinespec.TaskInputsSpec_InputParameterSpec `protobuf:"bytes,2,opt,name=secret_name_parameter,json=secretNameParameter,proto3" json:"secret_name_parameter,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ImagePullSecret) Reset() {
	*x = ImagePullSecret{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImagePullSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePullSecret) ProtoMessage() {}

func (x *ImagePullSecret) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePullSecret.ProtoReflect.Descriptor instead.
func (*ImagePullSecret) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Marked as deprecated in kubernetes_executor_config.proto.
func (x *ImagePullSecret) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *ImagePullSecret) GetSecretNameParameter() *pipelinespec.TaskInputsSpec_InputParameterSpec {
	if x != nil {
		return x.SecretNameParameter
	}
	return nil
}

type FieldPathAsEnv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the environment variable
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the field path string
	FieldPath     string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldPathAsEnv) Reset() {
	*x = FieldPathAsEnv{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldPathAsEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPathAsEnv) ProtoMessage() {}

func (x *FieldPathAsEnv) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPathAsEnv.ProtoReflect.Descriptor instead.
func (*FieldPathAsEnv) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{13}
}

func (x *FieldPathAsEnv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldPathAsEnv) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

type Toleration struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Key               string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator          string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Value             string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Effect            string                 `protobuf:"bytes,4,opt,name=effect,proto3" json:"effect,omitempty"`
	TolerationSeconds *int64                 `protobuf:"varint,5,opt,name=toleration_seconds,json=tolerationSeconds,proto3,oneof" json:"toleration_seconds,omitempty"`
	// Provide a json struct of the toleration
	// Takes precedence over key, operator, value, effect.
	// Example: {"key": "key1", "operator": "Equal", "value": "value1", "effect": "NoSchedule"}
	// The JSON must follow Kubernetes
	// Toleration structure:
	// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.27/#toleration-v1-core
	TolerationJson *pipelinespec.TaskInputsSpec_InputParameterSpec `protobuf:"bytes,6,opt,name=toleration_json,json=tolerationJson,proto3" json:"toleration_json,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Toleration) Reset() {
	*x = Toleration{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Toleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toleration) ProtoMessage() {}

func (x *Toleration) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toleration.ProtoReflect.Descriptor instead.
func (*Toleration) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{14}
}

func (x *Toleration) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Toleration) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Toleration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Toleration) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

func (x *Toleration) GetTolerationSeconds() int64 {
	if x != nil && x.TolerationSeconds != nil {
		return *x.TolerationSeconds
	}
	return 0
}

func (x *Toleration) GetTolerationJson() *pipelinespec.TaskInputsSpec_InputParameterSpec {
	if x != nil {
		return x.TolerationJson
	}
	return nil
}

// Matches https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#labelselectorrequirement-v1-meta and
// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#nodeselectorrequirement-v1-core
type SelectorRequirement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Values        []string               `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectorRequirement) Reset() {
	*x = SelectorRequirement{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorRequirement) ProtoMessage() {}

func (x *SelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorRequirement.ProtoReflect.Descriptor instead.
func (*SelectorRequirement) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{15}
}

func (x *SelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SelectorRequirement) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type NodeAffinityTerm struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MatchExpressions []*SelectorRequirement `protobuf:"bytes,1,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
	MatchFields      []*SelectorRequirement `protobuf:"bytes,2,rep,name=match_fields,json=matchFields,proto3" json:"match_fields,omitempty"`
	//Setting the weight makes it use PreferredDuringSchedulingIgnoredDuringExecution rules instead of RequiredDuringSchedulingIgnoredDuringExecution rules
	Weight        *int32 `protobuf:"varint,3,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeAffinityTerm) Reset() {
	*x = NodeAffinityTerm{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAffinityTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAffinityTerm) ProtoMessage() {}

func (x *NodeAffinityTerm) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAffinityTerm.ProtoReflect.Descriptor instead.
func (*NodeAffinityTerm) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{16}
}

func (x *NodeAffinityTerm) GetMatchExpressions() []*SelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

func (x *NodeAffinityTerm) GetMatchFields() []*SelectorRequirement {
	if x != nil {
		return x.MatchFields
	}
	return nil
}

func (x *NodeAffinityTerm) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type PodAffinityTerm struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	MatchPodExpressions       []*SelectorRequirement `protobuf:"bytes,1,rep,name=match_pod_expressions,json=matchPodExpressions,proto3" json:"match_pod_expressions,omitempty"`
	MatchPodLabels            map[string]string      `protobuf:"bytes,2,rep,name=match_pod_labels,json=matchPodLabels,proto3" json:"match_pod_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TopologyKey               string                 `protobuf:"bytes,3,opt,name=topology_key,json=topologyKey,proto3" json:"topology_key,omitempty"`
	Namespaces                []string               `protobuf:"bytes,4,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	MatchNamespaceExpressions []*SelectorRequirement `protobuf:"bytes,5,rep,name=match_namespace_expressions,json=matchNamespaceExpressions,proto3" json:"match_namespace_expressions,omitempty"`
	MatchNamespaceLabels      map[string]string      `protobuf:"bytes,6,rep,name=match_namespace_labels,json=matchNamespaceLabels,proto3" json:"match_namespace_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	//Setting a weight makes it use PreferredDuringSchedulingIgnoredDuringExecution rules instead of RequiredDuringSchedulingIgnoredDuringExecution rules
	Weight *int32 `protobuf:"varint,7,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	//Flag indicating if it is a podaffinity or podantiaffinity
	Anti          *bool `protobuf:"varint,8,opt,name=anti,proto3,oneof" json:"anti,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PodAffinityTerm) Reset() {
	*x = PodAffinityTerm{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodAffinityTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodAffinityTerm) ProtoMessage() {}

func (x *PodAffinityTerm) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodAffinityTerm.ProtoReflect.Descriptor instead.
func (*PodAffinityTerm) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{17}
}

func (x *PodAffinityTerm) GetMatchPodExpressions() []*SelectorRequirement {
	if x != nil {
		return x.MatchPodExpressions
	}
	return nil
}

func (x *PodAffinityTerm) GetMatchPodLabels() map[string]string {
	if x != nil {
		return x.MatchPodLabels
	}
	return nil
}

func (x *PodAffinityTerm) GetTopologyKey() string {
	if x != nil {
		return x.TopologyKey
	}
	return ""
}

func (x *PodAffinityTerm) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *PodAffinityTerm) GetMatchNamespaceExpressions() []*SelectorRequirement {
	if x != nil {
		return x.MatchNamespaceExpressions
	}
	return nil
}

func (x *PodAffinityTerm) GetMatchNamespaceLabels() map[string]string {
	if x != nil {
		return x.MatchNamespaceLabels
	}
	return nil
}

func (x *PodAffinityTerm) GetWeight() int32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *PodAffinityTerm) GetAnti() bool {
	if x != nil && x.Anti != nil {
		return *x.Anti
	}
	return false
}

type EmptyDirMount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#emptydirvolumesource-v1-core
	VolumeName    string  `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	MountPath     string  `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	Medium        *string `protobuf:"bytes,3,opt,name=medium,proto3,oneof" json:"medium,omitempty"`
	SizeLimit     *string `protobuf:"bytes,4,opt,name=size_limit,json=sizeLimit,proto3,oneof" json:"size_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyDirMount) Reset() {
	*x = EmptyDirMount{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyDirMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyDirMount) ProtoMessage() {}

func (x *EmptyDirMount) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyDirMount.ProtoReflect.Descriptor instead.
func (*EmptyDirMount) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{18}
}

func (x *EmptyDirMount) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *EmptyDirMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *EmptyDirMount) GetMedium() string {
	if x != nil && x.Medium != nil {
		return *x.Medium
	}
	return ""
}

func (x *EmptyDirMount) GetSizeLimit() string {
	if x != nil && x.SizeLimit != nil {
		return *x.SizeLimit
	}
	return ""
}

type SecretAsEnv_SecretKeyToEnvMap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Corresponds to a key of the Secret.data field.
	SecretKey string `protobuf:"bytes,1,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// Env var to which secret_key's data should be set.
	EnvVar        string `protobuf:"bytes,2,opt,name=env_var,json=envVar,proto3" json:"env_var,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecretAsEnv_SecretKeyToEnvMap) Reset() {
	*x = SecretAsEnv_SecretKeyToEnvMap{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretAsEnv_SecretKeyToEnvMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretAsEnv_SecretKeyToEnvMap) ProtoMessage() {}

func (x *SecretAsEnv_SecretKeyToEnvMap) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretAsEnv_SecretKeyToEnvMap.ProtoReflect.Descriptor instead.
func (*SecretAsEnv_SecretKeyToEnvMap) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SecretAsEnv_SecretKeyToEnvMap) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *SecretAsEnv_SecretKeyToEnvMap) GetEnvVar() string {
	if x != nil {
		return x.EnvVar
	}
	return ""
}

type ConfigMapAsEnv_ConfigMapKeyToEnvMap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Corresponds to a key of the ConfigMap.
	ConfigMapKey string `protobuf:"bytes,1,opt,name=config_map_key,json=configMapKey,proto3" json:"config_map_key,omitempty"`
	// Env var to which configmap_key's data should be set.
	EnvVar        string `protobuf:"bytes,2,opt,name=env_var,json=envVar,proto3" json:"env_var,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigMapAsEnv_ConfigMapKeyToEnvMap) Reset() {
	*x = ConfigMapAsEnv_ConfigMapKeyToEnvMap{}
	mi := &file_kubernetes_executor_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigMapAsEnv_ConfigMapKeyToEnvMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMapAsEnv_ConfigMapKeyToEnvMap) ProtoMessage() {}

func (x *ConfigMapAsEnv_ConfigMapKeyToEnvMap) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_executor_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMapAsEnv_ConfigMapKeyToEnvMap.ProtoReflect.Descriptor instead.
func (*ConfigMapAsEnv_ConfigMapKeyToEnvMap) Descriptor() ([]byte, []int) {
	return file_kubernetes_executor_config_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ConfigMapAsEnv_ConfigMapKeyToEnvMap) GetConfigMapKey() string {
	if x != nil {
		return x.ConfigMapKey
	}
	return ""
}

func (x *ConfigMapAsEnv_ConfigMapKeyToEnvMap) GetEnvVar() string {
	if x != nil {
		return x.EnvVar
	}
	return ""
}

var File_kubernetes_executor_config_proto protoreflect.FileDescriptor

const file_kubernetes_executor_config_proto_rawDesc = "" +
	"\n" +
	" kubernetes_executor_config.proto\x12\x0ekfp_kubernetes\x1a\x1cgoogle/protobuf/struct.proto\x1a\x13pipeline_spec.proto\"\xc7\t\n" +
	"\x18KubernetesExecutorConfig\x12H\n" +
	"\x10secret_as_volume\x18\x01 \x03(\v2\x1e.kfp_kubernetes.SecretAsVolumeR\x0esecretAsVolume\x12?\n" +
	"\rsecret_as_env\x18\x02 \x03(\v2\x1b.kfp_kubernetes.SecretAsEnvR\vsecretAsEnv\x125\n" +
	"\tpvc_mount\x18\x03 \x03(\v2\x18.kfp_kubernetes.PvcMountR\bpvcMount\x12A\n" +
	"\rnode_selector\x18\x04 \x01(\v2\x1c.kfp_kubernetes.NodeSelectorR\fnodeSelector\x12>\n" +
	"\fpod_metadata\x18\x05 \x01(\v2\x1b.kfp_kubernetes.PodMetadataR\vpodMetadata\x12K\n" +
	"\x11image_pull_secret\x18\x06 \x03(\v2\x1f.kfp_kubernetes.ImagePullSecretR\x0fimagePullSecret\x12*\n" +
	"\x11image_pull_policy\x18\a \x01(\tR\x0fimagePullPolicy\x12R\n" +
	"\x14config_map_as_volume\x18\b \x03(\v2!.kfp_kubernetes.ConfigMapAsVolumeR\x11configMapAsVolume\x12I\n" +
	"\x11config_map_as_env\x18\t \x03(\v2\x1e.kfp_kubernetes.ConfigMapAsEnvR\x0econfigMapAsEnv\x126\n" +
	"\x17active_deadline_seconds\x18\n" +
	" \x01(\x03R\x15activeDeadlineSeconds\x12I\n" +
	"\x11field_path_as_env\x18\v \x03(\v2\x1e.kfp_kubernetes.FieldPathAsEnvR\x0efieldPathAsEnv\x12<\n" +
	"\vtolerations\x18\f \x03(\v2\x1a.kfp_kubernetes.TolerationR\vtolerations\x12`\n" +
	"\x18generic_ephemeral_volume\x18\r \x03(\v2&.kfp_kubernetes.GenericEphemeralVolumeR\x16genericEphemeralVolume\x12E\n" +
	"\rnode_affinity\x18\x0e \x03(\v2 .kfp_kubernetes.NodeAffinityTermR\fnodeAffinity\x12B\n" +
	"\fpod_affinity\x18\x0f \x03(\v2\x1f.kfp_kubernetes.PodAffinityTermR\vpodAffinity\x12W\n" +
	"\x15enabled_shared_memory\x18\x10 \x01(\v2#.kfp_kubernetes.EnabledSharedMemoryR\x13enabledSharedMemory\x12G\n" +
	"\x10empty_dir_mounts\x18\x11 \x03(\v2\x1d.kfp_kubernetes.EmptyDirMountR\x0eemptyDirMounts\"J\n" +
	"\x13EnabledSharedMemory\x12\x1f\n" +
	"\vvolume_name\x18\x01 \x01(\tR\n" +
	"volumeName\x12\x12\n" +
	"\x04size\x18\x02 \x01(\tR\x04size\"\xe7\x01\n" +
	"\x0eSecretAsVolume\x12#\n" +
	"\vsecret_name\x18\x01 \x01(\tB\x02\x18\x01R\n" +
	"secretName\x12\x1d\n" +
	"\n" +
	"mount_path\x18\x02 \x01(\tR\tmountPath\x12\x1f\n" +
	"\boptional\x18\x03 \x01(\bH\x00R\boptional\x88\x01\x01\x12c\n" +
	"\x15secret_name_parameter\x18\x04 \x01(\v2/.ml_pipelines.TaskInputsSpec.InputParameterSpecR\x13secretNameParameterB\v\n" +
	"\t_optional\"\xb1\x02\n" +
	"\vSecretAsEnv\x12#\n" +
	"\vsecret_name\x18\x01 \x01(\tB\x02\x18\x01R\n" +
	"secretName\x12K\n" +
	"\n" +
	"key_to_env\x18\x02 \x03(\v2-.kfp_kubernetes.SecretAsEnv.SecretKeyToEnvMapR\bkeyToEnv\x12c\n" +
	"\x15secret_name_parameter\x18\x04 \x01(\v2/.ml_pipelines.TaskInputsSpec.InputParameterSpecR\x13secretNameParameter\x1aK\n" +
	"\x11SecretKeyToEnvMap\x12\x1d\n" +
	"\n" +
	"secret_key\x18\x01 \x01(\tR\tsecretKey\x12\x17\n" +
	"\aenv_var\x18\x02 \x01(\tR\x06envVar\"\x81\x03\n" +
	"\bPvcMount\x12\x81\x01\n" +
	"\x15task_output_parameter\x18\x01 \x01(\v2G.ml_pipelines.TaskInputsSpec.InputParameterSpec.TaskOutputParameterSpecB\x02\x18\x01H\x00R\x13taskOutputParameter\x12 \n" +
	"\bconstant\x18\x02 \x01(\tB\x02\x18\x01H\x00R\bconstant\x12@\n" +
	"\x19component_input_parameter\x18\x03 \x01(\tB\x02\x18\x01H\x00R\x17componentInputParameter\x12\x1d\n" +
	"\n" +
	"mount_path\x18\x04 \x01(\tR\tmountPath\x12]\n" +
	"\x12pvc_name_parameter\x18\x05 \x01(\v2/.ml_pipelines.TaskInputsSpec.InputParameterSpecR\x10pvcNameParameterB\x0f\n" +
	"\rpvc_reference\"\xcf\x02\n" +
	"\tCreatePvc\x12\x1b\n" +
	"\bpvc_name\x18\x01 \x01(\tH\x00R\apvcName\x12(\n" +
	"\x0fpvc_name_suffix\x18\x02 \x01(\tH\x00R\rpvcNameSuffix\x12!\n" +
	"\faccess_modes\x18\x03 \x03(\tR\vaccessModes\x12\x12\n" +
	"\x04size\x18\x04 \x01(\tR\x04size\x122\n" +
	"\x15default_storage_class\x18\x05 \x01(\bR\x13defaultStorageClass\x12,\n" +
	"\x12storage_class_name\x18\x06 \x01(\tR\x10storageClassName\x12\x1f\n" +
	"\vvolume_name\x18\a \x01(\tR\n" +
	"volumeName\x129\n" +
	"\vannotations\x18\b \x01(\v2\x17.google.protobuf.StructR\vannotationsB\x06\n" +
	"\x04name\"\xf7\x01\n" +
	"\tDeletePvc\x12}\n" +
	"\x15task_output_parameter\x18\x01 \x01(\v2G.ml_pipelines.TaskInputsSpec.InputParameterSpec.TaskOutputParameterSpecH\x00R\x13taskOutputParameter\x12\x1c\n" +
	"\bconstant\x18\x02 \x01(\tH\x00R\bconstant\x12<\n" +
	"\x19component_input_parameter\x18\x03 \x01(\tH\x00R\x17componentInputParameterB\x0f\n" +
	"\rpvc_reference\"\xea\x01\n" +
	"\fNodeSelector\x12@\n" +
	"\x06labels\x18\x01 \x03(\v2(.kfp_kubernetes.NodeSelector.LabelsEntryR\x06labels\x12]\n" +
	"\x12node_selector_json\x18\x02 \x01(\v2/.ml_pipelines.TaskInputsSpec.InputParameterSpecR\x10nodeSelectorJson\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x99\x02\n" +
	"\vPodMetadata\x12?\n" +
	"\x06labels\x18\x01 \x03(\v2'.kfp_kubernetes.PodMetadata.LabelsEntryR\x06labels\x12N\n" +
	"\vannotations\x18\x02 \x03(\v2,.kfp_kubernetes.PodMetadata.AnnotationsEntryR\vannotations\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf8\x01\n" +
	"\x11ConfigMapAsVolume\x12*\n" +
	"\x0fconfig_map_name\x18\x01 \x01(\tB\x02\x18\x01R\rconfigMapName\x12\x1d\n" +
	"\n" +
	"mount_path\x18\x02 \x01(\tR\tmountPath\x12\x1f\n" +
	"\boptional\x18\x03 \x01(\bH\x00R\boptional\x88\x01\x01\x12j\n" +
	"\x19config_map_name_parameter\x18\x04 \x01(\v2/.ml_pipelines.TaskInputsSpec.InputParameterSpecR\x16configMapNameParameterB\v\n" +
	"\t_optional\"\xd2\x02\n" +
	"\x0eConfigMapAsEnv\x12*\n" +
	"\x0fconfig_map_name\x18\x01 \x01(\tB\x02\x18\x01R\rconfigMapName\x12Q\n" +
	"\n" +
	"key_to_env\x18\x02 \x03(\v23.kfp_kubernetes.ConfigMapAsEnv.ConfigMapKeyToEnvMapR\bkeyToEnv\x12j\n" +
	"\x19config_map_name_parameter\x18\x03 \x01(\v2/.ml_pipelines.TaskInputsSpec.InputParameterSpecR\x16configMapNameParameter\x1aU\n" +
	"\x14ConfigMapKeyToEnvMap\x12$\n" +
	"\x0econfig_map_key\x18\x01 \x01(\tR\fconfigMapKey\x12\x17\n" +
	"\aenv_var\x18\x02 \x01(\tR\x06envVar\"\xaa\x02\n" +
	"\x16GenericEphemeralVolume\x12\x1f\n" +
	"\vvolume_name\x18\x01 \x01(\tR\n" +
	"volumeName\x12\x1d\n" +
	"\n" +
	"mount_path\x18\x02 \x01(\tR\tmountPath\x12!\n" +
	"\faccess_modes\x18\x03 \x03(\tR\vaccessModes\x12\x12\n" +
	"\x04size\x18\x04 \x01(\tR\x04size\x122\n" +
	"\x15default_storage_class\x18\x05 \x01(\bR\x13defaultStorageClass\x12,\n" +
	"\x12storage_class_name\x18\x06 \x01(\tR\x10storageClassName\x127\n" +
	"\bmetadata\x18\a \x01(\v2\x1b.kfp_kubernetes.PodMetadataR\bmetadata\"\x9b\x01\n" +
	"\x0fImagePullSecret\x12#\n" +
	"\vsecret_name\x18\x01 \x01(\tB\x02\x18\x01R\n" +
	"secretName\x12c\n" +
	"\x15secret_name_parameter\x18\x02 \x01(\v2/.ml_pipelines.TaskInputsSpec.InputParameterSpecR\x13secretNameParameter\"C\n" +
	"\x0eFieldPathAsEnv\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"field_path\x18\x02 \x01(\tR\tfieldPath\"\x8d\x02\n" +
	"\n" +
	"Toleration\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x1a\n" +
	"\boperator\x18\x02 \x01(\tR\boperator\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x12\x16\n" +
	"\x06effect\x18\x04 \x01(\tR\x06effect\x122\n" +
	"\x12toleration_seconds\x18\x05 \x01(\x03H\x00R\x11tolerationSeconds\x88\x01\x01\x12X\n" +
	"\x0ftoleration_json\x18\x06 \x01(\v2/.ml_pipelines.TaskInputsSpec.InputParameterSpecR\x0etolerationJsonB\x15\n" +
	"\x13_toleration_seconds\"[\n" +
	"\x13SelectorRequirement\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x1a\n" +
	"\boperator\x18\x02 \x01(\tR\boperator\x12\x16\n" +
	"\x06values\x18\x03 \x03(\tR\x06values\"\xd4\x01\n" +
	"\x10NodeAffinityTerm\x12P\n" +
	"\x11match_expressions\x18\x01 \x03(\v2#.kfp_kubernetes.SelectorRequirementR\x10matchExpressions\x12F\n" +
	"\fmatch_fields\x18\x02 \x03(\v2#.kfp_kubernetes.SelectorRequirementR\vmatchFields\x12\x1b\n" +
	"\x06weight\x18\x03 \x01(\x05H\x00R\x06weight\x88\x01\x01B\t\n" +
	"\a_weight\"\xb8\x05\n" +
	"\x0fPodAffinityTerm\x12W\n" +
	"\x15match_pod_expressions\x18\x01 \x03(\v2#.kfp_kubernetes.SelectorRequirementR\x13matchPodExpressions\x12]\n" +
	"\x10match_pod_labels\x18\x02 \x03(\v23.kfp_kubernetes.PodAffinityTerm.MatchPodLabelsEntryR\x0ematchPodLabels\x12!\n" +
	"\ftopology_key\x18\x03 \x01(\tR\vtopologyKey\x12\x1e\n" +
	"\n" +
	"namespaces\x18\x04 \x03(\tR\n" +
	"namespaces\x12c\n" +
	"\x1bmatch_namespace_expressions\x18\x05 \x03(\v2#.kfp_kubernetes.SelectorRequirementR\x19matchNamespaceExpressions\x12o\n" +
	"\x16match_namespace_labels\x18\x06 \x03(\v29.kfp_kubernetes.PodAffinityTerm.MatchNamespaceLabelsEntryR\x14matchNamespaceLabels\x12\x1b\n" +
	"\x06weight\x18\a \x01(\x05H\x00R\x06weight\x88\x01\x01\x12\x17\n" +
	"\x04anti\x18\b \x01(\bH\x01R\x04anti\x88\x01\x01\x1aA\n" +
	"\x13MatchPodLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aG\n" +
	"\x19MatchNamespaceLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\t\n" +
	"\a_weightB\a\n" +
	"\x05_anti\"\xaa\x01\n" +
	"\rEmptyDirMount\x12\x1f\n" +
	"\vvolume_name\x18\x01 \x01(\tR\n" +
	"volumeName\x12\x1d\n" +
	"\n" +
	"mount_path\x18\x02 \x01(\tR\tmountPath\x12\x1b\n" +
	"\x06medium\x18\x03 \x01(\tH\x00R\x06medium\x88\x01\x01\x12\"\n" +
	"\n" +
	"size_limit\x18\x04 \x01(\tH\x01R\tsizeLimit\x88\x01\x01B\t\n" +
	"\a_mediumB\r\n" +
	"\v_size_limitBIZGgithub.com/kubeflow/pipelines/kubernetes_platform/go/kubernetesplatformb\x06proto3"

var (
	file_kubernetes_executor_config_proto_rawDescOnce sync.Once
	file_kubernetes_executor_config_proto_rawDescData []byte
)

func file_kubernetes_executor_config_proto_rawDescGZIP() []byte {
	file_kubernetes_executor_config_proto_rawDescOnce.Do(func() {
		file_kubernetes_executor_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kubernetes_executor_config_proto_rawDesc), len(file_kubernetes_executor_config_proto_rawDesc)))
	})
	return file_kubernetes_executor_config_proto_rawDescData
}

var file_kubernetes_executor_config_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_kubernetes_executor_config_proto_goTypes = []any{
	(*KubernetesExecutorConfig)(nil),            // 0: kfp_kubernetes.KubernetesExecutorConfig
	(*EnabledSharedMemory)(nil),                 // 1: kfp_kubernetes.EnabledSharedMemory
	(*SecretAsVolume)(nil),                      // 2: kfp_kubernetes.SecretAsVolume
	(*SecretAsEnv)(nil),                         // 3: kfp_kubernetes.SecretAsEnv
	(*PvcMount)(nil),                            // 4: kfp_kubernetes.PvcMount
	(*CreatePvc)(nil),                           // 5: kfp_kubernetes.CreatePvc
	(*DeletePvc)(nil),                           // 6: kfp_kubernetes.DeletePvc
	(*NodeSelector)(nil),                        // 7: kfp_kubernetes.NodeSelector
	(*PodMetadata)(nil),                         // 8: kfp_kubernetes.PodMetadata
	(*ConfigMapAsVolume)(nil),                   // 9: kfp_kubernetes.ConfigMapAsVolume
	(*ConfigMapAsEnv)(nil),                      // 10: kfp_kubernetes.ConfigMapAsEnv
	(*GenericEphemeralVolume)(nil),              // 11: kfp_kubernetes.GenericEphemeralVolume
	(*ImagePullSecret)(nil),                     // 12: kfp_kubernetes.ImagePullSecret
	(*FieldPathAsEnv)(nil),                      // 13: kfp_kubernetes.FieldPathAsEnv
	(*Toleration)(nil),                          // 14: kfp_kubernetes.Toleration
	(*SelectorRequirement)(nil),                 // 15: kfp_kubernetes.SelectorRequirement
	(*NodeAffinityTerm)(nil),                    // 16: kfp_kubernetes.NodeAffinityTerm
	(*PodAffinityTerm)(nil),                     // 17: kfp_kubernetes.PodAffinityTerm
	(*EmptyDirMount)(nil),                       // 18: kfp_kubernetes.EmptyDirMount
	(*SecretAsEnv_SecretKeyToEnvMap)(nil),       // 19: kfp_kubernetes.SecretAsEnv.SecretKeyToEnvMap
	nil,                                         // 20: kfp_kubernetes.NodeSelector.LabelsEntry
	nil,                                         // 21: kfp_kubernetes.PodMetadata.LabelsEntry
	nil,                                         // 22: kfp_kubernetes.PodMetadata.AnnotationsEntry
	(*ConfigMapAsEnv_ConfigMapKeyToEnvMap)(nil), // 23: kfp_kubernetes.ConfigMapAsEnv.ConfigMapKeyToEnvMap
	nil, // 24: kfp_kubernetes.PodAffinityTerm.MatchPodLabelsEntry
	nil, // 25: kfp_kubernetes.PodAffinityTerm.MatchNamespaceLabelsEntry
	(*pipelinespec.TaskInputsSpec_InputParameterSpec)(nil),                         // 26: ml_pipelines.TaskInputsSpec.InputParameterSpec
	(*pipelinespec.TaskInputsSpec_InputParameterSpec_TaskOutputParameterSpec)(nil), // 27: ml_pipelines.TaskInputsSpec.InputParameterSpec.TaskOutputParameterSpec
	(*structpb.Struct)(nil), // 28: google.protobuf.Struct
}
var file_kubernetes_executor_config_proto_depIdxs = []int32{
	2,  // 0: kfp_kubernetes.KubernetesExecutorConfig.secret_as_volume:type_name -> kfp_kubernetes.SecretAsVolume
	3,  // 1: kfp_kubernetes.KubernetesExecutorConfig.secret_as_env:type_name -> kfp_kubernetes.SecretAsEnv
	4,  // 2: kfp_kubernetes.KubernetesExecutorConfig.pvc_mount:type_name -> kfp_kubernetes.PvcMount
	7,  // 3: kfp_kubernetes.KubernetesExecutorConfig.node_selector:type_name -> kfp_kubernetes.NodeSelector
	8,  // 4: kfp_kubernetes.KubernetesExecutorConfig.pod_metadata:type_name -> kfp_kubernetes.PodMetadata
	12, // 5: kfp_kubernetes.KubernetesExecutorConfig.image_pull_secret:type_name -> kfp_kubernetes.ImagePullSecret
	9,  // 6: kfp_kubernetes.KubernetesExecutorConfig.config_map_as_volume:type_name -> kfp_kubernetes.ConfigMapAsVolume
	10, // 7: kfp_kubernetes.KubernetesExecutorConfig.config_map_as_env:type_name -> kfp_kubernetes.ConfigMapAsEnv
	13, // 8: kfp_kubernetes.KubernetesExecutorConfig.field_path_as_env:type_name -> kfp_kubernetes.FieldPathAsEnv
	14, // 9: kfp_kubernetes.KubernetesExecutorConfig.tolerations:type_name -> kfp_kubernetes.Toleration
	11, // 10: kfp_kubernetes.KubernetesExecutorConfig.generic_ephemeral_volume:type_name -> kfp_kubernetes.GenericEphemeralVolume
	16, // 11: kfp_kubernetes.KubernetesExecutorConfig.node_affinity:type_name -> kfp_kubernetes.NodeAffinityTerm
	17, // 12: kfp_kubernetes.KubernetesExecutorConfig.pod_affinity:type_name -> kfp_kubernetes.PodAffinityTerm
	1,  // 13: kfp_kubernetes.KubernetesExecutorConfig.enabled_shared_memory:type_name -> kfp_kubernetes.EnabledSharedMemory
	18, // 14: kfp_kubernetes.KubernetesExecutorConfig.empty_dir_mounts:type_name -> kfp_kubernetes.EmptyDirMount
	26, // 15: kfp_kubernetes.SecretAsVolume.secret_name_parameter:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec
	19, // 16: kfp_kubernetes.SecretAsEnv.key_to_env:type_name -> kfp_kubernetes.SecretAsEnv.SecretKeyToEnvMap
	26, // 17: kfp_kubernetes.SecretAsEnv.secret_name_parameter:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec
	27, // 18: kfp_kubernetes.PvcMount.task_output_parameter:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec.TaskOutputParameterSpec
	26, // 19: kfp_kubernetes.PvcMount.pvc_name_parameter:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec
	28, // 20: kfp_kubernetes.CreatePvc.annotations:type_name -> google.protobuf.Struct
	27, // 21: kfp_kubernetes.DeletePvc.task_output_parameter:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec.TaskOutputParameterSpec
	20, // 22: kfp_kubernetes.NodeSelector.labels:type_name -> kfp_kubernetes.NodeSelector.LabelsEntry
	26, // 23: kfp_kubernetes.NodeSelector.node_selector_json:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec
	21, // 24: kfp_kubernetes.PodMetadata.labels:type_name -> kfp_kubernetes.PodMetadata.LabelsEntry
	22, // 25: kfp_kubernetes.PodMetadata.annotations:type_name -> kfp_kubernetes.PodMetadata.AnnotationsEntry
	26, // 26: kfp_kubernetes.ConfigMapAsVolume.config_map_name_parameter:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec
	23, // 27: kfp_kubernetes.ConfigMapAsEnv.key_to_env:type_name -> kfp_kubernetes.ConfigMapAsEnv.ConfigMapKeyToEnvMap
	26, // 28: kfp_kubernetes.ConfigMapAsEnv.config_map_name_parameter:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec
	8,  // 29: kfp_kubernetes.GenericEphemeralVolume.metadata:type_name -> kfp_kubernetes.PodMetadata
	26, // 30: kfp_kubernetes.ImagePullSecret.secret_name_parameter:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec
	26, // 31: kfp_kubernetes.Toleration.toleration_json:type_name -> ml_pipelines.TaskInputsSpec.InputParameterSpec
	15, // 32: kfp_kubernetes.NodeAffinityTerm.match_expressions:type_name -> kfp_kubernetes.SelectorRequirement
	15, // 33: kfp_kubernetes.NodeAffinityTerm.match_fields:type_name -> kfp_kubernetes.SelectorRequirement
	15, // 34: kfp_kubernetes.PodAffinityTerm.match_pod_expressions:type_name -> kfp_kubernetes.SelectorRequirement
	24, // 35: kfp_kubernetes.PodAffinityTerm.match_pod_labels:type_name -> kfp_kubernetes.PodAffinityTerm.MatchPodLabelsEntry
	15, // 36: kfp_kubernetes.PodAffinityTerm.match_namespace_expressions:type_name -> kfp_kubernetes.SelectorRequirement
	25, // 37: kfp_kubernetes.PodAffinityTerm.match_namespace_labels:type_name -> kfp_kubernetes.PodAffinityTerm.MatchNamespaceLabelsEntry
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_kubernetes_executor_config_proto_init() }
func file_kubernetes_executor_config_proto_init() {
	if File_kubernetes_executor_config_proto != nil {
		return
	}
	file_kubernetes_executor_config_proto_msgTypes[2].OneofWrappers = []any{}
	file_kubernetes_executor_config_proto_msgTypes[4].OneofWrappers = []any{
		(*PvcMount_TaskOutputParameter)(nil),
		(*PvcMount_Constant)(nil),
		(*PvcMount_ComponentInputParameter)(nil),
	}
	file_kubernetes_executor_config_proto_msgTypes[5].OneofWrappers = []any{
		(*CreatePvc_PvcName)(nil),
		(*CreatePvc_PvcNameSuffix)(nil),
	}
	file_kubernetes_executor_config_proto_msgTypes[6].OneofWrappers = []any{
		(*DeletePvc_TaskOutputParameter)(nil),
		(*DeletePvc_Constant)(nil),
		(*DeletePvc_ComponentInputParameter)(nil),
	}
	file_kubernetes_executor_config_proto_msgTypes[9].OneofWrappers = []any{}
	file_kubernetes_executor_config_proto_msgTypes[14].OneofWrappers = []any{}
	file_kubernetes_executor_config_proto_msgTypes[16].OneofWrappers = []any{}
	file_kubernetes_executor_config_proto_msgTypes[17].OneofWrappers = []any{}
	file_kubernetes_executor_config_proto_msgTypes[18].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kubernetes_executor_config_proto_rawDesc), len(file_kubernetes_executor_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kubernetes_executor_config_proto_goTypes,
		DependencyIndexes: file_kubernetes_executor_config_proto_depIdxs,
		MessageInfos:      file_kubernetes_executor_config_proto_msgTypes,
	}.Build()
	File_kubernetes_executor_config_proto = out.File
	file_kubernetes_executor_config_proto_goTypes = nil
	file_kubernetes_executor_config_proto_depIdxs = nil
}
