# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
# Pull and retag the images for the pipeline system
- name: 'gcr.io/cloud-builders/docker'
  args: ['pull', 'gcr.io/$PROJECT_ID/frontend:$COMMIT_SHA']
  id:   'pullFrontend'
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/frontend:$COMMIT_SHA', 'gcr.io/ml-pipeline/frontend:$TAG_NAME']
  id:   'tagFrontendVersionNumber'
  waitFor: ['pullFrontend']
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/frontend:$COMMIT_SHA', 'gcr.io/ml-pipeline/frontend:$COMMIT_SHA']
  id:   'tagFrontendCommitSHA'
  waitFor: ['pullFrontend']

- name: 'gcr.io/cloud-builders/docker'
  args: ['pull', 'gcr.io/$PROJECT_ID/api-server:$COMMIT_SHA']
  id:   'pullAPIServer'
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/api-server:$COMMIT_SHA', 'gcr.io/ml-pipeline/api-server:$TAG_NAME']
  id:   'tagAPIServerVersionNumber'
  waitFor: ['pullAPIServer']
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/api-server:$COMMIT_SHA', 'gcr.io/ml-pipeline/api-server:$COMMIT_SHA']
  id:   'tagAPIServerCommitSHA'
  waitFor: ['pullAPIServer']

- name: 'gcr.io/cloud-builders/docker'
  args: ['pull', 'gcr.io/$PROJECT_ID/scheduledworkflow:$COMMIT_SHA']
  id:   'pullScheduledworkflow'
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/scheduledworkflow:$COMMIT_SHA', 'gcr.io/ml-pipeline/scheduledworkflow:$TAG_NAME']
  id:   'tagScheduledworkflowVersionNumber'
  waitFor: ['pullScheduledworkflow']
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/scheduledworkflow:$COMMIT_SHA', 'gcr.io/ml-pipeline/scheduledworkflow:$COMMIT_SHA']
  id:   'tagScheduledworkflowCommitSHA'
  waitFor: ['pullScheduledworkflow']

- name: 'gcr.io/cloud-builders/docker'
  args: ['pull', 'gcr.io/$PROJECT_ID/persistenceagent:$COMMIT_SHA']
  id:   'pullPersistenceagent'
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/persistenceagent:$COMMIT_SHA', 'gcr.io/ml-pipeline/persistenceagent:$TAG_NAME']
  id:   'tagPersistenceagentVersionNumber'
  waitFor: ['pullPersistenceagent']
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/$PROJECT_ID/persistenceagent:$COMMIT_SHA', 'gcr.io/ml-pipeline/persistenceagent:$COMMIT_SHA']
  id:   'tagPersistenceagentCommitSHA'
  waitFor: ['pullPersistenceagent']

- name: 'gcr.io/cloud-builders/docker'
  args: ['pull', 'gcr.io/$PROJECT_ID/bootstrapper:$COMMIT_SHA']
  id:   'pullBootstrapper'
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: '/bin/bash'
  args: ['-c', 'printf "FROM gcr.io/$PROJECT_ID/bootstrapper:$COMMIT_SHA\nENV API_SERVER_IMAGE gcr.io/ml-pipeline/api-server:$COMMIT_SHA\nENV SCHEDULED_WORKFLOW_IMAGE gcr.io/ml-pipeline/scheduledworkflow:$COMMIT_SHA\nENV PERSISTENCE_AGENT_IMAGE gcr.io/ml-pipeline/persistenceagent:$COMMIT_SHA\nENV UI_IMAGE gcr.io/ml-pipeline/frontend:$COMMIT_SHA" > Dockerfile; docker build -t gcr.io/ml-pipeline/bootstrapper:$COMMIT_SHA .']
  id: 'buildBootstrapper'
  waitFor: ['pullBootstrapper']
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'gcr.io/ml-pipeline/bootstrapper:$COMMIT_SHA', 'gcr.io/ml-pipeline/bootstrapper:$TAG_NAME']
  id:   'tagBootstrapperVersionNumber'
  waitFor: ['buildBootstrapper']

# Copy the bootstrapper config
- name: 'debian'
  entrypoint: '/bin/bash'
  args: ['-c', 'sed -i -e "s/gcr.io\/ml-pipeline\/bootstrapper:\([a-zA-Z0-9_.-]\)\+/gcr.io\/ml-pipeline\/bootstrapper:$TAG_NAME/g" /workspace/bootstrapper.yaml']
  id:   'prepareBootstrapperYAML'
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '/workspace/bootstrapper.yaml', 'gs://ml-pipeline/release/$TAG_NAME/bootstrapper.yaml']
  id:   'copyBootstrapperYAML'
  waitFor: ['prepareBootstrapperYAML']
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '/workspace/bootstrapper.yaml', 'gs://ml-pipeline/release/latest/bootstrapper.yaml']
  id:   'copyBootstrapperYAMLToLatest'
  waitFor: ['prepareBootstrapperYAML']

# Copy the uninstaller config
- name: 'debian'
  entrypoint: '/bin/bash'
  args: ['-c', 'sed -i -e "s/gcr.io\/ml-pipeline\/bootstrapper:\([a-zA-Z0-9_.-]\)\+/gcr.io\/ml-pipeline\/bootstrapper:$TAG_NAME/g" /workspace/uninstaller.yaml']
  id:   'prepareUninstallerYAML'
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '/workspace/uninstaller.yaml', 'gs://ml-pipeline/release/$TAG_NAME/uninstaller.yaml']
  id:   'copyUninstallerYAML'
  waitFor: ['prepareUninstallerYAML']
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '/workspace/uninstaller.yaml', 'gs://ml-pipeline/release/latest/uninstaller.yaml']
  id:   'copyUninstallerYAMLToLatest'
  waitFor: ['prepareUninstallerYAML']

# Copy the Python SDK
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', 'gs://$PROJECT_ID/builds/$COMMIT_SHA/kfp.tar.gz', '/workspace/']
  id:   'copyPythonSDKLocal'
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '/workspace/kfp.tar.gz', 'gs://ml-pipeline/release/$TAG_NAME/kfp.tar.gz']
  id:   'copyPythonSDK'
  waitFor: ['copyPythonSDKLocal']
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '/workspace/kfp.tar.gz', 'gs://ml-pipeline/release/latest/kfp.tar.gz']
  id:   'copyPythonSDKToLatest'
  waitFor: ['copyPythonSDKLocal']

# Build the tagged samples
- name: 'debian'
  entrypoint: '/bin/bash'
  args: ['-c', 'sed -i -e "s/gcr.io\/ml-pipeline\/\([^\/:]\+\):\([a-zA-Z0-9_.-]\)\+/gcr.io\/ml-pipeline\/\\1:$TAG_NAME/g" samples/*/*.py']
  id:   'prepareVersionedSamples'
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '-r', '/workspace/samples/', 'gs://ml-pipeline/release/$TAG_NAME/samples']
  id:   'copyVersionedSamples'
  waitFor: ['prepareVersionedSamples']

# Copy the TFX sample data to the ml-pipeline-playground bucket
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '-r', '/workspace/samples/tfx/taxi-cab-classification/*', 'gs://ml-pipeline-playground/tfx/taxi-cab-classification/']
  id:   'copyTFXData'

images:
- 'gcr.io/ml-pipeline/frontend:$TAG_NAME'
- 'gcr.io/ml-pipeline/frontend:$COMMIT_SHA'
- 'gcr.io/ml-pipeline/api-server:$TAG_NAME'
- 'gcr.io/ml-pipeline/api-server:$COMMIT_SHA'
- 'gcr.io/ml-pipeline/scheduledworkflow:$TAG_NAME'
- 'gcr.io/ml-pipeline/scheduledworkflow:$COMMIT_SHA'
- 'gcr.io/ml-pipeline/persistenceagent:$TAG_NAME'
- 'gcr.io/ml-pipeline/persistenceagent:$COMMIT_SHA'
- 'gcr.io/ml-pipeline/bootstrapper:$TAG_NAME'
- 'gcr.io/ml-pipeline/bootstrapper:$COMMIT_SHA'

timeout: '1200s'
